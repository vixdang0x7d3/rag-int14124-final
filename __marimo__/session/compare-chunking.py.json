{
  "version": "1",
  "metadata": {
    "marimo_version": "0.13.15"
  },
  "cells": [
    {
      "id": "Hbol",
      "code_hash": "b03ae3d1a8c7e35b57a5d71425064bb8",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "MJUe",
      "code_hash": "3354c6b61507ca5280e99f5402a451a4",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h3 id=\"imports\">Imports</h3></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "vblA",
      "code_hash": "8563452e52efb4deeacbbe9166f297a0",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "bkHC",
      "code_hash": "fd8fa912b94bb9a38de1a27f4bdb1071",
      "outputs": [],
      "console": []
    },
    {
      "id": "lEQa",
      "code_hash": "46fb1ae645e4ecefb51ca602f3ecfa9c",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Using CUDA ? YES\nGPU: NVIDIA GeForce GTX 1660 Ti\n"
        }
      ]
    },
    {
      "id": "PKri",
      "code_hash": "fb851e7d70c8ebd9057f38b946bc7771",
      "outputs": [],
      "console": []
    },
    {
      "id": "Xref",
      "code_hash": "0bb3ad46cbe3cdd55a2d6bed7c715d82",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "SFPL",
      "code_hash": "f11bd9da8092eaf483735c6cf8a8213d",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "BYtC",
      "code_hash": "ddb9d937595beb900791ba6b92b6d009",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.rllib.core.rl_module.multi_rl_module.MultiRLModule#\n\n\n__init__\nInitializes a MultiRLModule instance.\n\nadd_module\nAdds a module at run time to the multi-agent module.\n\nas_multi_rl_module\nReturns self in order to match RLModule.as_multi_rl_module() behavior.\n\nforeach_module\nCalls the given function with each (module_id, module).\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.\n\nfrom_checkpoint\nCreates a new Checkpointable instance from the given location and returns it.\n\nget\nReturns the module with the given module ID or default if not found in self.\n\nget_exploration_action_dist_cls\nReturns the action distribution class for this RLModule used for exploration.\n\nget_inference_action_dist_cls\nReturns the action distribution class for this RLModule used for inference.\n\nget_metadata\nReturns JSON writable metadata further describing the implementing class.\n\nget_train_action_dist_cls\nReturns the action distribution class for this RLModule used for training.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).\n\n\n\n\n\nAs you can see, the changes in the actual training function are minimal. Instead of\nreturning the accuracy value, we report it back to Tune using session.report().\nOur config dictionary only changed slightly. Instead of passing hard-coded\nparameters, we tell Tune to choose values from a range of valid options. There are\na number of options we have here, all of which are explained in\nthe Tune docs.\nFor a brief explanation, this is what they do:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).\n\n\n\n\n\nAs you can see, the changes in the actual training function are minimal. Instead of\nreturning the accuracy value, we report it back to Tune using session.report().\nOur config dictionary only changed slightly. Instead of passing hard-coded\nparameters, we tell Tune to choose values from a range of valid options. There are\na number of options we have here, all of which are explained in\nthe Tune docs.\nFor a brief explanation, this is what they do:': cannot unpack non-iterable NoneType object\nError in finding 'tune.randint(min, max) chooses a random integer value between min and max.\nNote that max is exclusive, so it will not be sampled.\ntune.choice([a, b, c]) chooses one of the items of the list at random. Each item\nhas the same chance to be sampled.\ntune.uniform(min, max) samples a floating point number between min and max.\nNote that max is exclusive here, too.\ntune.loguniform(min, max, base=10) samples a floating point number between min and max,\nbut applies a logarithmic transformation to these boundaries first. Thus, this makes\nit easy to sample values from different orders of magnitude.\n\n\nThe best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).\n\n\n\n\n\nAs you can see, the changes in the actual training function are minimal. Instead of\nreturning the accuracy value, we report it back to Tune using session.report().\nOur config dictionary only changed slightly. Instead of passing hard-coded\nparameters, we tell Tune to choose values from a range of valid options. There are\na number of options we have here, all of which are explained in\nthe Tune docs.\nFor a brief explanation, this is what they do:': cannot unpack non-iterable NoneType object\nError in finding 'tune.randint(min, max) chooses a random integer value between min and max.\nNote that max is exclusive, so it will not be sampled.\ntune.choice([a, b, c]) chooses one of the items of the list at random. Each item\nhas the same chance to be sampled.\ntune.uniform(min, max) samples a floating point number between min and max.\nNote that max is exclusive here, too.\ntune.loguniform(min, max, base=10) samples a floating point number between min and max,\nbut applies a logarithmic transformation to these boundaries first. Thus, this makes\nit easy to sample values from different orders of magnitude.\n\n\nThe best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_breast_cancer_32eb5_00000TERMINATED127.0.0.1:897630.000830475          5                 1   0.675899    10       0.0169384      0.640195    0.342657\n\n\n\n\n\n2025-02-11 16:13:35,717\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-34' in 0.0018s.\n2025-02-11 16:13:35,719\tINFO tune.py:1041 -- Total run time: 1.05 seconds (1.04 seconds for the tuning loop).\n\n\nBest model parameters: {'objective': 'binary:logistic', 'eval_metric': ['logloss', 'error'], 'max_depth': 5, 'min_child_weight': 1, 'subsample': 0.675899175238225, 'eta': 0.0008304750981897656}\nBest model total accuracy: 0.6573\n\n\n\n\n\n\n Best model parameters: {'objective': 'binary:logistic', 'eval_metric': ['logloss', 'error'], 'max_depth': 7, 'min_child_weight': 2, 'subsample': 0.5015513240240503, 'eta': 0.024272050872920895}\n Best model total accuracy: 0.9301': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc              h0   lr  iter  total time (s)       Q     theta0   theta1\n\n\ntrain_func_91d06_00000TERMINATED127.0.0.1:23610   00.015   100       0.068691 0.5906680.9        0.0427973\ntrain_func_91d06_00001TERMINATED127.0.0.1:23609   10.045   100       0.06599690.3899990.0008300930.9      \n\n\n\n\n\n\n\n\n\nAs we can see, neither trial makes it to the optimum, since the search configs are stuck with their original values. This illustrates a key advantage of PBT: while traditional hyperparameter search methods (like grid search) keep fixed search values throughout training, PBT can adapt the search dynamically, allowing it to find better solutions with the same computational budget.\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]': cannot unpack non-iterable NoneType object\nError in finding 'In ray-cluster.external-redis.yaml, the gcsFaultToleranceOptions.externalStorageNamespace option isn\u2019t set for the RayCluster.\nTherefore, KubeRay automatically injects the environment variable RAY_external_storage_namespace to all Ray Pods managed by the RayCluster with the RayCluster\u2019s UID as the external storage namespace by default.\nSee this section to learn more about the option.\n\n\nStep 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'In ray-cluster.external-redis.yaml, the gcsFaultToleranceOptions.externalStorageNamespace option isn\u2019t set for the RayCluster.\nTherefore, KubeRay automatically injects the environment variable RAY_external_storage_namespace to all Ray Pods managed by the RayCluster with the RayCluster\u2019s UID as the external storage namespace by default.\nSee this section to learn more about the option.\n\n\nStep 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server\n\n\n\n\n\n\n# Step 7.3: The head Pod fails and restarts after `RAY_gcs_rpc_server_reconnect_timeout_s` (60) seconds.\n# In addition, the worker Pod isn't terminated by the new head after reconnecting because GCS fault\n# tolerance is enabled.\nkubectl get pods -l=ray.io/is-ray-node=yes': cannot unpack non-iterable NoneType object\nError in finding 'For more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.\n\n\n\nDisabling the Dashboard#\nDashboard is included if you use ray[default] or other installation commands and automatically started.\nTo disable Dashboard, use the following arguments --include-dashboard.\n\n\n\nSingle-node local cluster\nStart the cluster explicitly with CLI \nray start --include-dashboard=False\n\n\nStart the cluster implicitly with ray.init \nimport ray\nray.init(include_dashboard=False)\n\n\n\n\n\nVM Cluster Launcher\nInclude the ray start --head --include-dashboard=False argument\nin the head_start_ray_commands section of the Cluster Launcher\u2019s YAML file.\n\n\n\nKubeRay\n\nWarning\nIt\u2019s not recommended to disable Dashboard because several KubeRay features like RayJob and RayService depend on it.\n\nSet spec.headGroupSpec.rayStartParams.include-dashboard to False. Check out this example YAML file.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nsession.report can\u2019t be used within a Trainable class.\n\n\n\nLearn more about the details of Trainables here\nand have a look at our examples.\nNext, let\u2019s have a closer look at what the config dictionary is that you pass into your trainables.\n\n\n\n\nTune Trials#\nYou use Tuner.fit to execute and manage hyperparameter tuning and generate your trials.\nAt a minimum, your Tuner call takes in a trainable as first argument, and a param_space dictionary\nto define the search space.\nThe Tuner.fit() function also provides many features such as logging,\ncheckpointing, and early stopping.\nIn the example, minimizing a (x ** 2) + b, a simple Tune run with a simplistic search space for a and b\nlooks like this:\n# Pass in a Trainable class or function, along with a search space \"config\".\ntuner = tune.Tuner(trainable, param_space={\"a\": 2, \"b\": 4})\ntuner.fit()': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nsession.report can\u2019t be used within a Trainable class.\n\n\n\nLearn more about the details of Trainables here\nand have a look at our examples.\nNext, let\u2019s have a closer look at what the config dictionary is that you pass into your trainables.\n\n\n\n\nTune Trials#\nYou use Tuner.fit to execute and manage hyperparameter tuning and generate your trials.\nAt a minimum, your Tuner call takes in a trainable as first argument, and a param_space dictionary\nto define the search space.\nThe Tuner.fit() function also provides many features such as logging,\ncheckpointing, and early stopping.\nIn the example, minimizing a (x ** 2) + b, a simple Tune run with a simplistic search space for a and b\nlooks like this:\n# Pass in a Trainable class or function, along with a search space \"config\".\ntuner = tune.Tuner(trainable, param_space={\"a\": 2, \"b\": 4})\ntuner.fit()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nsession.report can\u2019t be used within a Trainable class.\n\n\n\nLearn more about the details of Trainables here\nand have a look at our examples.\nNext, let\u2019s have a closer look at what the config dictionary is that you pass into your trainables.\n\n\n\n\nTune Trials#\nYou use Tuner.fit to execute and manage hyperparameter tuning and generate your trials.\nAt a minimum, your Tuner call takes in a trainable as first argument, and a param_space dictionary\nto define the search space.\nThe Tuner.fit() function also provides many features such as logging,\ncheckpointing, and early stopping.\nIn the example, minimizing a (x ** 2) + b, a simple Tune run with a simplistic search space for a and b\nlooks like this:\n# Pass in a Trainable class or function, along with a search space \"config\".\ntuner = tune.Tuner(trainable, param_space={\"a\": 2, \"b\": 4})\ntuner.fit()': cannot unpack non-iterable NoneType object\nError in finding 'In case you want to implement your own search algorithm, the interface is easy to implement,\nyou can read the instructions here.\nTune also provides helpful utilities to use with Search Algorithms:\n\n\nRepeated Evaluations (tune.search.Repeater): Support for running each sampled hyperparameter with multiple random seeds.\nConcurrencyLimiter (tune.search.ConcurrencyLimiter): Limits the amount of concurrent trials when running optimization.\nShim Instantiation (tune.create_searcher): Allows creation of the search algorithm object given a string.\n\n\nNote that in the example above we  tell Tune to stop after 20 training iterations.\nThis way of stopping trials with explicit rules is useful, but in many cases we can do even better with\nschedulers.\n\n# Create HyperBand scheduler and minimize the score\nhyperband = HyperBandScheduler(metric=\"score\", mode=\"max\")\n\nconfig = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 1)}\n\ntuner = tune.Tuner(\n    trainable,\n    tune_config=tune.TuneConfig(\n        num_samples=20,\n        scheduler=hyperband,\n    ),\n    param_space=config,\n)\ntuner.fit()': cannot unpack non-iterable NoneType object\nError in finding 'DeprecationWarning,\n\n\n== Status ==Current time: 2022-07-22 15:41:31 (running for 00:00:06.73)Memory usage on this node: 9.9/16.0 GiBUsing FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/4.5 GiB heap, 0.0/2.0 GiB objectsCurrent best trial: 5bf98_00000 with loss=1.0234101880766688 and parameters={'mean': 1, 'sd': 0.40575843135279466}Result logdir: /Users/kai/ray_results/train_function_2022-07-22_15-41-18Number of trials: 3/3 (3 TERMINATED)\n\nTrial name                status    loc              mean      sd  iter  total time (s)   loss\n\n\ntrain_function_5bf98_00000TERMINATED127.0.0.1:48140     10.405758    30       2.11758  1.02341\ntrain_function_5bf98_00001TERMINATED127.0.0.1:48147     20.647335    30       0.07707311.53993\ntrain_function_5bf98_00002TERMINATED127.0.0.1:48151     30.256568    30       0.07284313.0393 \n\n\n2022-07-22 15:41:31,290\tINFO tune.py:738 -- Total run time: 7.36 seconds (6.72 seconds for the tuning loop).\n\n\n{'mean': 1, 'sd': 0.40575843135279466}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config_space = CS.ConfigurationSpace()\nconfig_space.add_hyperparameter(\n    CS.Constant(\"steps\", 100)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"width\", lower=0, upper=20)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"height\", lower=-100, upper=100)\n)\nconfig_space.add_hyperparameter(\n    CS.CategoricalHyperparameter(\n        \"activation\", choices=[\"relu\", \"tanh\"]\n    )\n)\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu\n\n\n\n\n\n\n# As we are passing config space directly to the searcher,\n# we need to define metric and mode in it as well, in addition\n# to Tuner()\nalgo = TuneBOHB(\n    space=config_space,\n    metric=\"mean_loss\",\n    mode=\"max\",\n)\nalgo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\nscheduler = HyperBandForBOHB(\n    time_attr=\"training_iteration\",\n    max_t=100,\n    reduction_factor=4,\n    stop_last_trials=False,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config_space = CS.ConfigurationSpace()\nconfig_space.add_hyperparameter(\n    CS.Constant(\"steps\", 100)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"width\", lower=0, upper=20)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"height\", lower=-100, upper=100)\n)\nconfig_space.add_hyperparameter(\n    CS.CategoricalHyperparameter(\n        \"activation\", choices=[\"relu\", \"tanh\"]\n    )\n)\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu\n\n\n\n\n\n\n# As we are passing config space directly to the searcher,\n# we need to define metric and mode in it as well, in addition\n# to Tuner()\nalgo = TuneBOHB(\n    space=config_space,\n    metric=\"mean_loss\",\n    mode=\"max\",\n)\nalgo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\nscheduler = HyperBandForBOHB(\n    time_attr=\"training_iteration\",\n    max_t=100,\n    reduction_factor=4,\n    stop_last_trials=False,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config_space = CS.ConfigurationSpace()\nconfig_space.add_hyperparameter(\n    CS.Constant(\"steps\", 100)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"width\", lower=0, upper=20)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"height\", lower=-100, upper=100)\n)\nconfig_space.add_hyperparameter(\n    CS.CategoricalHyperparameter(\n        \"activation\", choices=[\"relu\", \"tanh\"]\n    )\n)\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu\n\n\n\n\n\n\n# As we are passing config space directly to the searcher,\n# we need to define metric and mode in it as well, in addition\n# to Tuner()\nalgo = TuneBOHB(\n    space=config_space,\n    metric=\"mean_loss\",\n    mode=\"max\",\n)\nalgo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\nscheduler = HyperBandForBOHB(\n    time_attr=\"training_iteration\",\n    max_t=100,\n    reduction_factor=4,\n    stop_last_trials=False,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config_space = CS.ConfigurationSpace()\nconfig_space.add_hyperparameter(\n    CS.Constant(\"steps\", 100)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"width\", lower=0, upper=20)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"height\", lower=-100, upper=100)\n)\nconfig_space.add_hyperparameter(\n    CS.CategoricalHyperparameter(\n        \"activation\", choices=[\"relu\", \"tanh\"]\n    )\n)\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu\n\n\n\n\n\n\n# As we are passing config space directly to the searcher,\n# we need to define metric and mode in it as well, in addition\n# to Tuner()\nalgo = TuneBOHB(\n    space=config_space,\n    metric=\"mean_loss\",\n    mode=\"max\",\n)\nalgo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\nscheduler = HyperBandForBOHB(\n    time_attr=\"training_iteration\",\n    max_t=100,\n    reduction_factor=4,\n    stop_last_trials=False,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config_space = CS.ConfigurationSpace()\nconfig_space.add_hyperparameter(\n    CS.Constant(\"steps\", 100)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"width\", lower=0, upper=20)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"height\", lower=-100, upper=100)\n)\nconfig_space.add_hyperparameter(\n    CS.CategoricalHyperparameter(\n        \"activation\", choices=[\"relu\", \"tanh\"]\n    )\n)\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu\n\n\n\n\n\n\n# As we are passing config space directly to the searcher,\n# we need to define metric and mode in it as well, in addition\n# to Tuner()\nalgo = TuneBOHB(\n    space=config_space,\n    metric=\"mean_loss\",\n    mode=\"max\",\n)\nalgo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\nscheduler = HyperBandForBOHB(\n    time_attr=\"training_iteration\",\n    max_t=100,\n    reduction_factor=4,\n    stop_last_trials=False,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config_space = CS.ConfigurationSpace()\nconfig_space.add_hyperparameter(\n    CS.Constant(\"steps\", 100)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"width\", lower=0, upper=20)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"height\", lower=-100, upper=100)\n)\nconfig_space.add_hyperparameter(\n    CS.CategoricalHyperparameter(\n        \"activation\", choices=[\"relu\", \"tanh\"]\n    )\n)\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu\n\n\n\n\n\n\n# As we are passing config space directly to the searcher,\n# we need to define metric and mode in it as well, in addition\n# to Tuner()\nalgo = TuneBOHB(\n    space=config_space,\n    metric=\"mean_loss\",\n    mode=\"max\",\n)\nalgo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\nscheduler = HyperBandForBOHB(\n    time_attr=\"training_iteration\",\n    max_t=100,\n    reduction_factor=4,\n    stop_last_trials=False,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config_space = CS.ConfigurationSpace()\nconfig_space.add_hyperparameter(\n    CS.Constant(\"steps\", 100)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"width\", lower=0, upper=20)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"height\", lower=-100, upper=100)\n)\nconfig_space.add_hyperparameter(\n    CS.CategoricalHyperparameter(\n        \"activation\", choices=[\"relu\", \"tanh\"]\n    )\n)\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu\n\n\n\n\n\n\n# As we are passing config space directly to the searcher,\n# we need to define metric and mode in it as well, in addition\n# to Tuner()\nalgo = TuneBOHB(\n    space=config_space,\n    metric=\"mean_loss\",\n    mode=\"max\",\n)\nalgo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\nscheduler = HyperBandForBOHB(\n    time_attr=\"training_iteration\",\n    max_t=100,\n    reduction_factor=4,\n    stop_last_trials=False,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config_space = CS.ConfigurationSpace()\nconfig_space.add_hyperparameter(\n    CS.Constant(\"steps\", 100)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"width\", lower=0, upper=20)\n)\nconfig_space.add_hyperparameter(\n    CS.UniformFloatHyperparameter(\"height\", lower=-100, upper=100)\n)\nconfig_space.add_hyperparameter(\n    CS.CategoricalHyperparameter(\n        \"activation\", choices=[\"relu\", \"tanh\"]\n    )\n)\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu\n\n\n\n\n\n\n# As we are passing config space directly to the searcher,\n# we need to define metric and mode in it as well, in addition\n# to Tuner()\nalgo = TuneBOHB(\n    space=config_space,\n    metric=\"mean_loss\",\n    mode=\"max\",\n)\nalgo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\nscheduler = HyperBandForBOHB(\n    time_attr=\"training_iteration\",\n    max_t=100,\n    reduction_factor=4,\n    stop_last_trials=False,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45401) 2022-07-22 15:11:27,287\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp_2/objective_2397442c_1_activation=tanh,height=32.8422,steps=100,width=12.1847_2022-07-22_15-11-11/checkpoint_tmp2e0d09\n(objective pid=45401) 2022-07-22 15:11:27,287\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 0.535153865814209, '_episodes_total': 0}\n\n\n\n\nHere again are the hyperparameters found to minimize the mean loss of the\ndefined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'activation': 'tanh', 'height': -48.451797714080236, 'steps': 100, 'width': 10.119125894538891}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Step 3: Optionally, configure the resources allocated per trial. Tune uses this resources allocation to control the parallelism. For example, if each trial was configured to use 4 CPUs, and the cluster had only 32 CPUs, then Tune will limit the number of concurrent trials to 8 to avoid overloading the cluster. For more information, see A Guide To Parallelism and Resources for Ray Tune.\n# Can customize resources per trial, here we set 1 CPU each.\ntrain_model = tune.with_resources(train_model, {\"cpu\": 1})\n\n\nStep 4: Run the trial with Tune. Tune will report on experiment status, and after the experiment finishes, you can inspect the results. Tune can retry failed trials automatically, as well as entire experiments; see How to Define Stopping Criteria for a Ray Tune Experiment.\n# Start a Tune run and print the best result.\ntuner = tune.Tuner(train_model, param_space=trial_space)\nresults = tuner.fit()\n\n# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nImportant\nThis user guide shows how to configure fault tolerance for the revamped Ray Train V2\navailable starting from Ray 2.43 by enabling the environment variable RAY_TRAIN_V2_ENABLED=1.\nThis user guide assumes that the environment variable has been enabled.\nPlease see here for information about the deprecation and migration.\n\nRay Train provides fault tolerance at three levels:\n\nWorker process fault tolerance handles errors that happen to one or more Train worker processes while they are executing the user defined training function.\nWorker node fault tolerance handles node failures that may occur during training.\nJob driver fault tolerance handles the case where Ray Train driver process crashes, and training needs to be kicked off again, possibly from a new cluster.\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.\n\n# Tries to recover a run up to this many times.\nfailure_config = ray.train.FailureConfig(max_failures=2)\n\n# No limit on the number of retries.\nfailure_config = ray.train.FailureConfig(max_failures=-1)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Progress\n\n\nTrial name                date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n2022-11-02 16:03:13,913\tINFO tune.py:788 -- Total run time: 28.53 seconds (27.28 seconds for the tuning loop).\n\n\n\n\n\nTune Status\n\n\nCurrent time:2022-11-02 16:03:22\nRunning for: 00:00:08.49        \nMemory:      9.9/16.0 GiB       \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n2022-11-02 16:03:13,913\tINFO tune.py:788 -- Total run time: 28.53 seconds (27.28 seconds for the tuning loop).\n\n\n\n\n\nTune Status\n\n\nCurrent time:2022-11-02 16:03:22\nRunning for: 00:00:08.49        \nMemory:      9.9/16.0 GiB       \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Progress\n\n\nTrial name                date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n2022-11-02 16:03:13,913\tINFO tune.py:788 -- Total run time: 28.53 seconds (27.28 seconds for the tuning loop).\n\n\n\n\n\nTune Status\n\n\nCurrent time:2022-11-02 16:03:22\nRunning for: 00:00:08.49        \nMemory:      9.9/16.0 GiB       \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n2022-11-02 16:03:13,913\tINFO tune.py:788 -- Total run time: 28.53 seconds (27.28 seconds for the tuning loop).\n\n\n\n\n\nTune Status\n\n\nCurrent time:2022-11-02 16:03:22\nRunning for: 00:00:08.49        \nMemory:      9.9/16.0 GiB       \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Wandb\u2019s group, run_id and run_name are automatically selected\nby Tune, but can be overwritten by filling out the respective configuration\nvalues.\nPlease see here for all other valid configuration settings:\nhttps://docs.wandb.ai/library/init\nPublicAPI (alpha): This API is in alpha and may change before becoming stable.\n\n\n\nsetup_wandb#\n\nParameters:\n\nconfig \u2013 Configuration dict to be logged to Weights and Biases. Can contain\narguments for wandb.init() as well as authentication information.\napi_key \u2013 API key to use for authentication with Weights and Biases.\napi_key_file \u2013 File pointing to API key for with Weights and Biases.\nrank_zero_only \u2013 If True, will return an initialized session only for the\nrank 0 worker in distributed training. If False, will initialize a\nsession for all workers.\nkwargs \u2013 Passed to wandb.init().\n\n\n\nExample\nfrom ray.air.integrations.wandb import setup_wandb\n\ndef training_loop(config):\n    wandb = setup_wandb(config)\n    # ...\n    wandb.log({\"loss\": 0.123})\n\n\nPublicAPI (alpha): This API is in alpha and may change before becoming stable.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.rllib.core.rl_module.multi_rl_module.MultiRLModule#\n\n\n__init__\nInitializes a MultiRLModule instance.\n\nadd_module\nAdds a module at run time to the multi-agent module.\n\nas_multi_rl_module\nReturns self in order to match RLModule.as_multi_rl_module() behavior.\n\nforeach_module\nCalls the given function with each (module_id, module).\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.\n\nfrom_checkpoint\nCreates a new Checkpointable instance from the given location and returns it.\n\nget\nReturns the module with the given module ID or default if not found in self.': cannot unpack non-iterable NoneType object\nError in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\nRay Data handles many of the same batch processing workloads as Apache Spark and Daft, but with a streaming paradigm that is better suited for GPU workloads for deep learning inference.\nHowever, Ray Data doesn\u2019t have a SQL interface unlike Spark and Daft.\nFor a more detailed performance comparison between Ray Data and Apache Spark, see Offline Batch Inference: Comparing Ray, Apache Spark, and SageMaker.\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader': cannot unpack non-iterable NoneType object\nError in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\nRay Data handles many of the same batch processing workloads as Apache Spark and Daft, but with a streaming paradigm that is better suited for GPU workloads for deep learning inference.\nHowever, Ray Data doesn\u2019t have a SQL interface unlike Spark and Daft.\nFor a more detailed performance comparison between Ray Data and Apache Spark, see Offline Batch Inference: Comparing Ray, Apache Spark, and SageMaker.\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset': cannot unpack non-iterable NoneType object\nError in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\nRay Data handles many of the same batch processing workloads as Apache Spark and Daft, but with a streaming paradigm that is better suited for GPU workloads for deep learning inference.\nHowever, Ray Data doesn\u2019t have a SQL interface unlike Spark and Daft.\nFor a more detailed performance comparison between Ray Data and Apache Spark, see Offline Batch Inference: Comparing Ray, Apache Spark, and SageMaker.\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm': cannot unpack non-iterable NoneType object\nError in finding 'How does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm\n\n\n\n\n\nSupported data types: Petastorm only supports Parquet data, while Ray Data supports many file formats.\nLower overhead: Datasets is lower overhead: it supports zero-copy exchange between processes, in contrast to the multi-processing-based pipelines used by Petastorm.\nNo data processing: Petastorm does not expose any data processing APIs.\n\n\n\n\nNVTabular': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\nError in finding 'results = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.\n\n\nXGBoost Hyperparameters#\nEven with the default settings, XGBoost was able to get to a good accuracy on the\nbreast cancer dataset. However, as in many machine learning algorithms, there are\nmany knobs to tune which might lead to even better performance. Let\u2019s explore some of\nthem below.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\nError in finding 'results = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.\n\n\nXGBoost Hyperparameters#\nEven with the default settings, XGBoost was able to get to a good accuracy on the\nbreast cancer dataset. However, as in many machine learning algorithms, there are\nmany knobs to tune which might lead to even better performance. Let\u2019s explore some of\nthem below.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config = {\n    \"objective\": \"binary:logistic\",\n    \"eval_metric\": [\"logloss\", \"error\"],\n    \"max_depth\": 2,\n    \"min_child_weight\": 0,\n    \"subsample\": 0.8,\n    \"eta\": 0.2,\n}\nresults = train_breast_cancer(config)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\nError in finding 'results = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.\n\n\nXGBoost Hyperparameters#\nEven with the default settings, XGBoost was able to get to a good accuracy on the\nbreast cancer dataset. However, as in many machine learning algorithms, there are\nmany knobs to tune which might lead to even better performance. Let\u2019s explore some of\nthem below.': cannot unpack non-iterable NoneType object\nError in finding 'config = {\n    \"objective\": \"binary:logistic\",\n    \"eval_metric\": [\"logloss\", \"error\"],\n    \"max_depth\": 2,\n    \"min_child_weight\": 0,\n    \"subsample\": 0.8,\n    \"eta\": 0.2,\n}\nresults = train_breast_cancer(config)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'results = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.\n\n\nXGBoost Hyperparameters#\nEven with the default settings, XGBoost was able to get to a good accuracy on the\nbreast cancer dataset. However, as in many machine learning algorithms, there are\nmany knobs to tune which might lead to even better performance. Let\u2019s explore some of\nthem below.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config = {\n    \"objective\": \"binary:logistic\",\n    \"eval_metric\": [\"logloss\", \"error\"],\n    \"max_depth\": 2,\n    \"min_child_weight\": 0,\n    \"subsample\": 0.8,\n    \"eta\": 0.2,\n}\nresults = train_breast_cancer(config)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).\n\n\n\n\n\nAs you can see, the changes in the actual training function are minimal. Instead of\nreturning the accuracy value, we report it back to Tune using session.report().\nOur config dictionary only changed slightly. Instead of passing hard-coded\nparameters, we tell Tune to choose values from a range of valid options. There are\na number of options we have here, all of which are explained in\nthe Tune docs.\nFor a brief explanation, this is what they do:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'results = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.\n\n\nXGBoost Hyperparameters#\nEven with the default settings, XGBoost was able to get to a good accuracy on the\nbreast cancer dataset. However, as in many machine learning algorithms, there are\nmany knobs to tune which might lead to even better performance. Let\u2019s explore some of\nthem below.': cannot unpack non-iterable NoneType object\nError in finding 'config = {\n    \"objective\": \"binary:logistic\",\n    \"eval_metric\": [\"logloss\", \"error\"],\n    \"max_depth\": 2,\n    \"min_child_weight\": 0,\n    \"subsample\": 0.8,\n    \"eta\": 0.2,\n}\nresults = train_breast_cancer(config)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding '2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).\n\n\n\n\n\nAs you can see, the changes in the actual training function are minimal. Instead of\nreturning the accuracy value, we report it back to Tune using session.report().\nOur config dictionary only changed slightly. Instead of passing hard-coded\nparameters, we tell Tune to choose values from a range of valid options. There are\na number of options we have here, all of which are explained in\nthe Tune docs.\nFor a brief explanation, this is what they do:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'tune.randint(min, max) chooses a random integer value between min and max.\nNote that max is exclusive, so it will not be sampled.\ntune.choice([a, b, c]) chooses one of the items of the list at random. Each item\nhas the same chance to be sampled.\ntune.uniform(min, max) samples a floating point number between min and max.\nNote that max is exclusive here, too.\ntune.loguniform(min, max, base=10) samples a floating point number between min and max,\nbut applies a logarithmic transformation to these boundaries first. Thus, this makes\nit easy to sample values from different orders of magnitude.\n\n\nThe best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'results = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.\n\n\nXGBoost Hyperparameters#\nEven with the default settings, XGBoost was able to get to a good accuracy on the\nbreast cancer dataset. However, as in many machine learning algorithms, there are\nmany knobs to tune which might lead to even better performance. Let\u2019s explore some of\nthem below.': cannot unpack non-iterable NoneType object\nError in finding 'config = {\n    \"objective\": \"binary:logistic\",\n    \"eval_metric\": [\"logloss\", \"error\"],\n    \"max_depth\": 2,\n    \"min_child_weight\": 0,\n    \"subsample\": 0.8,\n    \"eta\": 0.2,\n}\nresults = train_breast_cancer(config)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).\n\n\n\n\n\nAs you can see, the changes in the actual training function are minimal. Instead of\nreturning the accuracy value, we report it back to Tune using session.report().\nOur config dictionary only changed slightly. Instead of passing hard-coded\nparameters, we tell Tune to choose values from a range of valid options. There are\na number of options we have here, all of which are explained in\nthe Tune docs.\nFor a brief explanation, this is what they do:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'tune.randint(min, max) chooses a random integer value between min and max.\nNote that max is exclusive, so it will not be sampled.\ntune.choice([a, b, c]) chooses one of the items of the list at random. Each item\nhas the same chance to be sampled.\ntune.uniform(min, max) samples a floating point number between min and max.\nNote that max is exclusive here, too.\ntune.loguniform(min, max, base=10) samples a floating point number between min and max,\nbut applies a logarithmic transformation to these boundaries first. Thus, this makes\nit easy to sample values from different orders of magnitude.\n\n\nThe best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?': cannot unpack non-iterable NoneType object\nError in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'results = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.\n\n\nXGBoost Hyperparameters#\nEven with the default settings, XGBoost was able to get to a good accuracy on the\nbreast cancer dataset. However, as in many machine learning algorithms, there are\nmany knobs to tune which might lead to even better performance. Let\u2019s explore some of\nthem below.': cannot unpack non-iterable NoneType object\nError in finding 'config = {\n    \"objective\": \"binary:logistic\",\n    \"eval_metric\": [\"logloss\", \"error\"],\n    \"max_depth\": 2,\n    \"min_child_weight\": 0,\n    \"subsample\": 0.8,\n    \"eta\": 0.2,\n}\nresults = train_breast_cancer(config)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).\n\n\n\n\n\nAs you can see, the changes in the actual training function are minimal. Instead of\nreturning the accuracy value, we report it back to Tune using session.report().\nOur config dictionary only changed slightly. Instead of passing hard-coded\nparameters, we tell Tune to choose values from a range of valid options. There are\na number of options we have here, all of which are explained in\nthe Tune docs.\nFor a brief explanation, this is what they do:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'tune.randint(min, max) chooses a random integer value between min and max.\nNote that max is exclusive, so it will not be sampled.\ntune.choice([a, b, c]) chooses one of the items of the list at random. Each item\nhas the same chance to be sampled.\ntune.uniform(min, max) samples a floating point number between min and max.\nNote that max is exclusive here, too.\ntune.loguniform(min, max, base=10) samples a floating point number between min and max,\nbut applies a logarithmic transformation to these boundaries first. Thus, this makes\nit easy to sample values from different orders of magnitude.\n\n\nThe best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\nfrom ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A single decision tree (left) might be able to get to an accuracy of 70%\nfor a binary classification task. By combining the output of several small\ndecision trees, an ensemble learner (right) might end up with a higher accuracy\nof 90%.#\n\n\nTraining a simple XGBoost classifier#\nLet\u2019s first see how a simple XGBoost classifier can be trained. We\u2019ll use the\nbreast_cancer-Dataset included in the sklearn dataset collection. This is\na binary classification dataset. Given 30 different input features, our task is to\nlearn to identify subjects with breast cancer and those without.\nHere is the full code to train a simple XGBoost model:\n\n\nSMOKE_TEST = False\n\n\n\n\n\n\n\nShow code cell content\nHide code cell content\n\n\nSMOKE_TEST = True': cannot unpack non-iterable NoneType object\nError in finding 'results = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.\n\n\nXGBoost Hyperparameters#\nEven with the default settings, XGBoost was able to get to a good accuracy on the\nbreast cancer dataset. However, as in many machine learning algorithms, there are\nmany knobs to tune which might lead to even better performance. Let\u2019s explore some of\nthem below.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'config = {\n    \"objective\": \"binary:logistic\",\n    \"eval_metric\": [\"logloss\", \"error\"],\n    \"max_depth\": 2,\n    \"min_child_weight\": 0,\n    \"subsample\": 0.8,\n    \"eta\": 0.2,\n}\nresults = train_breast_cancer(config)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")\n\n\n\n\nAccuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name                     status    loc                    eta  max_depth  min_child_weight  subsample     acc  iter  total time (s)\n\n\n\n\n\n2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-11 16:13:34,649\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-31' in 0.0057s.\n2025-02-11 16:13:34,652\tINFO tune.py:1041 -- Total run time: 1.88 seconds (1.86 seconds for the tuning loop).\n\n\n\n\n\nAs you can see, the changes in the actual training function are minimal. Instead of\nreturning the accuracy value, we report it back to Tune using session.report().\nOur config dictionary only changed slightly. Instead of passing hard-coded\nparameters, we tell Tune to choose values from a range of valid options. There are\na number of options we have here, all of which are explained in\nthe Tune docs.\nFor a brief explanation, this is what they do:': cannot unpack non-iterable NoneType object\nError in finding 'tune.randint(min, max) chooses a random integer value between min and max.\nNote that max is exclusive, so it will not be sampled.\ntune.choice([a, b, c]) chooses one of the items of the list at random. Each item\nhas the same chance to be sampled.\ntune.uniform(min, max) samples a floating point number between min and max.\nNote that max is exclusive here, too.\ntune.loguniform(min, max, base=10) samples a floating point number between min and max,\nbut applies a logarithmic transformation to these boundaries first. Thus, this makes\nit easy to sample values from different orders of magnitude.\n\n\nThe best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\nfrom ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback': cannot unpack non-iterable NoneType object\nError in finding '2025-02-11 16:13:35,717\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_breast_cancer_2025-02-11_16-13-34' in 0.0018s.\n2025-02-11 16:13:35,719\tINFO tune.py:1041 -- Total run time: 1.05 seconds (1.04 seconds for the tuning loop).\n\n\nBest model parameters: {'objective': 'binary:logistic', 'eval_metric': ['logloss', 'error'], 'max_depth': 5, 'min_child_weight': 1, 'subsample': 0.675899175238225, 'eta': 0.0008304750981897656}\nBest model total accuracy: 0.6573\n\n\n\n\n\n\n Best model parameters: {'objective': 'binary:logistic', 'eval_metric': ['logloss', 'error'], 'max_depth': 7, 'min_child_weight': 2, 'subsample': 0.5015513240240503, 'eta': 0.024272050872920895}\n Best model total accuracy: 0.9301': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\nIn synchronous PBT, we wait until all trials reach the next perturbation_interval to decide which trials should continue and which trials should pause and start from the checkpoint of another trials. In the case of 2 trials, this means that every perturbation_interval will result in the worse performing trial exploiting the better performing trial.\nThis is not always the case in asynchronous PBT, since trials report results and decide whether to continue or exploit one by one. This means that a trial could decide that it is a top-performer and decide to continue, since other trials haven\u2019t had the chance to report their better results yet. Therefore, we do not always see trials exploiting on every perturbation_interval.\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\nIn synchronous PBT, we wait until all trials reach the next perturbation_interval to decide which trials should continue and which trials should pause and start from the checkpoint of another trials. In the case of 2 trials, this means that every perturbation_interval will result in the worse performing trial exploiting the better performing trial.\nThis is not always the case in asynchronous PBT, since trials report results and decide whether to continue or exploit one by one. This means that a trial could decide that it is a top-performer and decide to continue, since other trials haven\u2019t had the chance to report their better results yet. Therefore, we do not always see trials exploiting on every perturbation_interval.\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:07,944\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_func_2025-02-24_16-21-28' in 0.0049s.\n2025-02-24 16:22:07,946\tINFO tune.py:1041 -- Total run time: 39.88 seconds (39.86 seconds for the tuning loop).\n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\nplot_parameter_history(\n    pbt_results,\n    colors,\n    labels,\n    perturbation_interval=perturbation_interval,\n    fig=fig,\n    ax=axs[0],\n)\nplot_Q_history(pbt_results, colors, labels, ax=axs[1])': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\nIn synchronous PBT, we wait until all trials reach the next perturbation_interval to decide which trials should continue and which trials should pause and start from the checkpoint of another trials. In the case of 2 trials, this means that every perturbation_interval will result in the worse performing trial exploiting the better performing trial.\nThis is not always the case in asynchronous PBT, since trials report results and decide whether to continue or exploit one by one. This means that a trial could decide that it is a top-performer and decide to continue, since other trials haven\u2019t had the chance to report their better results yet. Therefore, we do not always see trials exploiting on every perturbation_interval.\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:07,944\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_func_2025-02-24_16-21-28' in 0.0049s.\n2025-02-24 16:22:07,946\tINFO tune.py:1041 -- Total run time: 39.88 seconds (39.86 seconds for the tuning loop).\n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\nplot_parameter_history(\n    pbt_results,\n    colors,\n    labels,\n    perturbation_interval=perturbation_interval,\n    fig=fig,\n    ax=axs[0],\n)\nplot_Q_history(pbt_results, colors, labels, ax=axs[1])': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name            status    loc              h0   lr  iter  total time (s)       Q     theta0   theta1\n\n\ntrain_func_91d06_00000TERMINATED127.0.0.1:23610   00.015   100       0.068691 0.5906680.9        0.0427973\ntrain_func_91d06_00001TERMINATED127.0.0.1:23609   10.045   100       0.06599690.3899990.0008300930.9      \n\n\n\n\n\n\n\n\n\nAs we can see, neither trial makes it to the optimum, since the search configs are stuck with their original values. This illustrates a key advantage of PBT: while traditional hyperparameter search methods (like grid search) keep fixed search values throughout training, PBT can adapt the search dynamically, allowing it to find better solutions with the same computational budget.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\nIn synchronous PBT, we wait until all trials reach the next perturbation_interval to decide which trials should continue and which trials should pause and start from the checkpoint of another trials. In the case of 2 trials, this means that every perturbation_interval will result in the worse performing trial exploiting the better performing trial.\nThis is not always the case in asynchronous PBT, since trials report results and decide whether to continue or exploit one by one. This means that a trial could decide that it is a top-performer and decide to continue, since other trials haven\u2019t had the chance to report their better results yet. Therefore, we do not always see trials exploiting on every perturbation_interval.\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:07,944\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_func_2025-02-24_16-21-28' in 0.0049s.\n2025-02-24 16:22:07,946\tINFO tune.py:1041 -- Total run time: 39.88 seconds (39.86 seconds for the tuning loop).\n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\nplot_parameter_history(\n    pbt_results,\n    colors,\n    labels,\n    perturbation_interval=perturbation_interval,\n    fig=fig,\n    ax=axs[0],\n)\nplot_Q_history(pbt_results, colors, labels, ax=axs[1])': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name            status    loc              h0   lr  iter  total time (s)       Q     theta0   theta1\n\n\ntrain_func_91d06_00000TERMINATED127.0.0.1:23610   00.015   100       0.068691 0.5906680.9        0.0427973\ntrain_func_91d06_00001TERMINATED127.0.0.1:23609   10.045   100       0.06599690.3899990.0008300930.9      \n\n\n\n\n\n\n\n\n\nAs we can see, neither trial makes it to the optimum, since the search configs are stuck with their original values. This illustrates a key advantage of PBT: while traditional hyperparameter search methods (like grid search) keep fixed search values throughout training, PBT can adapt the search dynamically, allowing it to find better solutions with the same computational budget.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Increase PBT population size#\nOne last experiment: what does it look like if we increase the PBT population size? Now, low-performing trials will sample one of the multiple high-performing trials to exploit, and it should result in some more interesting behavior.\nWith a larger population:\n\nThere\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:23:40\nRunning for: 00:01:18.96        \nMemory:      21.3/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\nIn synchronous PBT, we wait until all trials reach the next perturbation_interval to decide which trials should continue and which trials should pause and start from the checkpoint of another trials. In the case of 2 trials, this means that every perturbation_interval will result in the worse performing trial exploiting the better performing trial.\nThis is not always the case in asynchronous PBT, since trials report results and decide whether to continue or exploit one by one. This means that a trial could decide that it is a top-performer and decide to continue, since other trials haven\u2019t had the chance to report their better results yet. Therefore, we do not always see trials exploiting on every perturbation_interval.\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:07,944\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_func_2025-02-24_16-21-28' in 0.0049s.\n2025-02-24 16:22:07,946\tINFO tune.py:1041 -- Total run time: 39.88 seconds (39.86 seconds for the tuning loop).\n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\nplot_parameter_history(\n    pbt_results,\n    colors,\n    labels,\n    perturbation_interval=perturbation_interval,\n    fig=fig,\n    ax=axs[0],\n)\nplot_Q_history(pbt_results, colors, labels, ax=axs[1])': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name            status    loc              h0   lr  iter  total time (s)       Q     theta0   theta1\n\n\ntrain_func_91d06_00000TERMINATED127.0.0.1:23610   00.015   100       0.068691 0.5906680.9        0.0427973\ntrain_func_91d06_00001TERMINATED127.0.0.1:23609   10.045   100       0.06599690.3899990.0008300930.9      \n\n\n\n\n\n\n\n\n\nAs we can see, neither trial makes it to the optimum, since the search configs are stuck with their original values. This illustrates a key advantage of PBT: while traditional hyperparameter search methods (like grid search) keep fixed search values throughout training, PBT can adapt the search dynamically, allowing it to find better solutions with the same computational budget.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Increase PBT population size#\nOne last experiment: what does it look like if we increase the PBT population size? Now, low-performing trials will sample one of the multiple high-performing trials to exploit, and it should result in some more interesting behavior.\nWith a larger population:\n\nThere\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:23:40\nRunning for: 00:01:18.96        \nMemory:      21.3/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\nIn synchronous PBT, we wait until all trials reach the next perturbation_interval to decide which trials should continue and which trials should pause and start from the checkpoint of another trials. In the case of 2 trials, this means that every perturbation_interval will result in the worse performing trial exploiting the better performing trial.\nThis is not always the case in asynchronous PBT, since trials report results and decide whether to continue or exploit one by one. This means that a trial could decide that it is a top-performer and decide to continue, since other trials haven\u2019t had the chance to report their better results yet. Therefore, we do not always see trials exploiting on every perturbation_interval.\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:07,944\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_func_2025-02-24_16-21-28' in 0.0049s.\n2025-02-24 16:22:07,946\tINFO tune.py:1041 -- Total run time: 39.88 seconds (39.86 seconds for the tuning loop).\n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\nplot_parameter_history(\n    pbt_results,\n    colors,\n    labels,\n    perturbation_interval=perturbation_interval,\n    fig=fig,\n    ax=axs[0],\n)\nplot_Q_history(pbt_results, colors, labels, ax=axs[1])': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name            status    loc              h0   lr  iter  total time (s)       Q     theta0   theta1\n\n\ntrain_func_91d06_00000TERMINATED127.0.0.1:23610   00.015   100       0.068691 0.5906680.9        0.0427973\ntrain_func_91d06_00001TERMINATED127.0.0.1:23609   10.045   100       0.06599690.3899990.0008300930.9      \n\n\n\n\n\n\n\n\n\nAs we can see, neither trial makes it to the optimum, since the search configs are stuck with their original values. This illustrates a key advantage of PBT: while traditional hyperparameter search methods (like grid search) keep fixed search values throughout training, PBT can adapt the search dynamically, allowing it to find better solutions with the same computational budget.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Increase PBT population size#\nOne last experiment: what does it look like if we increase the PBT population size? Now, low-performing trials will sample one of the multiple high-performing trials to exploit, and it should result in some more interesting behavior.\nWith a larger population:\n\nThere\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:23:40\nRunning for: 00:01:18.96        \nMemory:      21.3/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,343\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00002 (score = -0.022182)\n\n2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.092 --- (resample) --> 0.0385\nh0 : 0.21859874791501244 --- (* 1.2) --> 0.2623184974980149\nh1 : 0.14995290392498006 --- (* 0.8) --> 0.11996232313998406\n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00003 (score = 0.239975)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\nIn synchronous PBT, we wait until all trials reach the next perturbation_interval to decide which trials should continue and which trials should pause and start from the checkpoint of another trials. In the case of 2 trials, this means that every perturbation_interval will result in the worse performing trial exploiting the better performing trial.\nThis is not always the case in asynchronous PBT, since trials report results and decide whether to continue or exploit one by one. This means that a trial could decide that it is a top-performer and decide to continue, since other trials haven\u2019t had the chance to report their better results yet. Therefore, we do not always see trials exploiting on every perturbation_interval.\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:07,944\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_func_2025-02-24_16-21-28' in 0.0049s.\n2025-02-24 16:22:07,946\tINFO tune.py:1041 -- Total run time: 39.88 seconds (39.86 seconds for the tuning loop).\n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\nplot_parameter_history(\n    pbt_results,\n    colors,\n    labels,\n    perturbation_interval=perturbation_interval,\n    fig=fig,\n    ax=axs[0],\n)\nplot_Q_history(pbt_results, colors, labels, ax=axs[1])': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name            status    loc              h0   lr  iter  total time (s)       Q     theta0   theta1\n\n\ntrain_func_91d06_00000TERMINATED127.0.0.1:23610   00.015   100       0.068691 0.5906680.9        0.0427973\ntrain_func_91d06_00001TERMINATED127.0.0.1:23609   10.045   100       0.06599690.3899990.0008300930.9      \n\n\n\n\n\n\n\n\n\nAs we can see, neither trial makes it to the optimum, since the search configs are stuck with their original values. This illustrates a key advantage of PBT: while traditional hyperparameter search methods (like grid search) keep fixed search values throughout training, PBT can adapt the search dynamically, allowing it to find better solutions with the same computational budget.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Increase PBT population size#\nOne last experiment: what does it look like if we increase the PBT population size? Now, low-performing trials will sample one of the multiple high-performing trials to exploit, and it should result in some more interesting behavior.\nWith a larger population:\n\nThere\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:23:40\nRunning for: 00:01:18.96        \nMemory:      21.3/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,343\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00002 (score = -0.022182)\n\n2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.092 --- (resample) --> 0.0385\nh0 : 0.21859874791501244 --- (* 1.2) --> 0.2623184974980149\nh1 : 0.14995290392498006 --- (* 0.8) --> 0.11996232313998406\n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00003 (score = 0.239975)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00003 (score = 0.239975)\n\n2025-02-24 16:22:25,541\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00003:\nlr : 0.092 --- (* 1.2) --> 0.1104\nh0 : 0.21859874791501244 --- (resample) --> 0.12144956368659676\nh1 : 0.14995290392498006 --- (* 1.2) --> 0.17994348470997606\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.506889) into trial 942f2_00000 (score = 0.399434)\n\n2025-02-24 16:22:28,678\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\nIn synchronous PBT, we wait until all trials reach the next perturbation_interval to decide which trials should continue and which trials should pause and start from the checkpoint of another trials. In the case of 2 trials, this means that every perturbation_interval will result in the worse performing trial exploiting the better performing trial.\nThis is not always the case in asynchronous PBT, since trials report results and decide whether to continue or exploit one by one. This means that a trial could decide that it is a top-performer and decide to continue, since other trials haven\u2019t had the chance to report their better results yet. Therefore, we do not always see trials exploiting on every perturbation_interval.\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:07,944\tINFO tune.py:1009 -- Wrote the latest version of all result files and experiment state to '/Users/rdecal/ray_results/train_func_2025-02-24_16-21-28' in 0.0049s.\n2025-02-24 16:22:07,946\tINFO tune.py:1041 -- Total run time: 39.88 seconds (39.86 seconds for the tuning loop).\n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\nplot_parameter_history(\n    pbt_results,\n    colors,\n    labels,\n    perturbation_interval=perturbation_interval,\n    fig=fig,\n    ax=axs[0],\n)\nplot_Q_history(pbt_results, colors, labels, ax=axs[1])': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name            status    loc              h0   lr  iter  total time (s)       Q     theta0   theta1\n\n\ntrain_func_91d06_00000TERMINATED127.0.0.1:23610   00.015   100       0.068691 0.5906680.9        0.0427973\ntrain_func_91d06_00001TERMINATED127.0.0.1:23609   10.045   100       0.06599690.3899990.0008300930.9      \n\n\n\n\n\n\n\n\n\nAs we can see, neither trial makes it to the optimum, since the search configs are stuck with their original values. This illustrates a key advantage of PBT: while traditional hyperparameter search methods (like grid search) keep fixed search values throughout training, PBT can adapt the search dynamically, allowing it to find better solutions with the same computational budget.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Increase PBT population size#\nOne last experiment: what does it look like if we increase the PBT population size? Now, low-performing trials will sample one of the multiple high-performing trials to exploit, and it should result in some more interesting behavior.\nWith a larger population:\n\nThere\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:23:40\nRunning for: 00:01:18.96        \nMemory:      21.3/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,343\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00002 (score = -0.022182)\n\n2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.092 --- (resample) --> 0.0385\nh0 : 0.21859874791501244 --- (* 1.2) --> 0.2623184974980149\nh1 : 0.14995290392498006 --- (* 0.8) --> 0.11996232313998406\n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00003 (score = 0.239975)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00003 (score = 0.239975)\n\n2025-02-24 16:22:25,541\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00003:\nlr : 0.092 --- (* 1.2) --> 0.1104\nh0 : 0.21859874791501244 --- (resample) --> 0.12144956368659676\nh1 : 0.14995290392498006 --- (* 1.2) --> 0.17994348470997606\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.506889) into trial 942f2_00000 (score = 0.399434)\n\n2025-02-24 16:22:28,678\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:878 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00003 (score = 0.505573) into trial 942f2_00002 (score = 0.406418)\n\n2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.1104 --- (resample) --> 0.025500000000000002\nh0 : 0.12144956368659676 --- (* 1.2) --> 0.1457394764239161\nh1 : 0.17994348470997606 --- (resample) --> 0.8083066244826129\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)\n\n2025-02-24 16:22:31,848\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\nError in finding 'You might need to adjust some fields in the RayJob description YAML file so that it can run in your environment:\n\n# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml': cannot unpack non-iterable NoneType object\nError in finding 'You might need to adjust some fields in the RayJob description YAML file so that it can run in your environment:\n\n# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml': cannot unpack non-iterable NoneType object\nError in finding '# Check training logs.\nkubectl logs -f rayjob-pytorch-mnist-nxmj2\n\n# Training completed after 10 iterations at 2024-06-16 22:33:06. Total running time: 7min 10s\n\n# Training result: Result(\n#   metrics={'loss': 0.35476621258825347, 'accuracy': 0.8748},\n#   path='/home/ray/ray_results/TorchTrainer_2024-06-16_22-25-55/TorchTrainer_122aa_00000_0_2024-06-16_22-25-55',\n#   filesystem='local',\n#   checkpoint=None\n# )\n# ...\n\n\n\n\nClean up#\nDelete your RayJob with the following command:\nkubectl delete -f ray-job.pytorch-mnist.yaml': cannot unpack non-iterable NoneType object\nError in finding 'AlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.\n\nThe following examples demonstrate this on RLlib\u2019s PPO (\u201cProximal Policy Optimization\u201d) algorithm:\n\n\n\nManage Algorithm instance directly\nfrom ray.rllib.algorithms.ppo import PPOConfig\n\n# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n# Build the Algorithm.\nalgo = config.build()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'AlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.\n\nThe following examples demonstrate this on RLlib\u2019s PPO (\u201cProximal Policy Optimization\u201d) algorithm:\n\n\n\nManage Algorithm instance directly\nfrom ray.rllib.algorithms.ppo import PPOConfig\n\n# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n# Build the Algorithm.\nalgo = config.build()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'GCS fault tolerance in KubeRay#\nGlobal Control Service (GCS) manages cluster-level metadata.\nBy default, the GCS lacks fault tolerance as it stores all data in-memory, and a failure can cause the entire Ray cluster to fail.\nTo make the GCS fault tolerant, you must have a high-availability Redis.\nThis way, in the event of a GCS restart, it retrieves all the data from the Redis instance and resumes its regular functions.\n\n\nSee also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#': cannot unpack non-iterable NoneType object\nError in finding 'GCS fault tolerance in KubeRay#\nGlobal Control Service (GCS) manages cluster-level metadata.\nBy default, the GCS lacks fault tolerance as it stores all data in-memory, and a failure can cause the entire Ray cluster to fail.\nTo make the GCS fault tolerant, you must have a high-availability Redis.\nThis way, in the event of a GCS restart, it retrieves all the data from the Redis instance and resumes its regular functions.\n\n\nSee also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Step 6.2: Check the head Pod's environment variable `RAY_external_storage_namespace`.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 6.3: Log into the Redis Pod.\n# The password `5241590000000000` is defined in the `redis-config` ConfigMap.\n# Step 6.4: Check the keys in Redis.\n# Note: the schema changed in Ray 2.38.0. Previously we use a single HASH table,\n# now we use multiple HASH tables with a common prefix.\nexport REDIS_POD=$(kubectl get pods --selector=app=redis -o custom-columns=POD:metadata.name --no-headers)\nkubectl exec -i $REDIS_POD -- env REDISCLI_AUTH=\"5241590000000000\" redis-cli KEYS '*'': cannot unpack non-iterable NoneType object\nError in finding 'GCS fault tolerance in KubeRay#\nGlobal Control Service (GCS) manages cluster-level metadata.\nBy default, the GCS lacks fault tolerance as it stores all data in-memory, and a failure can cause the entire Ray cluster to fail.\nTo make the GCS fault tolerant, you must have a high-availability Redis.\nThis way, in the event of a GCS restart, it retrieves all the data from the Redis instance and resumes its regular functions.\n\n\nSee also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Step 6.2: Check the head Pod's environment variable `RAY_external_storage_namespace`.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 6.3: Log into the Redis Pod.\n# The password `5241590000000000` is defined in the `redis-config` ConfigMap.\n# Step 6.4: Check the keys in Redis.\n# Note: the schema changed in Ray 2.38.0. Previously we use a single HASH table,\n# now we use multiple HASH tables with a common prefix.\nexport REDIS_POD=$(kubectl get pods --selector=app=redis -o custom-columns=POD:metadata.name --no-headers)\nkubectl exec -i $REDIS_POD -- env REDISCLI_AUTH=\"5241590000000000\" redis-cli KEYS '*'': cannot unpack non-iterable NoneType object\nError in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'GCS fault tolerance in KubeRay#\nGlobal Control Service (GCS) manages cluster-level metadata.\nBy default, the GCS lacks fault tolerance as it stores all data in-memory, and a failure can cause the entire Ray cluster to fail.\nTo make the GCS fault tolerant, you must have a high-availability Redis.\nThis way, in the event of a GCS restart, it retrieves all the data from the Redis instance and resumes its regular functions.\n\n\nSee also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#': cannot unpack non-iterable NoneType object\nError in finding '# Step 6.2: Check the head Pod's environment variable `RAY_external_storage_namespace`.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 6.3: Log into the Redis Pod.\n# The password `5241590000000000` is defined in the `redis-config` ConfigMap.\n# Step 6.4: Check the keys in Redis.\n# Note: the schema changed in Ray 2.38.0. Previously we use a single HASH table,\n# now we use multiple HASH tables with a common prefix.\nexport REDIS_POD=$(kubectl get pods --selector=app=redis -o custom-columns=POD:metadata.name --no-headers)\nkubectl exec -i $REDIS_POD -- env REDISCLI_AUTH=\"5241590000000000\" redis-cli KEYS '*'': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server\n\n\n\n\n\n\n# Step 7.3: The head Pod fails and restarts after `RAY_gcs_rpc_server_reconnect_timeout_s` (60) seconds.\n# In addition, the worker Pod isn't terminated by the new head after reconnecting because GCS fault\n# tolerance is enabled.\nkubectl get pods -l=ray.io/is-ray-node=yes': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote(resources={\"NPU\": 1})\ndef npu_task():\n    print(\"NPU IDs: {}\".format(ray.get_runtime_context().get_accelerator_ids()[\"NPU\"]))\n    print(\"ASCEND_RT_VISIBLE_DEVICES: {}\".format(os.environ[\"ASCEND_RT_VISIBLE_DEVICES\"]))\n\nnpu_actor = NPUActor.remote()\nray.get(npu_actor.ping.remote())\n# The actor uses the first NPU so the task uses the second one.\nray.get(npu_task.remote())\n\n\n(NPUActor pid=52420) NPU IDs: [0]\n(NPUActor pid=52420) ASCEND_RT_VISIBLE_DEVICES: 0\n(npu_task pid=51830) NPU IDs: [1]\n(npu_task pid=51830) ASCEND_RT_VISIBLE_DEVICES: 1\n\n\n\n    # Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Physical Resources and Logical Resources#\nPhysical resources are resources that a machine physically has such as physical CPUs and GPUs\nand logical resources are virtual resources defined by a system.\nRay resources are logical and don\u2019t need to have 1-to-1 mapping with physical resources.\nFor example, you can start a Ray head node with 0 logical CPUs via ray start --head --num-cpus=0\neven if it physically has eight\n(This signals the Ray scheduler to not schedule any tasks or actors that require logical CPU resources\non the head node, mainly to reserve the head node for running Ray system processes.).\nThey are mainly used for admission control during scheduling.\nThe fact that resources are logical has several implications:\n\n\n\nPhysical resources vs logical resources#': cannot unpack non-iterable NoneType object\nError in finding 'Physical Resources and Logical Resources#\nPhysical resources are resources that a machine physically has such as physical CPUs and GPUs\nand logical resources are virtual resources defined by a system.\nRay resources are logical and don\u2019t need to have 1-to-1 mapping with physical resources.\nFor example, you can start a Ray head node with 0 logical CPUs via ray start --head --num-cpus=0\neven if it physically has eight\n(This signals the Ray scheduler to not schedule any tasks or actors that require logical CPU resources\non the head node, mainly to reserve the head node for running Ray system processes.).\nThey are mainly used for admission control during scheduling.\nThe fact that resources are logical has several implications:\n\n\n\nPhysical resources vs logical resources#': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nIf you are using KubeRay to start a Ray cluster, you can set the rayStartParams field in the yaml file:\nheadGroupSpec:\n  rayStartParams:\n    num-cpus: \"3\"\n    num-gpus: \"4\"\n    resources: '\"{\\\"special_hardware\\\": 1, \\\"custom_label\\\": 1}\"'\n\n\n\n\n\n\n\nPython\n# Specify the default resource requirements for this remote function.\n@ray.remote(num_cpus=2, num_gpus=2, resources={\"special_hardware\": 1})\ndef func():\n    return 1\n\n\n# You can override the default resource requirements.\nfunc.options(num_cpus=3, num_gpus=1, resources={\"special_hardware\": 0}).remote()\n\n\n@ray.remote(num_cpus=0, num_gpus=1)\nclass Actor:\n    pass\n\n\n# You can override the default resource requirements for actors as well.\nactor = Actor.options(num_cpus=1, num_gpus=0).remote()': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.restore_from_path#\n\n\nNote that the self.METADATA_FILE_NAME file is not required to restore the state.\n\nParameters:\n\npath \u2013 The path to load the implementing class\u2019 state from or to load the\nstate of only one subcomponent\u2019s state of the implementing class (if\ncomponent is provided).\ncomponent \u2013 If provided, path is interpreted as the checkpoint path of only\nthe subcomponent and thus, only that subcomponent\u2019s state is\nrestored/loaded. All other state of self remains unchanged in this\ncase.\nfilesystem \u2013 PyArrow FileSystem to use to access data at the path. If not\nspecified, this is inferred from the URI scheme of path.\n**kwargs \u2013 Forward compatibility kwargs.': cannot unpack non-iterable NoneType object\nError in finding 'RAY_DASHBOARD_ADDRESS - The KubeRay operator injects this environment variable to the submitter Pod. The value is $HEAD_SERVICE:$DASHBOARD_PORT.\nRAY_JOB_SUBMISSION_ID - The KubeRay operator injects this environment variable to the submitter Pod. The value is the RayJob.Status.JobId of the RayJob.\nExample: ray job submit --address=http://$RAY_DASHBOARD_ADDRESS --submission-id=$RAY_JOB_SUBMISSION_ID ...\nSee ray-job.sample.yaml for more details.\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.\n\nbackoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers\n\nsuspend (Optional): If suspend is true, KubeRay deletes both the RayCluster and the submitter. Note that Kueue also implements scheduling strategies by mutating this field. Avoid manually updating this field if you use Kueue to schedule RayJob.\ndeletionPolicy (Optional, alpha in v1.3.0): Indicates what resources of the RayJob are deleted upon job completion. Valid values are DeleteCluster, DeleteWorkers, DeleteSelf or DeleteNone. If unset, deletion policy is based on spec.shutdownAfterJobFinishes. This field requires the RayJobDeletionPolicy feature gate to be enabled.': cannot unpack non-iterable NoneType object\nError in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\nRay and its AI libraries provide unified compute runtime for teams looking to simplify their ML platform.\nRay\u2019s libraries such as Ray Train, Ray Data, and Ray Serve can be used to compose end-to-end ML workflows, providing features and APIs for\ndata preprocessing as part of training, and transitioning from training to serving.\n\n\nExample ML Platforms built on Ray#\nMerlin is Shopify\u2019s ML platform built on Ray. It enables fast-iteration and scaling of distributed applications such as product categorization and recommendations.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Note\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.\n\n\n\nDisabling the Dashboard#\nDashboard is included if you use ray[default] or other installation commands and automatically started.\nTo disable Dashboard, use the following arguments --include-dashboard.\n\n\n\nSingle-node local cluster\nStart the cluster explicitly with CLI \nray start --include-dashboard=False': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See this example of how to run policy inference after training\nand this example of how to run policy inference with an LSTM.\n\nHint\nBecause your RLModule is also a\nPyTorch Module,\nyou can easily export your model to ONNX, IREE,\nor other deployment-friendly formats.\n\n\n\n\n\nContinue training\nWhen using RLlib directly, meaning without Ray Tune, the problem of loading a state\ninto a running instance is straightforward:\n# Recreate the preceding PPO from the config.\nnew_ppo = config.build()\n\n# Load the state stored previously in `checkpoint_dir` into the\n# running algorithm instance.\nnew_ppo.restore_from_path(checkpoint_dir)\n\n# Run another training iteration.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the details of Trainables here\nand have a look at our examples.\nNext, let\u2019s have a closer look at what the config dictionary is that you pass into your trainables.\n\n\n\n\nTune Trials#\nYou use Tuner.fit to execute and manage hyperparameter tuning and generate your trials.\nAt a minimum, your Tuner call takes in a trainable as first argument, and a param_space dictionary\nto define the search space.\nThe Tuner.fit() function also provides many features such as logging,\ncheckpointing, and early stopping.\nIn the example, minimizing a (x ** 2) + b, a simple Tune run with a simplistic search space for a and b\nlooks like this:\n# Pass in a Trainable class or function, along with a search space \"config\".\ntuner = tune.Tuner(trainable, param_space={\"a\": 2, \"b\": 4})\ntuner.fit()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Learn more about the details of Trainables here\nand have a look at our examples.\nNext, let\u2019s have a closer look at what the config dictionary is that you pass into your trainables.\n\n\n\n\nTune Trials#\nYou use Tuner.fit to execute and manage hyperparameter tuning and generate your trials.\nAt a minimum, your Tuner call takes in a trainable as first argument, and a param_space dictionary\nto define the search space.\nThe Tuner.fit() function also provides many features such as logging,\ncheckpointing, and early stopping.\nIn the example, minimizing a (x ** 2) + b, a simple Tune run with a simplistic search space for a and b\nlooks like this:\n# Pass in a Trainable class or function, along with a search space \"config\".\ntuner = tune.Tuner(trainable, param_space={\"a\": 2, \"b\": 4})\ntuner.fit()': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the details of Trainables here\nand have a look at our examples.\nNext, let\u2019s have a closer look at what the config dictionary is that you pass into your trainables.\n\n\n\n\nTune Trials#\nYou use Tuner.fit to execute and manage hyperparameter tuning and generate your trials.\nAt a minimum, your Tuner call takes in a trainable as first argument, and a param_space dictionary\nto define the search space.\nThe Tuner.fit() function also provides many features such as logging,\ncheckpointing, and early stopping.\nIn the example, minimizing a (x ** 2) + b, a simple Tune run with a simplistic search space for a and b\nlooks like this:\n# Pass in a Trainable class or function, along with a search space \"config\".\ntuner = tune.Tuner(trainable, param_space={\"a\": 2, \"b\": 4})\ntuner.fit()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Repeated Evaluations (tune.search.Repeater): Support for running each sampled hyperparameter with multiple random seeds.\nConcurrencyLimiter (tune.search.ConcurrencyLimiter): Limits the amount of concurrent trials when running optimization.\nShim Instantiation (tune.create_searcher): Allows creation of the search algorithm object given a string.\n\n\nNote that in the example above we  tell Tune to stop after 20 training iterations.\nThis way of stopping trials with explicit rules is useful, but in many cases we can do even better with\nschedulers.\n\n# Create HyperBand scheduler and minimize the score\nhyperband = HyperBandScheduler(metric=\"score\", mode=\"max\")\n\nconfig = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 1)}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note that in the example above we  tell Tune to stop after 20 training iterations.\nThis way of stopping trials with explicit rules is useful, but in many cases we can do even better with\nschedulers.\n\n# Create HyperBand scheduler and minimize the score\nhyperband = HyperBandScheduler(metric=\"score\", mode=\"max\")\n\nconfig = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 1)}\n\ntuner = tune.Tuner(\n    trainable,\n    tune_config=tune.TuneConfig(\n        num_samples=20,\n        scheduler=hyperband,\n    ),\n    param_space=config,\n)\ntuner.fit()\n\n\nTune includes distributed implementations of early stopping algorithms such as\nMedian Stopping Rule, HyperBand,\nand ASHA.\nTune also includes a distributed implementation of Population Based Training (PBT)\nand Population Based Bandits (PB2).': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)   loss\n\n\ntrain_function_5bf98_00000TERMINATED127.0.0.1:48140     10.405758    30       2.11758  1.02341\ntrain_function_5bf98_00001TERMINATED127.0.0.1:48147     20.647335    30       0.07707311.53993\ntrain_function_5bf98_00002TERMINATED127.0.0.1:48151     30.256568    30       0.07284313.0393 \n\n\n2022-07-22 15:41:31,290\tINFO tune.py:738 -- Total run time: 7.36 seconds (6.72 seconds for the tuning loop).\n\n\n{'mean': 1, 'sd': 0.40575843135279466}\n\n\n\n\n\n\nTune Comet Logger#\nRay Tune offers an integration with Comet through the CometLoggerCallback,\nwhich automatically logs metrics and parameters reported to Tune to the Comet UI.\nClick on the following dropdown to see this callback API in detail:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)   loss\n\n\ntrain_function_5bf98_00000TERMINATED127.0.0.1:48140     10.405758    30       2.11758  1.02341\ntrain_function_5bf98_00001TERMINATED127.0.0.1:48147     20.647335    30       0.07707311.53993\ntrain_function_5bf98_00002TERMINATED127.0.0.1:48151     30.256568    30       0.07284313.0393 \n\n\n2022-07-22 15:41:31,290\tINFO tune.py:738 -- Total run time: 7.36 seconds (6.72 seconds for the tuning loop).\n\n\n{'mean': 1, 'sd': 0.40575843135279466}\n\n\n\n\n\n\nTune Comet Logger#\nRay Tune offers an integration with Comet through the CometLoggerCallback,\nwhich automatically logs metrics and parameters reported to Tune to the Comet UI.\nClick on the following dropdown to see this callback API in detail:\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding '{'mean': 1, 'sd': 0.40575843135279466}\n\n\n\n\n\n\nTune Comet Logger#\nRay Tune offers an integration with Comet through the CometLoggerCallback,\nwhich automatically logs metrics and parameters reported to Tune to the Comet UI.\nClick on the following dropdown to see this callback API in detail:\n\nParameters:\n\nonline \u2013 Whether to make use of an Online or\nOffline Experiment. Defaults to True.\ntags \u2013 Tags to add to the logged Experiment.\nDefaults to None.\nsave_checkpoints \u2013 If True, model checkpoints will be saved to\nComet ML as artifacts. Defaults to False.\n**experiment_kwargs \u2013 Other keyword arguments will be passed to the\nconstructor for comet_ml.Experiment (or OfflineExperiment if\nonline=False).': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation    height  steps    width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp_2/objective_2397442c_1_activation=tanh,height=32.8422,steps=100,width=12.1847_2022-07-22_15-11-11/checkpoint_tmpf4b290\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 0.10108494758605957, '_episodes_total': 0}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation    height  steps    width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp_2/objective_2397442c_1_activation=tanh,height=32.8422,steps=100,width=12.1847_2022-07-22_15-11-11/checkpoint_tmpf4b290\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 0.10108494758605957, '_episodes_total': 0}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation    height  steps    width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp_2/objective_2397442c_1_activation=tanh,height=32.8422,steps=100,width=12.1847_2022-07-22_15-11-11/checkpoint_tmpf4b290\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 0.10108494758605957, '_episodes_total': 0}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation    height  steps    width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp_2/objective_2397442c_1_activation=tanh,height=32.8422,steps=100,width=12.1847_2022-07-22_15-11-11/checkpoint_tmpf4b290\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 0.10108494758605957, '_episodes_total': 0}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation    height  steps    width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp_2/objective_2397442c_1_activation=tanh,height=32.8422,steps=100,width=12.1847_2022-07-22_15-11-11/checkpoint_tmpf4b290\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 0.10108494758605957, '_episodes_total': 0}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS\n\n\n\n\n\nLet\u2019s start by defining a simple evaluation function.\nWe artificially sleep for a bit (0.1 seconds) to simulate a long-running ML experiment.\nThis setup assumes that we\u2019re running multiple steps of an experiment and try to tune\ntwo hyperparameters, namely width and height, and activation.\n\n\ndef evaluate(step, width, height, activation):\n    time.sleep(0.1)\n    activation_boost = 10 if activation==\"relu\" else 1\n    return (0.1 + width * step / 100) ** (-1) + height * 0.1 + activation_boost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp/objective_a0c11456_7_activation=tanh,height=-57.9777,steps=100,width=3.7250_2022-07-22_15-07-31/checkpoint_tmp3f09eb\n(objective pid=45117) 2022-07-22 15:07:43,765\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 2.273958206176758, '_episodes_total': 0}\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation    height  steps    width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp_2/objective_2397442c_1_activation=tanh,height=32.8422,steps=100,width=12.1847_2022-07-22_15-11-11/checkpoint_tmpf4b290\n(objective pid=45370) 2022-07-22 15:11:20,826\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 0.10108494758605957, '_episodes_total': 0}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(objective pid=45401) 2022-07-22 15:11:27,287\tINFO trainable.py:655 -- Restored on 127.0.0.1 from checkpoint: /Users/kai/ray_results/bohb_exp_2/objective_2397442c_1_activation=tanh,height=32.8422,steps=100,width=12.1847_2022-07-22_15-11-11/checkpoint_tmp2e0d09\n(objective pid=45401) 2022-07-22 15:11:27,287\tINFO trainable.py:663 -- Current state after restoring: {'_iteration': 0, '_timesteps_total': 0, '_time_total': 0.535153865814209, '_episodes_total': 0}\n\n\n\n\nHere again are the hyperparameters found to minimize the mean loss of the\ndefined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)\n\n\n\n\nBest hyperparameters found were:  {'activation': 'tanh', 'height': -48.451797714080236, 'steps': 100, 'width': 10.119125894538891}': cannot unpack non-iterable NoneType object\nError in finding 'Getting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time\n\n@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))\n\n\n\n\nNote\nFor a normal Python generator, a generator function is paused and resumed when next function is\ncalled on a generator. Ray eagerly executes a generator task to completion regardless of whether the caller is polling the partial results or not.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Getting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time\n\n@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))\n\n\n\n\nNote\nFor a normal Python generator, a generator function is paused and resumed when next function is\ncalled on a generator. Ray eagerly executes a generator task to completion regardless of whether the caller is polling the partial results or not.': cannot unpack non-iterable NoneType object\nError in finding 'Fault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;\n\nTask fault tolerance features: max_retries, retry_exceptions\nActor fault tolerance features: max_restarts, max_task_retries\nObject fault tolerance features: object reconstruction\n\n\n\nCancellation#\nThe ray.cancel() function works with both Ray generator tasks and actor tasks.\nSemantic-wise, cancelling a generator task isn\u2019t different from cancelling a regular task.\nWhen you cancel a task, next(gen) can return the reference that contains TaskCancelledError without any special ordering guarantee.\n\n@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(1)\n        yield i\n\n\nasync def async_task():\n    async for ref in task.remote():\n        print(await ref)': cannot unpack non-iterable NoneType object\nError in finding 'Step 4: Run the trial with Tune. Tune will report on experiment status, and after the experiment finishes, you can inspect the results. Tune can retry failed trials automatically, as well as entire experiments; see How to Define Stopping Criteria for a Ray Tune Experiment.\n# Start a Tune run and print the best result.\ntuner = tune.Tuner(train_model, param_space=trial_space)\nresults = tuner.fit()\n\n# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding 'Step 4: Run the trial with Tune. Tune will report on experiment status, and after the experiment finishes, you can inspect the results. Tune can retry failed trials automatically, as well as entire experiments; see How to Define Stopping Criteria for a Ray Tune Experiment.\n# Start a Tune run and print the best result.\ntuner = tune.Tuner(train_model, param_space=trial_space)\nresults = tuner.fit()\n\n# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding '# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).\n\n\n\n\nHow does Tune compare  to using Ray Core (ray.remote)?#\nYou might be wondering how Tune differs from simply using Tasks for parallel trial execution. Indeed, the above example could be re-written similarly as:\nremote_train = ray.remote(train_model)\nfutures = [remote_train.remote({\"model_id\": i}) for i in range(NUM_MODELS)]\nprint(\"Submitting tasks...\")\nresults = ray.get(futures)\nprint(\"Trial results\", results)\n\n\nCompared to using Ray tasks, Tune offers the following additional functionality:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Worker process fault tolerance handles errors that happen to one or more Train worker processes while they are executing the user defined training function.\nWorker node fault tolerance handles node failures that may occur during training.\nJob driver fault tolerance handles the case where Ray Train driver process crashes, and training needs to be kicked off again, possibly from a new cluster.\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.\n\n# Tries to recover a run up to this many times.\nfailure_config = ray.train.FailureConfig(max_failures=2)\n\n# No limit on the number of retries.\nfailure_config = ray.train.FailureConfig(max_failures=-1)': cannot unpack non-iterable NoneType object\nError in finding 'This user guide covers how to configure and use these fault tolerance mechanisms.\n\n# Tries to recover a run up to this many times.\nfailure_config = ray.train.FailureConfig(max_failures=2)\n\n# No limit on the number of retries.\nfailure_config = ray.train.FailureConfig(max_failures=-1)\n\n\nAltogether, this is what an example Torch training script with worker fault tolerance looks like:\nimport tempfile\nimport uuid\n\nimport ray.train\nimport ray.train.torch\n\n\ndef train_fn_per_worker(train_loop_config: dict):\n    # [1] Train worker restoration logic.\n    checkpoint = ray.train.get_checkpoint()\n    if checkpoint:\n        with checkpoint.as_directory() as temp_checkpoint_dir:\n            # model.load_state_dict(torch.load(...))\n            ...': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Progress\n\n\nTrial name                date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n2022-11-02 16:03:13,913\tINFO tune.py:788 -- Total run time: 28.53 seconds (27.28 seconds for the tuning loop).\n\n\n\n\n\nTune Status\n\n\nCurrent time:2022-11-02 16:03:22\nRunning for: 00:00:08.49        \nMemory:      9.9/16.0 GiB       \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n2022-11-02 16:03:13,913\tINFO tune.py:788 -- Total run time: 28.53 seconds (27.28 seconds for the tuning loop).\n\n\n\n\n\nTune Status\n\n\nCurrent time:2022-11-02 16:03:22\nRunning for: 00:00:08.49        \nMemory:      9.9/16.0 GiB       \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n2022-11-02 16:03:13,913\tINFO tune.py:788 -- Total run time: 28.53 seconds (27.28 seconds for the tuning loop).\n\n\n\n\n\nTune Status\n\n\nCurrent time:2022-11-02 16:03:22\nRunning for: 00:00:08.49        \nMemory:      9.9/16.0 GiB       \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Progress\n\n\nTrial name                date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n2022-11-02 16:03:13,913\tINFO tune.py:788 -- Total run time: 28.53 seconds (27.28 seconds for the tuning loop).\n\n\n\n\n\nTune Status\n\n\nCurrent time:2022-11-02 16:03:22\nRunning for: 00:00:08.49        \nMemory:      9.9/16.0 GiB       \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Wandb\u2019s group, run_id and run_name are automatically selected\nby Tune, but can be overwritten by filling out the respective configuration\nvalues.\nPlease see here for all other valid configuration settings:\nhttps://docs.wandb.ai/library/init\nPublicAPI (alpha): This API is in alpha and may change before becoming stable.\n\n\n\nsetup_wandb#\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'setup_wandb#\n\nParameters:\n\nconfig \u2013 Configuration dict to be logged to Weights and Biases. Can contain\narguments for wandb.init() as well as authentication information.\napi_key \u2013 API key to use for authentication with Weights and Biases.\napi_key_file \u2013 File pointing to API key for with Weights and Biases.\nrank_zero_only \u2013 If True, will return an initialized session only for the\nrank 0 worker in distributed training. If False, will initialize a\nsession for all workers.\nkwargs \u2013 Passed to wandb.init().\n\n\n\nExample\nfrom ray.air.integrations.wandb import setup_wandb\n\ndef training_loop(config):\n    wandb = setup_wandb(config)\n    # ...\n    wandb.log({\"loss\": 0.123})\n\n\nPublicAPI (alpha): This API is in alpha and may change before becoming stable.': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve\n\n\n# 1: Define a Ray Serve application.\n@serve.deployment\nclass MyModelDeployment:\n    def __init__(self, msg: str):\n        # Initialize model state: could be very large neural net weights.\n        self._msg = msg\n\n    def __call__(self, request: Request) -> Dict:\n        return {\"result\": self._msg}\n\n\napp = MyModelDeployment.bind(msg=\"Hello world!\")\n\n# 2: Deploy the application locally.\nserve.run(app, route_prefix=\"/\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve\n\n\n# 1: Define a Ray Serve application.\n@serve.deployment\nclass MyModelDeployment:\n    def __init__(self, msg: str):\n        # Initialize model state: could be very large neural net weights.\n        self._msg = msg\n\n    def __call__(self, request: Request) -> Dict:\n        return {\"result\": self._msg}\n\n\napp = MyModelDeployment.bind(msg=\"Hello world!\")\n\n# 2: Deploy the application locally.\nserve.run(app, route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\nMachine learning models are compute-intensive and therefore can be very expensive to operate.\nA key requirement for any ML serving system is being able to dynamically scale up and down and allocate the right resources for each model to handle the request load while saving cost.\nServe offers a number of built-in primitives to help make your ML serving application efficient.\nIt supports dynamically scaling the resources for a model up and down by adjusting the number of replicas, batching requests to take advantage of efficient vectorized operations (especially important on GPUs), and a flexible resource allocation model that enables you to serve many models on limited hardware resources.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve\n\n\n# 1: Define a Ray Serve application.\n@serve.deployment\nclass MyModelDeployment:\n    def __init__(self, msg: str):\n        # Initialize model state: could be very large neural net weights.\n        self._msg = msg\n\n    def __call__(self, request: Request) -> Dict:\n        return {\"result\": self._msg}\n\n\napp = MyModelDeployment.bind(msg=\"Hello world!\")\n\n# 2: Deploy the application locally.\nserve.run(app, route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\nMachine learning models are compute-intensive and therefore can be very expensive to operate.\nA key requirement for any ML serving system is being able to dynamically scale up and down and allocate the right resources for each model to handle the request load while saving cost.\nServe offers a number of built-in primitives to help make your ML serving application efficient.\nIt supports dynamically scaling the resources for a model up and down by adjusting the number of replicas, batching requests to take advantage of efficient vectorized operations (especially important on GPUs), and a flexible resource allocation model that enables you to serve many models on limited hardware resources.': cannot unpack non-iterable NoneType object\nError in finding 'ML platform engineer\n\n\n\n\nServe specializes in scalable and reliable ML model serving. As such, it can be an important plug-and-play component of your ML platform stack.\nServe supports arbitrary Python code and therefore integrates well with the MLOps ecosystem. You can use it with model optimizers (ONNX, TVM), model monitoring systems (Seldon Alibi, Arize), model registries (MLFlow, Weights and Biases), machine learning frameworks (XGBoost, Scikit-learn), data app UIs (Gradio, Streamlit), and Web API frameworks (FastAPI, gRPC).\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime': cannot unpack non-iterable NoneType object\nError in finding 'LLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\nRay Serve is framework-agnostic, so you can use it alongside any other Python framework or library.\nWe believe data scientists should not be bound to a particular machine learning framework.\nThey should be empowered to use the best tool available for the job.\nCompared to these framework-specific solutions, Ray Serve doesn\u2019t perform any model-specific optimizations to make your ML model run faster. However, you can still optimize the models yourself\nand run them in Ray Serve. For example, you can run a model compiled by\nPyTorch JIT or ONNXRuntime.\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'What can I work on?#\nWe use Github to track issues, feature requests, and bugs. Take a look at the\nones labeled \u201cgood first issue\u201d for a place to start.\n\n\nSetting up your development environment#\nTo edit the Ray source code, fork the repository, clone it, and build Ray from source. Follow these instructions for building a local copy of Ray to easily make changes.\n\n\nSubmitting and Merging a Contribution#\nThere are a couple steps to merge a contribution.\n\nFirst merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#\n\nWhen you first create a PR, add an reviewer to the assignee section.\nAssignees will review your PR and add the @author-action-required label if further actions are required.\nAddress their comments and remove the @author-action-required label from the PR.\nRepeat this process until assignees approve your PR.\nOnce the PR is approved, the author is in charge of ensuring the PR passes the build. Add the test-ok label if the build succeeds.\nCommitters will merge the PR once the build is passing.': cannot unpack non-iterable NoneType object\nError in finding 'What can I work on?#\nWe use Github to track issues, feature requests, and bugs. Take a look at the\nones labeled \u201cgood first issue\u201d for a place to start.\n\n\nSetting up your development environment#\nTo edit the Ray source code, fork the repository, clone it, and build Ray from source. Follow these instructions for building a local copy of Ray to easily make changes.\n\n\nSubmitting and Merging a Contribution#\nThere are a couple steps to merge a contribution.\n\nFirst merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#\n\nWhen you first create a PR, add an reviewer to the assignee section.\nAssignees will review your PR and add the @author-action-required label if further actions are required.\nAddress their comments and remove the @author-action-required label from the PR.\nRepeat this process until assignees approve your PR.\nOnce the PR is approved, the author is in charge of ensuring the PR passes the build. Add the test-ok label if the build succeeds.\nCommitters will merge the PR once the build is passing.': cannot unpack non-iterable NoneType object\nError in finding 'Bazel test command:\nbazel test --build_tests_only //:all\n\n\n\n\n\nRay serving test commands:\npytest python/ray/serve/tests\npython python/ray/serve/examples/echo_full.py\n\n\n\n\n\nIf a CI build exception doesn\u2019t appear to be related to your change,\nplease visit this link to\ncheck recent tests known to be flaky.\n\n\nFor callback APIs, consider adding a **kwargs placeholder as a \u201cforward compatibility placeholder\u201d in case more args need to be passed to the callback in the future, e.g.:\ndef tune_user_callback(model, score, **future_kwargs):\n    pass': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'If a CI build exception doesn\u2019t appear to be related to your change,\nplease visit this link to\ncheck recent tests known to be flaky.\n\n\nFor callback APIs, consider adding a **kwargs placeholder as a \u201cforward compatibility placeholder\u201d in case more args need to be passed to the callback in the future, e.g.:\ndef tune_user_callback(model, score, **future_kwargs):\n    pass\n\n\n\n\nCommunity Examples#\nWe\u2019re always looking for new example contributions! When contributing an example for a Ray library,\ninclude a link to your example in the examples.yml file for that library:\n- title: Serve a Java App\n  skill_level: advanced\n  link: tutorials/java\n  contributor: community': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.rllib.core.rl_module.multi_rl_module.MultiRLModule#\n\n\n__init__\nInitializes a MultiRLModule instance.\n\nadd_module\nAdds a module at run time to the multi-agent module.\n\nas_multi_rl_module\nReturns self in order to match RLModule.as_multi_rl_module() behavior.\n\nforeach_module\nCalls the given function with each (module_id, module).': cannot unpack non-iterable NoneType object\nError in finding 'RLModule\nBase class for RLlib modules.\n\nRLModule.observation_space\n\n\nRLModule.action_space\n\n\nRLModule.inference_only\n\n\nRLModule.model_config\n\n\nRLModule.setup\nSets up the components of the module.\n\nRLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule\nBase class for RLlib modules.\n\nRLModule.observation_space\n\n\nRLModule.action_space\n\n\nRLModule.inference_only\n\n\nRLModule.model_config\n\n\nRLModule.setup\nSets up the components of the module.\n\nRLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule\nBase class for RLlib modules.\n\nRLModule.observation_space\n\n\nRLModule.action_space\n\n\nRLModule.inference_only\n\n\nRLModule.model_config\n\n\nRLModule.setup\nSets up the components of the module.\n\nRLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.': cannot unpack non-iterable NoneType object\nError in finding 'get_state\nReturns the state dict of the module.\n\nset_state\nSets the state of the multi-agent module.\n\n\n\n\n\n\nAdditional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):\n\n    def setup(self):\n        self._policy_head = [some NN component]\n        self._value_function_head = [some NN component]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule\nBase class for RLlib modules.\n\nRLModule.observation_space\n\n\nRLModule.action_space\n\n\nRLModule.inference_only\n\n\nRLModule.model_config\n\n\nRLModule.setup\nSets up the components of the module.\n\nRLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.': cannot unpack non-iterable NoneType object\nError in finding 'get_state\nReturns the state dict of the module.\n\nset_state\nSets the state of the multi-agent module.\n\n\n\n\n\n\nAdditional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):\n\n    def setup(self):\n        self._policy_head = [some NN component]\n        self._value_function_head = [some NN component]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule\nBase class for RLlib modules.\n\nRLModule.observation_space\n\n\nRLModule.action_space\n\n\nRLModule.inference_only\n\n\nRLModule.model_config\n\n\nRLModule.setup\nSets up the components of the module.\n\nRLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.': cannot unpack non-iterable NoneType object\nError in finding 'get_state\nReturns the state dict of the module.\n\nset_state\nSets the state of the multi-agent module.\n\n\n\n\n\n\nAdditional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):\n\n    def setup(self):\n        self._policy_head = [some NN component]\n        self._value_function_head = [some NN component]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nA dict containing the support of the discrete distribution for\neither Q-values or advantages (in case of a dueling architecture),\n(\u201catoms\u201d), the logits per action and atom and the probabilities\nof the discrete distribution (per action and atom of the support).\n\n\n\n\n\n\nSelfSupervisedLossAPI#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\nlearner \u2013 The Learner calling this loss method on the RLModule.\nmodule_id \u2013 The ID of the RLModule (within a MultiRLModule).\nconfig \u2013 The AlgorithmConfig specific to the given module_id.\nbatch \u2013 The sample batch for this particular RLModule.\nfwd_out \u2013 The output of the forward pass for this particular RLModule.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule\nBase class for RLlib modules.\n\nRLModule.observation_space\n\n\nRLModule.action_space\n\n\nRLModule.inference_only\n\n\nRLModule.model_config\n\n\nRLModule.setup\nSets up the components of the module.\n\nRLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.': cannot unpack non-iterable NoneType object\nError in finding 'get_state\nReturns the state dict of the module.\n\nset_state\nSets the state of the multi-agent module.\n\n\n\n\n\n\nAdditional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):\n\n    def setup(self):\n        self._policy_head = [some NN component]\n        self._value_function_head = [some NN component]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nA dict containing the support of the discrete distribution for\neither Q-values or advantages (in case of a dueling architecture),\n(\u201catoms\u201d), the logits per action and atom and the probabilities\nof the discrete distribution (per action and atom of the support).\n\n\n\n\n\n\nSelfSupervisedLossAPI#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\nlearner \u2013 The Learner calling this loss method on the RLModule.\nmodule_id \u2013 The ID of the RLModule (within a MultiRLModule).\nconfig \u2013 The AlgorithmConfig specific to the given module_id.\nbatch \u2013 The sample batch for this particular RLModule.\nfwd_out \u2013 The output of the forward pass for this particular RLModule.\n\n\n\n\n\n\nTargetNetworkAPI#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule\nBase class for RLlib modules.\n\nRLModule.observation_space\n\n\nRLModule.action_space\n\n\nRLModule.inference_only\n\n\nRLModule.model_config\n\n\nRLModule.setup\nSets up the components of the module.\n\nRLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.': cannot unpack non-iterable NoneType object\nError in finding 'get_state\nReturns the state dict of the module.\n\nset_state\nSets the state of the multi-agent module.\n\n\n\n\n\n\nAdditional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):\n\n    def setup(self):\n        self._policy_head = [some NN component]\n        self._value_function_head = [some NN component]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nA dict containing the support of the discrete distribution for\neither Q-values or advantages (in case of a dueling architecture),\n(\u201catoms\u201d), the logits per action and atom and the probabilities\nof the discrete distribution (per action and atom of the support).\n\n\n\n\n\n\nSelfSupervisedLossAPI#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\nlearner \u2013 The Learner calling this loss method on the RLModule.\nmodule_id \u2013 The ID of the RLModule (within a MultiRLModule).\nconfig \u2013 The AlgorithmConfig specific to the given module_id.\nbatch \u2013 The sample batch for this particular RLModule.\nfwd_out \u2013 The output of the forward pass for this particular RLModule.\n\n\n\n\n\n\nTargetNetworkAPI#': cannot unpack non-iterable NoneType object\nError in finding 'TargetNetworkAPI#\n\n\nabstract make_target_networks() \u2192 None[source]#\nCreates the required target nets for this RLModule.\nUse the convenience ray.rllib.core.learner.utils.make_target_network() utility\nwhen implementing this method. Pass in an already existing, corresponding \u201cmain\u201d\nnet (for which you need a target net).\nThis function already takes care of initialization (from the \u201cmain\u201d net).': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule\nBase class for RLlib modules.\n\nRLModule.observation_space\n\n\nRLModule.action_space\n\n\nRLModule.inference_only\n\n\nRLModule.model_config\n\n\nRLModule.setup\nSets up the components of the module.\n\nRLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.\n\nforward_inference\nDO NOT OVERRIDE! Forward-pass during evaluation, called from the sampler.\n\nforward_train\nDO NOT OVERRIDE! Forward-pass during training called from the learner.': cannot unpack non-iterable NoneType object\nError in finding 'get_state\nReturns the state dict of the module.\n\nset_state\nSets the state of the multi-agent module.\n\n\n\n\n\n\nAdditional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):\n\n    def setup(self):\n        self._policy_head = [some NN component]\n        self._value_function_head = [some NN component]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nA dict containing the support of the discrete distribution for\neither Q-values or advantages (in case of a dueling architecture),\n(\u201catoms\u201d), the logits per action and atom and the probabilities\nof the discrete distribution (per action and atom of the support).\n\n\n\n\n\n\nSelfSupervisedLossAPI#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\nlearner \u2013 The Learner calling this loss method on the RLModule.\nmodule_id \u2013 The ID of the RLModule (within a MultiRLModule).\nconfig \u2013 The AlgorithmConfig specific to the given module_id.\nbatch \u2013 The sample batch for this particular RLModule.\nfwd_out \u2013 The output of the forward pass for this particular RLModule.\n\n\n\n\n\n\nTargetNetworkAPI#': cannot unpack non-iterable NoneType object\nError in finding 'TargetNetworkAPI#\n\n\nabstract make_target_networks() \u2192 None[source]#\nCreates the required target nets for this RLModule.\nUse the convenience ray.rllib.core.learner.utils.make_target_network() utility\nwhen implementing this method. Pass in an already existing, corresponding \u201cmain\u201d\nnet (for which you need a target net).\nThis function already takes care of initialization (from the \u201cmain\u201d net).': cannot unpack non-iterable NoneType object\nError in finding 'Add the netrc file to your VM container\u2019s home directory, so Ray can access the runtime_env\u2019s private remote URIs, even when they don\u2019t contain credentials.\n\n\n5. Apply your KubeRay config.\nYour KubeRay application can use the netrc file to access private remote URIs, even when they don\u2019t contain credentials.': cannot unpack non-iterable NoneType object\nError in finding 'How to disable it#\nThere are multiple ways to disable usage stats collection before starting a cluster:\n\nCurrently there is no way to enable or disable collection for a running cluster; you have to stop and restart the cluster.': cannot unpack non-iterable NoneType object\nError in finding 'How to disable it#\nThere are multiple ways to disable usage stats collection before starting a cluster:\n\nCurrently there is no way to enable or disable collection for a running cluster; you have to stop and restart the cluster.': cannot unpack non-iterable NoneType object\nError in finding 'How to disable it#\nThere are multiple ways to disable usage stats collection before starting a cluster:\n\nCurrently there is no way to enable or disable collection for a running cluster; you have to stop and restart the cluster.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'How to disable it#\nThere are multiple ways to disable usage stats collection before starting a cluster:\n\nCurrently there is no way to enable or disable collection for a running cluster; you have to stop and restart the cluster.': cannot unpack non-iterable NoneType object\nError in finding 'Requesting removal of collected data#\nTo request removal of collected data, please email us at usage_stats@ray.io with the session_id that you can find in /tmp/ray/session_xxx/usage_stats.json.\n\n\nContact us#\nIf you have any feedback regarding usage stats collection, please email us at usage_stats@ray.io.': cannot unpack non-iterable NoneType object\nError in finding 'Comparing Ray Data to other systems#\n\nHow does Ray Data compare to other solutions for offline inference?#\n\n\nBatch Services: AWS Batch, GCP Batch\n\n\n\n\n\nOnline inference solutions: Bento ML, Sagemaker Batch Transform': cannot unpack non-iterable NoneType object\nError in finding 'Comparing Ray Data to other systems#\n\nHow does Ray Data compare to other solutions for offline inference?#\n\n\nBatch Services: AWS Batch, GCP Batch\n\n\n\n\n\nOnline inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft': cannot unpack non-iterable NoneType object\nError in finding 'Comparing Ray Data to other systems#\n\nHow does Ray Data compare to other solutions for offline inference?#\n\n\nBatch Services: AWS Batch, GCP Batch\n\n\n\n\n\nOnline inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader': cannot unpack non-iterable NoneType object\nError in finding 'Comparing Ray Data to other systems#\n\nHow does Ray Data compare to other solutions for offline inference?#\n\n\nBatch Services: AWS Batch, GCP Batch\n\n\n\n\n\nOnline inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader': cannot unpack non-iterable NoneType object\nError in finding 'Distributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset': cannot unpack non-iterable NoneType object\nError in finding 'Comparing Ray Data to other systems#\n\nHow does Ray Data compare to other solutions for offline inference?#\n\n\nBatch Services: AWS Batch, GCP Batch\n\n\n\n\n\nOnline inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader': cannot unpack non-iterable NoneType object\nError in finding 'Distributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'TensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm\n\n\n\n\n\nSupported data types: Petastorm only supports Parquet data, while Ray Data supports many file formats.\nLower overhead: Datasets is lower overhead: it supports zero-copy exchange between processes, in contrast to the multi-processing-based pipelines used by Petastorm.\nNo data processing: Petastorm does not expose any data processing APIs.': cannot unpack non-iterable NoneType object\nError in finding 'Comparing Ray Data to other systems#\n\nHow does Ray Data compare to other solutions for offline inference?#\n\n\nBatch Services: AWS Batch, GCP Batch\n\n\n\n\n\nOnline inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader': cannot unpack non-iterable NoneType object\nError in finding 'Distributed Data Processing Frameworks: Apache Spark and Daft\n\n\n\n\n\nHow does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm': cannot unpack non-iterable NoneType object\nError in finding 'TensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm\n\n\n\n\n\nSupported data types: Petastorm only supports Parquet data, while Ray Data supports many file formats.\nLower overhead: Datasets is lower overhead: it supports zero-copy exchange between processes, in contrast to the multi-processing-based pipelines used by Petastorm.\nNo data processing: Petastorm does not expose any data processing APIs.': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Which metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Which metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb': cannot unpack non-iterable NoneType object\nError in finding 'import sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\nfrom ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()\n\n    # `TuneReportCheckpointCallback` provides a helper method to retrieve the\n    # model from a checkpoint.\n    best_bst = TuneReportCheckpointCallback.get_model(best_result.checkpoint)': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Which metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb': cannot unpack non-iterable NoneType object\nError in finding 'import sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\nfrom ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()\n\n    # `TuneReportCheckpointCallback` provides a helper method to retrieve the\n    # model from a checkpoint.\n    best_bst = TuneReportCheckpointCallback.get_model(best_result.checkpoint)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?': cannot unpack non-iterable NoneType object\nError in finding 'Which metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\nfrom ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()\n\n    # `TuneReportCheckpointCallback` provides a helper method to retrieve the\n    # model from a checkpoint.\n    best_bst = TuneReportCheckpointCallback.get_model(best_result.checkpoint)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?': cannot unpack non-iterable NoneType object\nError in finding 'Which metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\nfrom ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()\n\n    # `TuneReportCheckpointCallback` provides a helper method to retrieve the\n    # model from a checkpoint.\n    best_bst = TuneReportCheckpointCallback.get_model(best_result.checkpoint)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell content\nHide code cell content\n\n\nSMOKE_TEST = True\n\n\n\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\n\nresults = train_breast_cancer(\n    {\"objective\": \"binary:logistic\", \"eval_metric\": [\"logloss\", \"error\"]}\n)\naccuracy = 1.0 - results[\"eval\"][\"error\"][-1]\nprint(f\"Accuracy: {accuracy:.4f}\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nScaling XGBoost Training with Ray Train#\nIn Distributed Training and Inference with XGBoost and LightGBM on Ray, we covered how to scale XGBoost single-model training with Ray Train.\nFor the rest of this tutorial, we will focus on how to optimize the hyperparameters of the XGBoost model using Ray Tune.': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9231\n\n\n\n\nThe rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'import sklearn.datasets\nimport sklearn.metrics\n\nfrom ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Logical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The best configuration we found used eta=0.000950272, max_depth=3,\nmin_child_weight=2, subsample=0.835504 and reached an accuracy of\n0.965035.\n\nWhich metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?': cannot unpack non-iterable NoneType object\nError in finding 'Which metric should be used to identify badly performing trials?\nShould this metric be maximized or minimized?\nHow many iterations does each trial train for?\n\n\nimport sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb': cannot unpack non-iterable NoneType object\nError in finding 'import sklearn.datasets\nimport sklearn.metrics\nfrom ray.tune.schedulers import ASHAScheduler\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\nfrom ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()\n\n    # `TuneReportCheckpointCallback` provides a helper method to retrieve the\n    # model from a checkpoint.\n    best_bst = TuneReportCheckpointCallback.get_model(best_result.checkpoint)': cannot unpack non-iterable NoneType object\nError in finding 'Each task thus works with 10% of the available GPU memory. You also have to tell\nXGBoost to use the gpu_hist tree method, so it knows it should use the GPU.\n\n\nMore XGBoost Examples#': cannot unpack non-iterable NoneType object\nError in finding 'ray.init()\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is None\"\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is bar\"': cannot unpack non-iterable NoneType object\nError in finding 'ray.init()\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is None\"\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is bar\"': cannot unpack non-iterable NoneType object\nError in finding 'ray.init()\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is None\"\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is bar\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'And this code:\nimport os\nimport ray\n\n@ray.remote\ndef check_file():\n    foo_exists = os.path.exists(\"/tmp/foo.txt\")\n    return foo_exists\n\nfutures = []\nfor _ in range(1000):\n    futures.append(check_file.remote())\n\nprint(ray.get(futures))\n\ndef create_task_that_uses_resources():\n    @ray.remote(num_cpus=10)\n    def sample_task():\n        print(\"Hello\")\n        return': cannot unpack non-iterable NoneType object\nError in finding 'print(ray.get(futures))\n\ndef create_task_that_uses_resources():\n    @ray.remote(num_cpus=10)\n    def sample_task():\n        print(\"Hello\")\n        return\n\n    return ray.get([sample_task.remote() for i in range(10)])\n\ndef objective(config):\n    create_task_that_uses_resources()\n\ntuner = tune.Tuner(objective, param_space={\"a\": 1})\ntuner.fit()': cannot unpack non-iterable NoneType object\nError in finding 'ray.init()\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is None\"\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is bar\"': cannot unpack non-iterable NoneType object\nError in finding 'And this code:\nimport os\nimport ray\n\n@ray.remote\ndef check_file():\n    foo_exists = os.path.exists(\"/tmp/foo.txt\")\n    return foo_exists\n\nfutures = []\nfor _ in range(1000):\n    futures.append(check_file.remote())\n\nprint(ray.get(futures))\n\ndef create_task_that_uses_resources():\n    @ray.remote(num_cpus=10)\n    def sample_task():\n        print(\"Hello\")\n        return': cannot unpack non-iterable NoneType object\nError in finding 'print(ray.get(futures))\n\ndef create_task_that_uses_resources():\n    @ray.remote(num_cpus=10)\n    def sample_task():\n        print(\"Hello\")\n        return\n\n    return ray.get([sample_task.remote() for i in range(10)])\n\ndef objective(config):\n    create_task_that_uses_resources()\n\ntuner = tune.Tuner(objective, param_space={\"a\": 1})\ntuner.fit()': cannot unpack non-iterable NoneType object\nError in finding 'ray.init()\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is None\"\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is bar\"': cannot unpack non-iterable NoneType object\nError in finding 'And this code:\nimport os\nimport ray\n\n@ray.remote\ndef check_file():\n    foo_exists = os.path.exists(\"/tmp/foo.txt\")\n    return foo_exists\n\nfutures = []\nfor _ in range(1000):\n    futures.append(check_file.remote())\n\nprint(ray.get(futures))\n\ndef create_task_that_uses_resources():\n    @ray.remote(num_cpus=10)\n    def sample_task():\n        print(\"Hello\")\n        return': cannot unpack non-iterable NoneType object\nError in finding 'print(ray.get(futures))\n\ndef create_task_that_uses_resources():\n    @ray.remote(num_cpus=10)\n    def sample_task():\n        print(\"Hello\")\n        return\n\n    return ray.get([sample_task.remote() for i in range(10)])\n\ndef objective(config):\n    create_task_that_uses_resources()\n\ntuner = tune.Tuner(objective, param_space={\"a\": 1})\ntuner.fit()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '@ray.remote\ndef f():\n    return 1\n\n@ray.remote\ndef f():\n    return 2\n\nprint(ray.get(f.remote()))  # This should print 2.\n\n\n2\n\n\nThis forces the external module to reload on the Workers. Note that in Python 3, you must use from importlib import reload.': cannot unpack non-iterable NoneType object\nError in finding 'ray.init()\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is None\"\n\n\n@ray.remote\ndef myfunc():\n    myenv = os.environ.get(\"FOO\")\n    print(f\"myenv is {myenv}\")\n    return 1\n\n\nray.get(myfunc.remote())\n# this prints: \"myenv is bar\"': cannot unpack non-iterable NoneType object\nError in finding 'And this code:\nimport os\nimport ray\n\n@ray.remote\ndef check_file():\n    foo_exists = os.path.exists(\"/tmp/foo.txt\")\n    return foo_exists\n\nfutures = []\nfor _ in range(1000):\n    futures.append(check_file.remote())\n\nprint(ray.get(futures))\n\ndef create_task_that_uses_resources():\n    @ray.remote(num_cpus=10)\n    def sample_task():\n        print(\"Hello\")\n        return': cannot unpack non-iterable NoneType object\nError in finding 'print(ray.get(futures))\n\ndef create_task_that_uses_resources():\n    @ray.remote(num_cpus=10)\n    def sample_task():\n        print(\"Hello\")\n        return\n\n    return ray.get([sample_task.remote() for i in range(10)])\n\ndef objective(config):\n    create_task_that_uses_resources()\n\ntuner = tune.Tuner(objective, param_space={\"a\": 1})\ntuner.fit()': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef f():\n    return 1\n\n@ray.remote\ndef f():\n    return 2\n\nprint(ray.get(f.remote()))  # This should print 2.\n\n\n2\n\n\nThis forces the external module to reload on the Workers. Note that in Python 3, you must use from importlib import reload.\n\n# Enable stack trace capture\nray.init(runtime_env={\"env_vars\": {\"RAY_record_task_actor_creation_sites\": \"true\"}})': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up Toy the Example#\nWe\u2019ll start with some imports.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\nError in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\nError in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\nError in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up checkpointing and loading for PBT with the function trainable interface\nConfigure Tune and PBT scheduler parameters\nVisualize PBT algorithm behavior to gain some intuition\n\n\n!pip install -q -U \"ray[tune]\" matplotlib\n\n\n\n\nNote: this tutorial imports functions from this helper file named pbt_visualization_utils.py. These define plotting functions for the PBT training progress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize the model parameters\n    theta = get_init_theta()\n\n    # Main training loop (trial stopping is configured later)\n    while True:\n        # Perform gradient ascent steps\n        param_grads = grad_Qhat(theta, h)\n        theta_grad = np.asarray(param_grads[\"theta\"])\n        theta = theta + lr * theta_grad': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nNote\nWe recommend matching checkpoint_interval with perturbation_interval from the PBT config.\nThis ensures that the PBT algorithm actually exploits the trials in the most recent iteration.\nIf your perturbation_interval is large and want to checkpoint more frequently, set perturbation_interval to be a multiple of checkpoint_interval.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'A few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.\n\n\npbt_results = tuner.fit()\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:07\nRunning for: 00:00:39.86        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The plot on the left shows the parameter values (theta0, theta1) on every training iteration, for both trials. As the training iteration increases, the size of the point gets smaller.\nWe see the iteration shown as a label next to points at every perturbation_interval training iterations. Let\u2019s zoom into the transition from iteration 4 to 5 for both the trials.\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if ray.is_initialized():\n    ray.shutdown()\nray.init()\n\ngrid_results = tuner.fit()\nif grid_results.errors:\n    raise RuntimeError\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-24 16:22:18\nRunning for: 00:00:01.24        \nMemory:      21.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'There\u2019s more diversity in the exploration space\nMultiple \u201cgood\u201d solutions can be discovered simultaneously\nDifferent exploitation patterns emerge as trials may choose from multiple well-performing configurations\nThe population as a whole can develop more robust strategies for optimization\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      PopulationBasedTraining: 48 checkpoints, 48 perturbsLogical resource usage: 1.0/12 CPUs, 0/0 GPUs\n    \n\n\n\nTrial Status\n\n\nTrial name            status    loc                  h0    lr  iter  total time (s)  Q     theta0     theta1\n\n\n\n\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 0.090282) into trial 942f2_00001 (score = -0.168306)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[PopulationBasedTraining] [Explore] Perturbed the hyperparameter config of trial942f2_00002:\nlr : 0.029 --- (* 0.8) --> 0.023200000000000002\nh0 : 0.0 --- (* 0.8) --> 0.0\nh1 : 1.0 --- (* 0.8) --> 0.8\n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)\n\n2025-02-24 16:22:25,540\tINFO pbt.py:905 --': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#': cannot unpack non-iterable NoneType object\nError in finding 'Ray mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\nData Processing with Varied Scales#\nData-Juicer team conducted experiments on datasets with billions of samples. They prepared a 560k-sample multimodal dataset and expanded it by different factors (1x to 125000x) to create datasets of varying sizes. The experimental results, shown in the figure below, demonstrate good scalability.': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#': cannot unpack non-iterable NoneType object\nError in finding 'Ray mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\nData Processing with Varied Scales#\nData-Juicer team conducted experiments on datasets with billions of samples. They prepared a 560k-sample multimodal dataset and expanded it by different factors (1x to 125000x) to create datasets of varying sizes. The experimental results, shown in the figure below, demonstrate good scalability.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Or if you want to create a deployment where each replica uses another type of accelerator such as an HPU, follow the example below:\n@serve.deployment(ray_actor_options={\"resources\": {\"HPU\": 1}})\ndef func(*args):\n    return do_something_with_my_hpu()\n\n\n\n@serve.deployment(ray_actor_options={\"num_gpus\": 0.5})\ndef func_2(*args):\n    return do_something_with_my_gpu()': cannot unpack non-iterable NoneType object\nError in finding 'Or if you want to create a deployment where each replica uses another type of accelerator such as an HPU, follow the example below:\n@serve.deployment(ray_actor_options={\"resources\": {\"HPU\": 1}})\ndef func(*args):\n    return do_something_with_my_hpu()\n\n\n\n@serve.deployment(ray_actor_options={\"num_gpus\": 0.5})\ndef func_2(*args):\n    return do_something_with_my_gpu()': cannot unpack non-iterable NoneType object\nError in finding 'In this example, each replica of each deployment will be allocated 0.5 GPUs.  The same can be done to multiplex over CPUs, using \"num_cpus\".\n\n\nYou can also specify accelerator types via the accelerator_type parameter in ray_actor_options.\nBelow is the full list of supported options in ray_actor_options; please see the relevant Ray Core documentation for more details about each option:': cannot unpack non-iterable NoneType object\nError in finding 'Or if you want to create a deployment where each replica uses another type of accelerator such as an HPU, follow the example below:\n@serve.deployment(ray_actor_options={\"resources\": {\"HPU\": 1}})\ndef func(*args):\n    return do_something_with_my_hpu()\n\n\n\n@serve.deployment(ray_actor_options={\"num_gpus\": 0.5})\ndef func_2(*args):\n    return do_something_with_my_gpu()': cannot unpack non-iterable NoneType object\nError in finding 'In this example, each replica of each deployment will be allocated 0.5 GPUs.  The same can be done to multiplex over CPUs, using \"num_cpus\".\n\n\nYou can also specify accelerator types via the accelerator_type parameter in ray_actor_options.\nBelow is the full list of supported options in ray_actor_options; please see the relevant Ray Core documentation for more details about each option:': cannot unpack non-iterable NoneType object\nError in finding 'accelerator_type\nmemory\nnum_cpus\nnum_gpus\nobject_store_memory\nresources\nruntime_env\n\n\n\n\n@serve.deployment\nclass MyDeployment:\n    def __init__(self, parallelism: str):\n        os.environ[\"OMP_NUM_THREADS\"] = parallelism\n        # Download model weights, initialize model, etc.\n\n    def __call__(self):\n        pass\n\n\nserve.run(MyDeployment.bind(\"12\"))': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.callbacks.callbacks.RLlibCallback.on_episode_created#\n\nSingleAgentEpisode/MultiAgentEpisode created: This callback is called.\nRespective sub-environment (gym.Env) is reset().\nCallback on_episode_start is called.\nStepping through sub-environment/episode commences.\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.callbacks.callbacks.RLlibCallback.on_episode_created#\n\nSingleAgentEpisode/MultiAgentEpisode created: This callback is called.\nRespective sub-environment (gym.Env) is reset().\nCallback on_episode_start is called.\nStepping through sub-environment/episode commences.\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Perform batch inference with LLMs\nConfigure vLLM for LLM inference\nQuery deployed models with an OpenAI compatible API endpoint\n\nds = ray.data.from_items([\"Start of the haiku is: Complete this for me...\"])\n\nds = processor(ds)\nds.show(limit=1)\n\n\n{'answer': 'Snowflakes gently fall\\nBlanketing the winter scene\\nFrozen peaceful hush'}': cannot unpack non-iterable NoneType object\nError in finding 'Perform batch inference with LLMs\nConfigure vLLM for LLM inference\nQuery deployed models with an OpenAI compatible API endpoint\n\nds = ray.data.from_items([\"Start of the haiku is: Complete this for me...\"])\n\nds = processor(ds)\nds.show(limit=1)\n\n\n{'answer': 'Snowflakes gently fall\\nBlanketing the winter scene\\nFrozen peaceful hush'}': cannot unpack non-iterable NoneType object\nError in finding 'Perform batch inference with LLMs\nConfigure vLLM for LLM inference\nQuery deployed models with an OpenAI compatible API endpoint\n\nds = ray.data.from_items([\"Start of the haiku is: Complete this for me...\"])\n\nds = processor(ds)\nds.show(limit=1)\n\n\n{'answer': 'Snowflakes gently fall\\nBlanketing the winter scene\\nFrozen peaceful hush'}': cannot unpack non-iterable NoneType object\nError in finding 'OPENAI_KEY = os.environ[\"OPENAI_API_KEY\"]\nds = ray.data.from_items([\"Hand me a haiku.\"])\n\n\nconfig = HttpRequestProcessorConfig(\n    url=\"https://api.openai.com/v1/chat/completions\",\n    headers={\"Authorization\": f\"Bearer {OPENAI_KEY}\"},\n    qps=1,\n)\n\nds = processor(ds)\nprint(ds.take_all())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Perform batch inference with LLMs\nConfigure vLLM for LLM inference\nQuery deployed models with an OpenAI compatible API endpoint\n\nds = ray.data.from_items([\"Start of the haiku is: Complete this for me...\"])\n\nds = processor(ds)\nds.show(limit=1)\n\n\n{'answer': 'Snowflakes gently fall\\nBlanketing the winter scene\\nFrozen peaceful hush'}': cannot unpack non-iterable NoneType object\nError in finding 'OPENAI_KEY = os.environ[\"OPENAI_API_KEY\"]\nds = ray.data.from_items([\"Hand me a haiku.\"])\n\n\nconfig = HttpRequestProcessorConfig(\n    url=\"https://api.openai.com/v1/chat/completions\",\n    headers={\"Authorization\": f\"Bearer {OPENAI_KEY}\"},\n    qps=1,\n)\n\nds = processor(ds)\nprint(ds.take_all())': cannot unpack non-iterable NoneType object\nError in finding 'If you would like to opt-out from usage data collection, you can follow Ray usage stats\nto turn it off.\n\n\nProduction guide#\n\n\nAnd later you can use remote object store URI as model_source in the config.\nconfig = vLLMEngineProcessorConfig(\n    model_source=\"gs://my-bucket/path/to/facebook-opt-350m\",  # or s3://my-bucket/path/to/model_name\n    ...\n)': cannot unpack non-iterable NoneType object\nError in finding 'Step 2: Install KubeRay operator#\nFollow this document to install the latest stable KubeRay operator from the Helm repository.\n\n\nYou might need to adjust some fields in the RayJob description YAML file so that it can run in your environment:': cannot unpack non-iterable NoneType object\nError in finding 'Step 2: Install KubeRay operator#\nFollow this document to install the latest stable KubeRay operator from the Helm repository.\n\n\nYou might need to adjust some fields in the RayJob description YAML file so that it can run in your environment:\n\n# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml': cannot unpack non-iterable NoneType object\nError in finding 'Step 2: Install KubeRay operator#\nFollow this document to install the latest stable KubeRay operator from the Helm repository.\n\n\nYou might need to adjust some fields in the RayJob description YAML file so that it can run in your environment:\n\n# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml': cannot unpack non-iterable NoneType object\nError in finding '# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml\n\n\nCheck that the RayJob is in the RUNNING status:\nkubectl get rayjob\n# NAME                   JOB STATUS   DEPLOYMENT STATUS   START TIME             END TIME   AGE\n# rayjob-pytorch-mnist   RUNNING      Running             2024-06-17T04:08:25Z              11m': cannot unpack non-iterable NoneType object\nError in finding 'Step 2: Install KubeRay operator#\nFollow this document to install the latest stable KubeRay operator from the Helm repository.\n\n\nYou might need to adjust some fields in the RayJob description YAML file so that it can run in your environment:\n\n# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml\n\n\nCheck that the RayJob is in the RUNNING status:\nkubectl get rayjob\n# NAME                   JOB STATUS   DEPLOYMENT STATUS   START TIME             END TIME   AGE\n# rayjob-pytorch-mnist   RUNNING      Running             2024-06-17T04:08:25Z              11m': cannot unpack non-iterable NoneType object\nError in finding 'Step 2: Install KubeRay operator#\nFollow this document to install the latest stable KubeRay operator from the Helm repository.\n\n\nYou might need to adjust some fields in the RayJob description YAML file so that it can run in your environment:\n\n# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml': cannot unpack non-iterable NoneType object\nError in finding '# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml\n\n\nCheck that the RayJob is in the RUNNING status:\nkubectl get rayjob\n# NAME                   JOB STATUS   DEPLOYMENT STATUS   START TIME             END TIME   AGE\n# rayjob-pytorch-mnist   RUNNING      Running             2024-06-17T04:08:25Z              11m': cannot unpack non-iterable NoneType object\nError in finding '# Check training logs.\nkubectl logs -f rayjob-pytorch-mnist-nxmj2\n\n# Training completed after 10 iterations at 2024-06-16 22:33:06. Total running time: 7min 10s': cannot unpack non-iterable NoneType object\nError in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\nError in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\nError in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Episodes#\n\nTip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\n\nBecause RLlib keeps all values in NumPy arrays, this allows for efficient encoding and\ntransmission across the network.\nIn multi-agent mode, the EnvRunnerGroup\nproduces MultiAgentEpisode instances.': cannot unpack non-iterable NoneType object\nError in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Episodes#\n\nTip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\n\nBecause RLlib keeps all values in NumPy arrays, this allows for efficient encoding and\ntransmission across the network.\nIn multi-agent mode, the EnvRunnerGroup\nproduces MultiAgentEpisode instances.': cannot unpack non-iterable NoneType object\nError in finding 'Because RLlib keeps all values in NumPy arrays, this allows for efficient encoding and\ntransmission across the network.\nIn multi-agent mode, the EnvRunnerGroup\nproduces MultiAgentEpisode instances.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.\n\n\n\nTip\nCall the is_multi_agent()\nmethod to find out, whether your config is multi-agent or not.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\nError in finding 'Episodes#\n\nTip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\n\nBecause RLlib keeps all values in NumPy arrays, this allows for efficient encoding and\ntransmission across the network.\nIn multi-agent mode, the EnvRunnerGroup\nproduces MultiAgentEpisode instances.': cannot unpack non-iterable NoneType object\nError in finding 'Because RLlib keeps all values in NumPy arrays, this allows for efficient encoding and\ntransmission across the network.\nIn multi-agent mode, the EnvRunnerGroup\nproduces MultiAgentEpisode instances.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.\n\n\n\nTip\nCall the is_multi_agent()\nmethod to find out, whether your config is multi-agent or not.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nCall the is_multi_agent()\nmethod to find out, whether your config is multi-agent or not.\n\n# Configure the EnvRunners.\nconfig = (\n    PPOConfig()\n    .environment(\"Acrobot-v1\")\n    .env_runners(num_env_runners=2, num_envs_per_env_runner=1)\n)\n# Create the EnvRunner actors.\nenv_runners = [\n    ray.remote(SingleAgentEnvRunner).remote(config=config)\n    for _ in range(config.num_env_runners)\n]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.\n\n\n\n\n\nAlgorithmConfig and Algorithm#\n\nTip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RLlib AlgorithmConfigs and Algorithms.\nSee here for a detailed description of the Algorithm class.\n\nYou can create and manage an instance of it directly through the Python API.\nBecause the Algorithm class is a subclass of the Tune Trainable API,\nyou can use Ray Tune to more easily manage your experiment and tune hyperparameters.': cannot unpack non-iterable NoneType object\nError in finding 'RL environments#\n\nTip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#\n\nTip\nThe following is a quick overview of RLlib RLModules.\nSee here for a detailed description of the RLModule class.': cannot unpack non-iterable NoneType object\nError in finding 'Episodes#\n\nTip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\n\nBecause RLlib keeps all values in NumPy arrays, this allows for efficient encoding and\ntransmission across the network.\nIn multi-agent mode, the EnvRunnerGroup\nproduces MultiAgentEpisode instances.': cannot unpack non-iterable NoneType object\nError in finding 'Because RLlib keeps all values in NumPy arrays, this allows for efficient encoding and\ntransmission across the network.\nIn multi-agent mode, the EnvRunnerGroup\nproduces MultiAgentEpisode instances.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.\n\n\n\nTip\nCall the is_multi_agent()\nmethod to find out, whether your config is multi-agent or not.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nCall the is_multi_agent()\nmethod to find out, whether your config is multi-agent or not.\n\n# Configure the EnvRunners.\nconfig = (\n    PPOConfig()\n    .environment(\"Acrobot-v1\")\n    .env_runners(num_env_runners=2, num_envs_per_env_runner=1)\n)\n# Create the EnvRunner actors.\nenv_runners = [\n    ray.remote(SingleAgentEnvRunner).remote(config=config)\n    for _ in range(config.num_env_runners)\n]': cannot unpack non-iterable NoneType object\nError in finding 'def train_func():\n    model = nn.Sequential(nn.Linear(30, 1), nn.Sigmoid())\n    loss_fn = torch.nn.BCELoss()\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.001)\n\n    # Datasets can be accessed in your train_func via ``get_dataset_shard``.\n    train_data_shard = train.get_dataset_shard(\"train\")\n\n\ntrain_dataset = ray.data.read_csv(\"s3://anonymous@air-example-data/breast_cancer.csv\")': cannot unpack non-iterable NoneType object\nError in finding 'def train_func():\n    model = nn.Sequential(nn.Linear(30, 1), nn.Sigmoid())\n    loss_fn = torch.nn.BCELoss()\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.001)\n\n    # Datasets can be accessed in your train_func via ``get_dataset_shard``.\n    train_data_shard = train.get_dataset_shard(\"train\")\n\n\ntrain_dataset = ray.data.read_csv(\"s3://anonymous@air-example-data/breast_cancer.csv\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def train_func():\n    model = nn.Sequential(nn.Linear(30, 1), nn.Sigmoid())\n    loss_fn = torch.nn.BCELoss()\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.001)\n\n    # Datasets can be accessed in your train_func via ``get_dataset_shard``.\n    train_data_shard = train.get_dataset_shard(\"train\")\n\n\ntrain_dataset = ray.data.read_csv(\"s3://anonymous@air-example-data/breast_cancer.csv\")': cannot unpack non-iterable NoneType object\nError in finding 'mnist = torchvision.datasets.MNIST(root=\"/tmp/\", download=True)\nds = ray.data.from_torch(mnist)\n\n# The data for each item of the Torch dataset is under the \"item\" key.\nprint(ds.schema())\n\n\nColumn  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\nError in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.\n\n\n\n\nPyTorch Dataset\nimport tempfile\nimport boto3\nfrom botocore import UNSIGNED\nfrom botocore.config import Config\n\nfrom torchvision import transforms\nfrom torch.utils.data import Dataset\nfrom PIL import Image': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'NAME                                                 READY   STATUS    RESTARTS      AGE\nraycluster-external-redis-head-xrjff                 1/1     Running   1 (48s ago)   4m41s\nraycluster-external-redis-small-group-worker-dwt98   1/1     Running   0             4m41s\n\n\n\n\nStep 8: Access the detached actor again#\n\n\nkubectl exec -it $HEAD_POD -- python3 /home/ray/samples/increment_counter.py': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\nError in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'NAME                                                 READY   STATUS    RESTARTS      AGE\nraycluster-external-redis-head-xrjff                 1/1     Running   1 (48s ago)   4m41s\nraycluster-external-redis-small-group-worker-dwt98   1/1     Running   0             4m41s\n\n\n\n\nStep 8: Access the detached actor again#\n\n\nkubectl exec -it $HEAD_POD -- python3 /home/ray/samples/increment_counter.py': cannot unpack non-iterable NoneType object\nError in finding 'The detached actor is always on the worker Pod in this example.\nThe head Pod\u2019s rayStartParams is set to num-cpus: \"0\".Hence, no tasks or actors will be scheduled on the head Pod.\n\n\nStep 9: Remove the key stored in Redis when deleting RayCluster#\n\n\n# Step 9.1: Delete the RayCluster custom resource.\nkubectl delete raycluster raycluster-external-redis': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\nError in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'NAME                                                 READY   STATUS    RESTARTS      AGE\nraycluster-external-redis-head-xrjff                 1/1     Running   1 (48s ago)   4m41s\nraycluster-external-redis-small-group-worker-dwt98   1/1     Running   0             4m41s\n\n\n\n\nStep 8: Access the detached actor again#\n\n\nkubectl exec -it $HEAD_POD -- python3 /home/ray/samples/increment_counter.py': cannot unpack non-iterable NoneType object\nError in finding 'The detached actor is always on the worker Pod in this example.\nThe head Pod\u2019s rayStartParams is set to num-cpus: \"0\".Hence, no tasks or actors will be scheduled on the head Pod.\n\n\nStep 9: Remove the key stored in Redis when deleting RayCluster#\n\n\n# Step 9.1: Delete the RayCluster custom resource.\nkubectl delete raycluster raycluster-external-redis': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'In other words, if the Kubernetes Job fails, the RayCluster won\u2019t be deleted. In that case, you should remove the finalizer and cleanup Redis manually.\nkubectl patch rayclusters.ray.io raycluster-external-redis --type json --patch='[ { \"op\": \"remove\", \"path\": \"/metadata/finalizers\" } ]'\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\nError in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'NAME                                                 READY   STATUS    RESTARTS      AGE\nraycluster-external-redis-head-xrjff                 1/1     Running   1 (48s ago)   4m41s\nraycluster-external-redis-small-group-worker-dwt98   1/1     Running   0             4m41s\n\n\n\n\nStep 8: Access the detached actor again#\n\n\nkubectl exec -it $HEAD_POD -- python3 /home/ray/samples/increment_counter.py': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The detached actor is always on the worker Pod in this example.\nThe head Pod\u2019s rayStartParams is set to num-cpus: \"0\".Hence, no tasks or actors will be scheduled on the head Pod.\n\n\nStep 9: Remove the key stored in Redis when deleting RayCluster#\n\n\n# Step 9.1: Delete the RayCluster custom resource.\nkubectl delete raycluster raycluster-external-redis': cannot unpack non-iterable NoneType object\nError in finding 'In other words, if the Kubernetes Job fails, the RayCluster won\u2019t be deleted. In that case, you should remove the finalizer and cleanup Redis manually.\nkubectl patch rayclusters.ray.io raycluster-external-redis --type json --patch='[ { \"op\": \"remove\", \"path\": \"/metadata/finalizers\" } ]'\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\nError in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'NAME                                                 READY   STATUS    RESTARTS      AGE\nraycluster-external-redis-head-xrjff                 1/1     Running   1 (48s ago)   4m41s\nraycluster-external-redis-small-group-worker-dwt98   1/1     Running   0             4m41s\n\n\n\n\nStep 8: Access the detached actor again#\n\n\nkubectl exec -it $HEAD_POD -- python3 /home/ray/samples/increment_counter.py': cannot unpack non-iterable NoneType object\nError in finding 'The detached actor is always on the worker Pod in this example.\nThe head Pod\u2019s rayStartParams is set to num-cpus: \"0\".Hence, no tasks or actors will be scheduled on the head Pod.\n\n\nStep 9: Remove the key stored in Redis when deleting RayCluster#\n\n\n# Step 9.1: Delete the RayCluster custom resource.\nkubectl delete raycluster raycluster-external-redis': cannot unpack non-iterable NoneType object\nError in finding 'In other words, if the Kubernetes Job fails, the RayCluster won\u2019t be deleted. In that case, you should remove the finalizer and cleanup Redis manually.\nkubectl patch rayclusters.ray.io raycluster-external-redis --type json --patch='[ { \"op\": \"remove\", \"path\": \"/metadata/finalizers\" } ]'\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '1. Enable GCS fault tolerance#\n\ngcsFaultToleranceOptions: Add gcsFaultToleranceOptions field to the RayCluster custom resource to enable GCS fault tolerance.\n  kind: RayCluster\n  metadata:\n  spec:\n    gcsFaultToleranceOptions: # <- Add this field to enable GCS fault tolerance.\n\n\n\n\n\n\n2. Connect to an external Redis#\n\n\n\n\n\n\n\n\n3. Use an external storage namespace#': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.1: List all Pods in the `default` namespace.\n# The expected output should be 4 Pods: 1 head, 1 worker, 1 KubeRay, and 1 Redis.\nkubectl get pods\n\n\n\n\n\n\n\n\n# Step 4.2: List all ConfigMaps in the `default` namespace.\nkubectl get configmaps\n\n\n\n\nNAME               DATA   AGE\nkube-root-ca.crt   1      3m4s\nray-example        2      2m41s\nredis-config       1      2m41s': cannot unpack non-iterable NoneType object\nError in finding 'Step 7: Kill the GCS process in the head Pod#\n\n\n# Step 7.1: Check the `RAY_gcs_rpc_server_reconnect_timeout_s` environment variable in both the head Pod and worker Pod.\nkubectl get pods $HEAD_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\nkubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'NAME                                                 READY   STATUS    RESTARTS      AGE\nraycluster-external-redis-head-xrjff                 1/1     Running   1 (48s ago)   4m41s\nraycluster-external-redis-small-group-worker-dwt98   1/1     Running   0             4m41s\n\n\n\n\nStep 8: Access the detached actor again#\n\n\nkubectl exec -it $HEAD_POD -- python3 /home/ray/samples/increment_counter.py': cannot unpack non-iterable NoneType object\nError in finding 'The detached actor is always on the worker Pod in this example.\nThe head Pod\u2019s rayStartParams is set to num-cpus: \"0\".Hence, no tasks or actors will be scheduled on the head Pod.\n\n\nStep 9: Remove the key stored in Redis when deleting RayCluster#\n\n\n# Step 9.1: Delete the RayCluster custom resource.\nkubectl delete raycluster raycluster-external-redis': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'In other words, if the Kubernetes Job fails, the RayCluster won\u2019t be deleted. In that case, you should remove the finalizer and cleanup Redis manually.\nkubectl patch rayclusters.ray.io raycluster-external-redis --type json --patch='[ { \"op\": \"remove\", \"path\": \"/metadata/finalizers\" } ]'\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster': cannot unpack non-iterable NoneType object\nError in finding '1. Enable GCS fault tolerance#\n\ngcsFaultToleranceOptions: Add gcsFaultToleranceOptions field to the RayCluster custom resource to enable GCS fault tolerance.\n  kind: RayCluster\n  metadata:\n  spec:\n    gcsFaultToleranceOptions: # <- Add this field to enable GCS fault tolerance.\n\n\n\n\n\n\n2. Connect to an external Redis#\n\n\n\n\n\n\n\n\n3. Use an external storage namespace#\n\n\n\n\n\n\n4. Turn off Redis cleanup#': cannot unpack non-iterable NoneType object\nError in finding '2. Connect to an external Redis#\n\n\n\n\n\n\n\n\n3. Use an external storage namespace#\n\n\n\n\n\n\n4. Turn off Redis cleanup#\n\nENABLE_GCS_FT_REDIS_CLEANUP: True by default. You can turn this feature off by setting the environment variable in the KubeRay operator\u2019s Helm chart.': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.checkpoints.Checkpointable#\n\n\n__init__\n\n\nfrom_checkpoint\nCreates a new Checkpointable instance from the given location and returns it.\n\nget_checkpointable_components\nReturns the implementing class's own Checkpointable subcomponents.\n\nget_ctor_args_and_kwargs\nReturns the args/kwargs used to create self from its constructor.': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.core.rl_module.multi_rl_module.MultiRLModule.set_state#\n\nParameters:\nstate \u2013 The state dict to set.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'get_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:\n\n\n\nfrom ray.rllib.env.multi_agent_env import MultiAgentEnv\nclass MyMultiAgentEnv(MultiAgentEnv):\n    # define your env here\n    ...\nenv = MyMultiAgentEnv(...)\ngrouped_env = env.with_agent_groups(env, {\n  \"group1\": [\"agent1\", \"agent2\", \"agent3\"],\n  \"group2\": [\"agent4\", \"agent5\"],\n})': cannot unpack non-iterable NoneType object\nError in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'get_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:\n\n\n\nfrom ray.rllib.env.multi_agent_env import MultiAgentEnv\nclass MyMultiAgentEnv(MultiAgentEnv):\n    # define your env here\n    ...\nenv = MyMultiAgentEnv(...)\ngrouped_env = env.with_agent_groups(env, {\n  \"group1\": [\"agent1\", \"agent2\", \"agent3\"],\n  \"group2\": [\"agent4\", \"agent5\"],\n})': cannot unpack non-iterable NoneType object\nError in finding 'render() \u2192 None[source]#\nTries to render the environment.\n\n\n\n\nConvert gymnasium.Env into MultiAgentEnv#\n\nParameters:\nenv_name_or_creator \u2013 String specifier or env_maker function taking\nan EnvContext object as only arg and returning a gym.Env.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel GPU\n\nTip\nYou can set the ONEAPI_DEVICE_SELECTOR environment variable before starting a Ray node\nto limit the Intel GPUs that are visible to Ray.\nFor example, ONEAPI_DEVICE_SELECTOR=1,3 ray start --head --num-gpus=2\nlets Ray only see devices 1 and 3.\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'AWS Neuron Core\n\n\n\n\nGoogle TPU\n\nTip\nYou can set the TPU_VISIBLE_CHIPS environment variable before starting a Ray node\nto limit the Google TPUs that are visible to Ray.\nFor example, TPU_VISIBLE_CHIPS=1,3 ray start --head --resources='{\"TPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\nIntel Gaudi': cannot unpack non-iterable NoneType object\nError in finding 'Intel GPU\n\nTip\nYou can set the ONEAPI_DEVICE_SELECTOR environment variable before starting a Ray node\nto limit the Intel GPUs that are visible to Ray.\nFor example, ONEAPI_DEVICE_SELECTOR=1,3 ray start --head --num-gpus=2\nlets Ray only see devices 1 and 3.\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'AWS Neuron Core\n\n\n\n\nGoogle TPU\n\nTip\nYou can set the TPU_VISIBLE_CHIPS environment variable before starting a Ray node\nto limit the Google TPUs that are visible to Ray.\nFor example, TPU_VISIBLE_CHIPS=1,3 ray start --head --resources='{\"TPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\nIntel Gaudi': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel GPU\n\nTip\nYou can set the ONEAPI_DEVICE_SELECTOR environment variable before starting a Ray node\nto limit the Intel GPUs that are visible to Ray.\nFor example, ONEAPI_DEVICE_SELECTOR=1,3 ray start --head --num-gpus=2\nlets Ray only see devices 1 and 3.\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'AWS Neuron Core\n\n\n\n\nGoogle TPU\n\nTip\nYou can set the TPU_VISIBLE_CHIPS environment variable before starting a Ray node\nto limit the Google TPUs that are visible to Ray.\nFor example, TPU_VISIBLE_CHIPS=1,3 ray start --head --resources='{\"TPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\nIntel Gaudi': cannot unpack non-iterable NoneType object\nError in finding 'Huawei Ascend\n\nTip\nYou can set the ASCEND_RT_VISIBLE_DEVICES environment variable before starting a Ray node\nto limit the Huawei Ascend NPUs that are visible to Ray.\nFor example, ASCEND_RT_VISIBLE_DEVICES=1,3 ray start --head --resources='{\"NPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel GPU\n\nTip\nYou can set the ONEAPI_DEVICE_SELECTOR environment variable before starting a Ray node\nto limit the Intel GPUs that are visible to Ray.\nFor example, ONEAPI_DEVICE_SELECTOR=1,3 ray start --head --num-gpus=2\nlets Ray only see devices 1 and 3.\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'AWS Neuron Core\n\n\n\n\nGoogle TPU\n\nTip\nYou can set the TPU_VISIBLE_CHIPS environment variable before starting a Ray node\nto limit the Google TPUs that are visible to Ray.\nFor example, TPU_VISIBLE_CHIPS=1,3 ray start --head --resources='{\"TPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\nIntel Gaudi': cannot unpack non-iterable NoneType object\nError in finding 'Huawei Ascend\n\nTip\nYou can set the ASCEND_RT_VISIBLE_DEVICES environment variable before starting a Ray node\nto limit the Huawei Ascend NPUs that are visible to Ray.\nFor example, ASCEND_RT_VISIBLE_DEVICES=1,3 ray start --head --resources='{\"NPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(NPUActor pid=52420) NPU IDs: [0]\n(NPUActor pid=52420) ASCEND_RT_VISIBLE_DEVICES: 0\n(npu_task pid=51830) NPU IDs: [1]\n(npu_task pid=51830) ASCEND_RT_VISIBLE_DEVICES: 1\n\n\n\n    # Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()': cannot unpack non-iterable NoneType object\nError in finding 'Intel GPU\n\nTip\nYou can set the ONEAPI_DEVICE_SELECTOR environment variable before starting a Ray node\nto limit the Intel GPUs that are visible to Ray.\nFor example, ONEAPI_DEVICE_SELECTOR=1,3 ray start --head --num-gpus=2\nlets Ray only see devices 1 and 3.\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'AWS Neuron Core\n\n\n\n\nGoogle TPU\n\nTip\nYou can set the TPU_VISIBLE_CHIPS environment variable before starting a Ray node\nto limit the Google TPUs that are visible to Ray.\nFor example, TPU_VISIBLE_CHIPS=1,3 ray start --head --resources='{\"TPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\nIntel Gaudi': cannot unpack non-iterable NoneType object\nError in finding 'Huawei Ascend\n\nTip\nYou can set the ASCEND_RT_VISIBLE_DEVICES environment variable before starting a Ray node\nto limit the Huawei Ascend NPUs that are visible to Ray.\nFor example, ASCEND_RT_VISIBLE_DEVICES=1,3 ray start --head --resources='{\"NPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding '(NPUActor pid=52420) NPU IDs: [0]\n(NPUActor pid=52420) ASCEND_RT_VISIBLE_DEVICES: 0\n(npu_task pid=51830) NPU IDs: [1]\n(npu_task pid=51830) ASCEND_RT_VISIBLE_DEVICES: 1\n\n\n\n    # Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()\n\n\nFractional Accelerators#\nRay supports fractional resource requirements\nso multiple tasks and actors can share the same accelerator.\n\n\n\nNvidia GPU\nray.init(num_cpus=4, num_gpus=1)\n\n@ray.remote(num_gpus=0.25)\ndef f():\n    import time': cannot unpack non-iterable NoneType object\nError in finding 'Intel GPU\n\nTip\nYou can set the ONEAPI_DEVICE_SELECTOR environment variable before starting a Ray node\nto limit the Intel GPUs that are visible to Ray.\nFor example, ONEAPI_DEVICE_SELECTOR=1,3 ray start --head --num-gpus=2\nlets Ray only see devices 1 and 3.\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'AWS Neuron Core\n\n\n\n\nGoogle TPU\n\nTip\nYou can set the TPU_VISIBLE_CHIPS environment variable before starting a Ray node\nto limit the Google TPUs that are visible to Ray.\nFor example, TPU_VISIBLE_CHIPS=1,3 ray start --head --resources='{\"TPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\nIntel Gaudi': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Huawei Ascend\n\nTip\nYou can set the ASCEND_RT_VISIBLE_DEVICES environment variable before starting a Ray node\nto limit the Huawei Ascend NPUs that are visible to Ray.\nFor example, ASCEND_RT_VISIBLE_DEVICES=1,3 ray start --head --resources='{\"NPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding '(NPUActor pid=52420) NPU IDs: [0]\n(NPUActor pid=52420) ASCEND_RT_VISIBLE_DEVICES: 0\n(npu_task pid=51830) NPU IDs: [1]\n(npu_task pid=51830) ASCEND_RT_VISIBLE_DEVICES: 1\n\n\n\n    # Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()\n\n\nFractional Accelerators#\nRay supports fractional resource requirements\nso multiple tasks and actors can share the same accelerator.\n\n\n\nNvidia GPU\nray.init(num_cpus=4, num_gpus=1)\n\n@ray.remote(num_gpus=0.25)\ndef f():\n    import time': cannot unpack non-iterable NoneType object\nError in finding 'time.sleep(1)\n\n# The four tasks created here can execute concurrently\n# and share the same NPU.\nray.get([f.remote() for _ in range(4)])\n\n\n\n@ray.remote(num_gpus=0.5)\nclass FractionalGPUActor:\n    def ping(self):\n        print(\"GPU id: {}\".format(ray.get_runtime_context().get_accelerator_ids()[\"GPU\"]))': cannot unpack non-iterable NoneType object\nError in finding 'Intel GPU\n\nTip\nYou can set the ONEAPI_DEVICE_SELECTOR environment variable before starting a Ray node\nto limit the Intel GPUs that are visible to Ray.\nFor example, ONEAPI_DEVICE_SELECTOR=1,3 ray start --head --num-gpus=2\nlets Ray only see devices 1 and 3.\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'AWS Neuron Core\n\n\n\n\nGoogle TPU\n\nTip\nYou can set the TPU_VISIBLE_CHIPS environment variable before starting a Ray node\nto limit the Google TPUs that are visible to Ray.\nFor example, TPU_VISIBLE_CHIPS=1,3 ray start --head --resources='{\"TPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\nIntel Gaudi': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Huawei Ascend\n\nTip\nYou can set the ASCEND_RT_VISIBLE_DEVICES environment variable before starting a Ray node\nto limit the Huawei Ascend NPUs that are visible to Ray.\nFor example, ASCEND_RT_VISIBLE_DEVICES=1,3 ray start --head --resources='{\"NPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding '(NPUActor pid=52420) NPU IDs: [0]\n(NPUActor pid=52420) ASCEND_RT_VISIBLE_DEVICES: 0\n(npu_task pid=51830) NPU IDs: [1]\n(npu_task pid=51830) ASCEND_RT_VISIBLE_DEVICES: 1\n\n\n\n    # Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()': cannot unpack non-iterable NoneType object\nError in finding '# Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()\n\n\nFractional Accelerators#\nRay supports fractional resource requirements\nso multiple tasks and actors can share the same accelerator.\n\n\n\nNvidia GPU\nray.init(num_cpus=4, num_gpus=1)\n\n@ray.remote(num_gpus=0.25)\ndef f():\n    import time': cannot unpack non-iterable NoneType object\nError in finding 'time.sleep(1)\n\n# The four tasks created here can execute concurrently\n# and share the same NPU.\nray.get([f.remote() for _ in range(4)])\n\n\n\n@ray.remote(num_gpus=0.5)\nclass FractionalGPUActor:\n    def ping(self):\n        print(\"GPU id: {}\".format(ray.get_runtime_context().get_accelerator_ids()[\"GPU\"]))': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(FractionalGPUActor pid=57417) GPU id: [0]\n(FractionalGPUActor pid=57416) GPU id: [0]\n(FractionalGPUActor pid=57418) GPU id: [1]\n\n\n\n    # This task allocates memory on the GPU and then never release it.\n    tf.Session()': cannot unpack non-iterable NoneType object\nError in finding 'Intel GPU\n\nTip\nYou can set the ONEAPI_DEVICE_SELECTOR environment variable before starting a Ray node\nto limit the Intel GPUs that are visible to Ray.\nFor example, ONEAPI_DEVICE_SELECTOR=1,3 ray start --head --num-gpus=2\nlets Ray only see devices 1 and 3.\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'AWS Neuron Core\n\n\n\n\nGoogle TPU\n\nTip\nYou can set the TPU_VISIBLE_CHIPS environment variable before starting a Ray node\nto limit the Google TPUs that are visible to Ray.\nFor example, TPU_VISIBLE_CHIPS=1,3 ray start --head --resources='{\"TPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\nIntel Gaudi': cannot unpack non-iterable NoneType object\nError in finding 'Huawei Ascend\n\nTip\nYou can set the ASCEND_RT_VISIBLE_DEVICES environment variable before starting a Ray node\nto limit the Huawei Ascend NPUs that are visible to Ray.\nFor example, ASCEND_RT_VISIBLE_DEVICES=1,3 ray start --head --resources='{\"NPU\": 2}'\nlets Ray only see devices 1 and 3.\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(NPUActor pid=52420) NPU IDs: [0]\n(NPUActor pid=52420) ASCEND_RT_VISIBLE_DEVICES: 0\n(npu_task pid=51830) NPU IDs: [1]\n(npu_task pid=51830) ASCEND_RT_VISIBLE_DEVICES: 1\n\n\n\n    # Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()': cannot unpack non-iterable NoneType object\nError in finding '# Create a TensorFlow session. TensorFlow restricts itself to use the\n    # GPUs specified by the CUDA_VISIBLE_DEVICES environment variable.\n    tf.Session()\n\n\nFractional Accelerators#\nRay supports fractional resource requirements\nso multiple tasks and actors can share the same accelerator.\n\n\n\nNvidia GPU\nray.init(num_cpus=4, num_gpus=1)\n\n@ray.remote(num_gpus=0.25)\ndef f():\n    import time': cannot unpack non-iterable NoneType object\nError in finding 'time.sleep(1)\n\n# The four tasks created here can execute concurrently\n# and share the same NPU.\nray.get([f.remote() for _ in range(4)])\n\n\n\n@ray.remote(num_gpus=0.5)\nclass FractionalGPUActor:\n    def ping(self):\n        print(\"GPU id: {}\".format(ray.get_runtime_context().get_accelerator_ids()[\"GPU\"]))': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(FractionalGPUActor pid=57417) GPU id: [0]\n(FractionalGPUActor pid=57416) GPU id: [0]\n(FractionalGPUActor pid=57418) GPU id: [1]\n\n\n\n    # This task allocates memory on the GPU and then never release it.\n    tf.Session()\n\n\n\n@ray.remote(num_gpus=1, accelerator_type=NVIDIA_TESLA_V100)\ndef train(data):\n    return \"This function was run on a node with a Tesla V100 GPU\"\n\nray.get(train.remote(1))': cannot unpack non-iterable NoneType object\nError in finding '{'image': array([[[[...]]]], dtype=uint8)}\n...\n{'image': array([[[[...]]]], dtype=uint8)}\n\n\n\n\n\npandas\nimport ray\n\nds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n\nfor batch in ds.iter_torch_batches(batch_size=2):\n    print(batch)\n\n\n{'image': tensor([[[[...]]]], dtype=torch.uint8)}\n...\n{'image': tensor([[[[...]]]], dtype=torch.uint8)}\n\n\n\n\n\nTensorFlow\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '{'image': array([[[[...]]]], dtype=uint8)}\n...\n{'image': array([[[[...]]]], dtype=uint8)}\n\n\n\n\n\npandas\nimport ray\n\nds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n\nfor batch in ds.iter_torch_batches(batch_size=2):\n    print(batch)\n\n\n{'image': tensor([[[[...]]]], dtype=torch.uint8)}\n...\n{'image': tensor([[[[...]]]], dtype=torch.uint8)}\n\n\n\n\n\nTensorFlow\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'For more information on working with batches, see\nTransforming batches and\nInspecting batches.\n\nTip\nTo configure local_shuffle_buffer_size, choose the smallest value that achieves\nsufficient randomness. Higher values result in more randomness at the cost of slower\niteration. See Local shuffle when iterating over batches\non how to diagnose slowdowns.\n\n\n\n\nNumPy\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '{'image': array([[[[...]]]], dtype=uint8)}\n...\n{'image': array([[[[...]]]], dtype=uint8)}\n\n\n\n\n\npandas\nimport ray\n\nds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n\nfor batch in ds.iter_torch_batches(batch_size=2):\n    print(batch)\n\n\n{'image': tensor([[[[...]]]], dtype=torch.uint8)}\n...\n{'image': tensor([[[[...]]]], dtype=torch.uint8)}\n\n\n\n\n\nTensorFlow\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'For more information on working with batches, see\nTransforming batches and\nInspecting batches.\n\nTip\nTo configure local_shuffle_buffer_size, choose the smallest value that achieves\nsufficient randomness. Higher values result in more randomness at the cost of slower\niteration. See Local shuffle when iterating over batches\non how to diagnose slowdowns.\n\n\n\n\nNumPy\nimport ray': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '{'image': array([[[[...]]]], dtype=uint8)}\n...\n{'image': array([[[[...]]]], dtype=uint8)}\n\n\n\n\n\npandas\nimport ray\n\nds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor batch in ds.iter_batches(\n    batch_size=2,\n    batch_format=\"pandas\",\n    local_shuffle_buffer_size=250,\n):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(\n    batch_size=2,\n    batch_format=\"pandas\",\n    local_shuffle_buffer_size=250,\n):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\nfor batch in ds.iter_torch_batches(\n    batch_size=2,\n    local_shuffle_buffer_size=250,\n):\n    print(batch)': cannot unpack non-iterable NoneType object\nError in finding 'Better approach:\n# Don't need ray.get here.\nrollout_obj_ref = generate_rollout.remote()\n# Rollout object is passed by reference.\nreduced = ray.get(reduce.remote(rollout_obj_ref))\n\n\n\nAnti-pattern: Calling ray.get in a loop harms parallelism\nAnti-pattern: Processing results in submission order using ray.get increases runtime': cannot unpack non-iterable NoneType object\nError in finding '...\n\n% serve run fake:app\n\n...\n\n# In another terminal window:\n% curl localhost:8000\n[email\u00a0protected]\n\n\nThis tutorial explains how to package and serve this code inside a custom Docker image.\n\nRUN pip install Faker==18.13.0': cannot unpack non-iterable NoneType object\nError in finding '...\n\n% serve run fake:app\n\n...\n\n# In another terminal window:\n% curl localhost:8000\n[email\u00a0protected]\n\n\nThis tutorial explains how to package and serve this code inside a custom Docker image.\n\nRUN pip install Faker==18.13.0': cannot unpack non-iterable NoneType object\nError in finding '...\n\n% serve run fake:app\n\n...\n\n# In another terminal window:\n% curl localhost:8000\n[email\u00a0protected]\n\n\nThis tutorial explains how to package and serve this code inside a custom Docker image.\n\nRUN pip install Faker==18.13.0': cannot unpack non-iterable NoneType object\nError in finding 'RUN pip install Faker==18.13.0\n\n# Set the working dir for the container to /serve_app\nWORKDIR /serve_app\n\n# Copies the local `fake.py` file into the WORKDIR\nCOPY fake.py /serve_app/fake.py\n\n\nUsing custom Docker images in KubeRay#\nRun these custom Docker images in KubeRay by adding them to the RayService config. Make the following changes:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '...\n\n% serve run fake:app\n\n...\n\n# In another terminal window:\n% curl localhost:8000\n[email\u00a0protected]\n\n\nThis tutorial explains how to package and serve this code inside a custom Docker image.\n\nRUN pip install Faker==18.13.0': cannot unpack non-iterable NoneType object\nError in finding 'RUN pip install Faker==18.13.0\n\n# Set the working dir for the container to /serve_app\nWORKDIR /serve_app\n\n# Copies the local `fake.py` file into the WORKDIR\nCOPY fake.py /serve_app/fake.py\n\n\nUsing custom Docker images in KubeRay#\nRun these custom Docker images in KubeRay by adding them to the RayService config. Make the following changes:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm_config.AlgorithmConfig#\n\n\nfrom ray.rllib.algorithms.ppo import PPOConfig\nfrom ray import tune\n# In combination with a tune.grid_search:\nconfig = PPOConfig()\nconfig.training(lr=tune.grid_search([0.01, 0.001]))\n# Use `to_dict()` method to get the legacy plain python config dict\n# for usage with `tune.Tuner().fit()`.\ntune.Tuner(\"PPO\", param_space=config.to_dict())': cannot unpack non-iterable NoneType object\nError in finding 'Warning\nRay does not permit dynamic updates of resource capacities after Ray has been started on a node.\n\nHowever, you can always override that by manually specifying the quantities of pre-defined resources and adding custom resources.\nThere are several ways to do that depending on how you start the Ray cluster:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Warning\nRay does not permit dynamic updates of resource capacities after Ray has been started on a node.\n\nHowever, you can always override that by manually specifying the quantities of pre-defined resources and adding custom resources.\nThere are several ways to do that depending on how you start the Ray cluster:': cannot unpack non-iterable NoneType object\nError in finding 'Warning\nRay does not permit dynamic updates of resource capacities after Ray has been started on a node.\n\nHowever, you can always override that by manually specifying the quantities of pre-defined resources and adding custom resources.\nThere are several ways to do that depending on how you start the Ray cluster:': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nWhen to use Autoscaling?\nAutoscaling can reduce workload costs, but adds node launch overheads and can be tricky to configure.\nWe recommend starting with non-autoscaling clusters if you\u2019re new to Ray.\n\nNote\nIf max_workers is modified at runtime, the autoscaler will immediately remove nodes until this constraint\nis satisfied. This may disrupt running workloads.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nWhen to use Autoscaling?\nAutoscaling can reduce workload costs, but adds node launch overheads and can be tricky to configure.\nWe recommend starting with non-autoscaling clusters if you\u2019re new to Ray.\n\nNote\nIf max_workers is modified at runtime, the autoscaler will immediately remove nodes until this constraint\nis satisfied. This may disrupt running workloads.': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nWhen to use Autoscaling?\nAutoscaling can reduce workload costs, but adds node launch overheads and can be tricky to configure.\nWe recommend starting with non-autoscaling clusters if you\u2019re new to Ray.\n\nNote\nIf max_workers is modified at runtime, the autoscaler will immediately remove nodes until this constraint\nis satisfied. This may disrupt running workloads.': cannot unpack non-iterable NoneType object\nError in finding 'Note\nIf max_workers is modified at runtime, the autoscaler will immediately remove nodes until this constraint\nis satisfied. This may disrupt running workloads.\n\n\n\nProgrammatic Scaling#\nFor more information on programmatic access to the autoscaler, see the Programmatic Cluster Scaling Guide.': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.restore_from_path#\n\n\nNote that the self.METADATA_FILE_NAME file is not required to restore the state.\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.restore_from_path#\n\n\nNote that the self.METADATA_FILE_NAME file is not required to restore the state.\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.\n\nbackoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.\n\nbackoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.\n\nbackoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'Others\n\nDeleteCluster - Deletion policy to delete the RayCluster custom resource, and its Pods, on job completion.\nDeleteWorkers - Deletion policy to delete only the worker Pods on job completion.\nDeleteSelf - Deletion policy to delete the RayJob custom resource (and all associated resources) on job completion.\nDeleteNone - Deletion policy to delete no resources on job completion.': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.\n\nbackoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'Others\n\nDeleteCluster - Deletion policy to delete the RayCluster custom resource, and its Pods, on job completion.\nDeleteWorkers - Deletion policy to delete only the worker Pods on job completion.\nDeleteSelf - Deletion policy to delete the RayJob custom resource (and all associated resources) on job completion.\nDeleteNone - Deletion policy to delete no resources on job completion.': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.\n\nbackoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Others\n\nDeleteCluster - Deletion policy to delete the RayCluster custom resource, and its Pods, on job completion.\nDeleteWorkers - Deletion policy to delete only the worker Pods on job completion.\nDeleteSelf - Deletion policy to delete the RayJob custom resource (and all associated resources) on job completion.\nDeleteNone - Deletion policy to delete no resources on job completion.': cannot unpack non-iterable NoneType object\nError in finding 'SUCCEEDED\n\n\n\n\n\n\nkubectl get rayjobs.ray.io rayjob-sample -o jsonpath='{.status.jobDeploymentStatus}'\n\n\n\n\nComplete\n\n\n\n\nStep 5: Check the output of the Ray job#\n\n\nkubectl logs -l=job-name=rayjob-sample': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.\n\nbackoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'Others\n\nDeleteCluster - Deletion policy to delete the RayCluster custom resource, and its Pods, on job completion.\nDeleteWorkers - Deletion policy to delete only the worker Pods on job completion.\nDeleteSelf - Deletion policy to delete the RayJob custom resource (and all associated resources) on job completion.\nDeleteNone - Deletion policy to delete no resources on job completion.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'SUCCEEDED\n\n\n\n\n\n\nkubectl get rayjobs.ray.io rayjob-sample -o jsonpath='{.status.jobDeploymentStatus}'\n\n\n\n\nComplete\n\n\n\n\nStep 5: Check the output of the Ray job#\n\n\nkubectl logs -l=job-name=rayjob-sample\n\n\n\n\n\n\nThe Python script sample_code.py used by entrypoint is a simple Ray script that executes a counter\u2019s increment function 5 times.\n\n\nStep 6: Delete the RayJob#': cannot unpack non-iterable NoneType object\nError in finding 'Ray job configuration\n\n\n\n\nSee Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.\n\nbackoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'Others\n\nDeleteCluster - Deletion policy to delete the RayCluster custom resource, and its Pods, on job completion.\nDeleteWorkers - Deletion policy to delete only the worker Pods on job completion.\nDeleteSelf - Deletion policy to delete the RayJob custom resource (and all associated resources) on job completion.\nDeleteNone - Deletion policy to delete no resources on job completion.': cannot unpack non-iterable NoneType object\nError in finding 'SUCCEEDED\n\n\n\n\n\n\nkubectl get rayjobs.ray.io rayjob-sample -o jsonpath='{.status.jobDeploymentStatus}'\n\n\n\n\nComplete\n\n\n\n\nStep 5: Check the output of the Ray job#\n\n\nkubectl logs -l=job-name=rayjob-sample\n\n\n\n\n\n\nThe Python script sample_code.py used by entrypoint is a simple Ray script that executes a counter\u2019s increment function 5 times.\n\n\nStep 6: Delete the RayJob#': cannot unpack non-iterable NoneType object\nError in finding 'Step 7: Create a RayJob with shutdownAfterJobFinishes set to true#\n\n\nkubectl apply -f https://raw.githubusercontent.com/ray-project/kuberay/v1.3.0/ray-operator/config/samples/ray-job.shutdown.yaml\n\n\n\n\nStep 8: Check the RayJob status#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl apply -f https://raw.githubusercontent.com/ray-project/kuberay/v1.3.0/ray-operator/config/samples/ray-job.shutdown.yaml\n\n\n\n\nStep 8: Check the RayJob status#\n\n\n# Wait until `jobStatus` is `SUCCEEDED` and `jobDeploymentStatus` is `Complete`.\nkubectl get rayjobs.ray.io rayjob-sample-shutdown -o jsonpath='{.status.jobDeploymentStatus}'\n\n\n\n\nComplete': cannot unpack non-iterable NoneType object\nError in finding 'Last saved checkpoint#\nUse Result.checkpoint to retrieve the\nlast checkpoint.\nprint(\"Last checkpoint:\", result.checkpoint)\n\nwith result.checkpoint.as_directory() as tmpdir:\n    # Load model from directory\n    ...\n\n\n\n# Get checkpoint with minimal loss\nbest_checkpoint = min(\n    result.best_checkpoints, key=lambda checkpoint: checkpoint[1][\"loss\"]\n)[0]': cannot unpack non-iterable NoneType object\nError in finding 'Last saved checkpoint#\nUse Result.checkpoint to retrieve the\nlast checkpoint.\nprint(\"Last checkpoint:\", result.checkpoint)\n\nwith result.checkpoint.as_directory() as tmpdir:\n    # Load model from directory\n    ...\n\n\n\n# Get checkpoint with minimal loss\nbest_checkpoint = min(\n    result.best_checkpoints, key=lambda checkpoint: checkpoint[1][\"loss\"]\n)[0]': cannot unpack non-iterable NoneType object\nError in finding '# Get checkpoint with minimal loss\nbest_checkpoint = min(\n    result.best_checkpoints, key=lambda checkpoint: checkpoint[1][\"loss\"]\n)[0]\n\nwith best_checkpoint.as_directory() as tmpdir:\n    # Load model from directory\n    ...\n\n\n\nSee also\nSee Saving and Loading Checkpoints for more information on checkpointing.\n\n\n\nprint(f\"Results location (fs, path) = ({result_filesystem}, {result_path})\")': cannot unpack non-iterable NoneType object\nError in finding 'See also\nSee Saving and Loading Checkpoints for more information on checkpointing.\n\n\n\nprint(f\"Results location (fs, path) = ({result_filesystem}, {result_path})\")\n\n\n\n\nViewing Errors#\nIf an error occurred during training,\nResult.error will be set and contain the exception\nthat was raised.\nif result.error:\n    assert isinstance(result.error, Exception)\n\n    print(\"Got exception:\", result.error)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Design Principles#\n\n\n\nOnly one library is used \u2013 showing that you can pick and choose and do not need to replace all of your ML infrastructure to use Ray.\nYou can use one of Ray\u2019s many deployment modes to launch and manage Ray clusters and Ray applications.\nRay AI libraries can read data from external storage systems such as Amazon S3 / Google Cloud Storage, as well as store results there.': cannot unpack non-iterable NoneType object\nError in finding 'Design Principles#\n\n\n\nOnly one library is used \u2013 showing that you can pick and choose and do not need to replace all of your ML infrastructure to use Ray.\nYou can use one of Ray\u2019s many deployment modes to launch and manage Ray clusters and Ray applications.\nRay AI libraries can read data from external storage systems such as Amazon S3 / Google Cloud Storage, as well as store results there.': cannot unpack non-iterable NoneType object\nError in finding 'Design Principles#\n\n\n\nOnly one library is used \u2013 showing that you can pick and choose and do not need to replace all of your ML infrastructure to use Ray.\nYou can use one of Ray\u2019s many deployment modes to launch and manage Ray clusters and Ray applications.\nRay AI libraries can read data from external storage systems such as Amazon S3 / Google Cloud Storage, as well as store results there.': cannot unpack non-iterable NoneType object\nError in finding 'The mobilenet.py file needs tensorflow as a dependency. Hence, the YAML file uses rayproject/ray-ml image instead of rayproject/ray image.\nThe request parsing function starlette.requests.form() needs python-multipart, so the YAML file includes python-multipart in the runtime environment.\n\n\n\n# Forward the port for Ray Serve service\nkubectl port-forward svc/rayservice-mobilenet-serve-svc 8000': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n    .map_batches(drop_nas, batch_format=\"pandas\")\n)\n\n\n\ndef fn(batch: pd.DataFrame) -> pd.DataFrame:\n    # modify batch\n    batch = ...\n\n    # return batch\n    return batch': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n    .map_batches(drop_nas, batch_format=\"pandas\")\n)\n\n\n\ndef fn(batch: pd.DataFrame) -> pd.DataFrame:\n    # modify batch\n    batch = ...\n\n    # return batch\n    return batch': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n    .map_batches(drop_nas, batch_format=\"pandas\")\n)\n\n\n\ndef fn(batch: pd.DataFrame) -> pd.DataFrame:\n    # modify batch\n    batch = ...\n\n    # return batch\n    return batch': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ctx = ray.data.DataContext().get_current()\n\n# By default, this is set to False.\nctx.execution_options.preserve_order = True\n\n\n\n\n\n\nCPU\nfrom typing import Dict\nimport numpy as np\nimport torch\nimport ray\n\nclass TorchPredictor:\n\n    def __init__(self):\n        self.model = torch.nn.Identity()\n        self.model.eval()': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'VM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>\n\n\nThe dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\nError in finding 'VM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>\n\n\nThe dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\nError in finding 'VM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>\n\n\nThe dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.': cannot unpack non-iterable NoneType object\nError in finding 'Configure these settings using the RAY_GRAFANA_HOST, RAY_PROMETHEUS_HOST, RAY_PROMETHEUS_NAME, and RAY_GRAFANA_IFRAME_HOST environment variables when you start the Ray Clusters.\n\nFor example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\nError in finding 'VM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>\n\n\nThe dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.': cannot unpack non-iterable NoneType object\nError in finding 'Configure these settings using the RAY_GRAFANA_HOST, RAY_PROMETHEUS_HOST, RAY_PROMETHEUS_NAME, and RAY_GRAFANA_IFRAME_HOST environment variables when you start the Ray Clusters.\n\nFor example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.': cannot unpack non-iterable NoneType object\nError in finding 'For example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.\n\nIf all the environment variables are set properly, you should see time-series metrics in Ray Dashboard.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'VM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>\n\n\nThe dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.': cannot unpack non-iterable NoneType object\nError in finding 'For more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.': cannot unpack non-iterable NoneType object\nError in finding 'Configure these settings using the RAY_GRAFANA_HOST, RAY_PROMETHEUS_HOST, RAY_PROMETHEUS_NAME, and RAY_GRAFANA_IFRAME_HOST environment variables when you start the Ray Clusters.\n\nFor example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.': cannot unpack non-iterable NoneType object\nError in finding 'For example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.\n\nIf all the environment variables are set properly, you should see time-series metrics in Ray Dashboard.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\nError in finding 'VM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>\n\n\nThe dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.': cannot unpack non-iterable NoneType object\nError in finding 'Configure these settings using the RAY_GRAFANA_HOST, RAY_PROMETHEUS_HOST, RAY_PROMETHEUS_NAME, and RAY_GRAFANA_IFRAME_HOST environment variables when you start the Ray Clusters.\n\nFor example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.': cannot unpack non-iterable NoneType object\nError in finding 'For example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.\n\nIf all the environment variables are set properly, you should see time-series metrics in Ray Dashboard.': cannot unpack non-iterable NoneType object\nError in finding '{\"Header1\": \"Value1\", \"Header2\": \"Value2\"}\n[[\"Header1\", \"Value1\"], [\"Header2\", \"Value2\"], [\"Header2\", \"Value3\"]]\n\n\n\n\nWhen both Grafana and the Ray Cluster are on the same Kubernetes cluster, set RAY_GRAFANA_HOST to the external URL of the Grafana ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\nError in finding 'VM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>\n\n\nThe dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.': cannot unpack non-iterable NoneType object\nError in finding 'For more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.': cannot unpack non-iterable NoneType object\nError in finding 'Configure these settings using the RAY_GRAFANA_HOST, RAY_PROMETHEUS_HOST, RAY_PROMETHEUS_NAME, and RAY_GRAFANA_IFRAME_HOST environment variables when you start the Ray Clusters.\n\nFor example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.': cannot unpack non-iterable NoneType object\nError in finding 'For example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.\n\nIf all the environment variables are set properly, you should see time-series metrics in Ray Dashboard.': cannot unpack non-iterable NoneType object\nError in finding '{\"Header1\": \"Value1\", \"Header2\": \"Value2\"}\n[[\"Header1\", \"Value1\"], [\"Header2\", \"Value2\"], [\"Header2\", \"Value3\"]]\n\n\n\n\nWhen both Grafana and the Ray Cluster are on the same Kubernetes cluster, set RAY_GRAFANA_HOST to the external URL of the Grafana ingress.': cannot unpack non-iterable NoneType object\nError in finding 'Troubleshooting#\n\nDashboard message: either Prometheus or Grafana server is not detected#\nIf you have followed the instructions above to set up everything, run the connection checks below in your browser:\n\n\n\nGetting an error that says RAY_GRAFANA_HOST is not setup#\nIf you have set up Grafana , check that:': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.\n\n\n\n\nVM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>': cannot unpack non-iterable NoneType object\nError in finding 'VM Cluster Launcher\nPort forwarding \nYou can securely port-forward local traffic to the dashboard with the ray dashboard command.\n$ ray dashboard [-p <port, 8265 by default>] <cluster config file>\n\n\nThe dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.\n\nFor more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.': cannot unpack non-iterable NoneType object\nError in finding 'For more information about configuring network access to a Ray cluster on Kubernetes, see the networking notes.\n\n\n\n\n\nWarning\nThe Ray Dashboard provides read and write access to the Ray Cluster. The reverse proxy must provide authentication or network ingress controls to prevent unauthorized access to the Cluster.': cannot unpack non-iterable NoneType object\nError in finding 'Configure these settings using the RAY_GRAFANA_HOST, RAY_PROMETHEUS_HOST, RAY_PROMETHEUS_NAME, and RAY_GRAFANA_IFRAME_HOST environment variables when you start the Ray Clusters.\n\nFor example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For example, if the IP of the head node is 55.66.77.88 and Grafana is hosted on port 3000. Set the value to RAY_GRAFANA_HOST=http://55.66.77.88:3000.\n\nIf all the environment variables are set properly, you should see time-series metrics in Ray Dashboard.': cannot unpack non-iterable NoneType object\nError in finding '{\"Header1\": \"Value1\", \"Header2\": \"Value2\"}\n[[\"Header1\", \"Value1\"], [\"Header2\", \"Value2\"], [\"Header2\", \"Value3\"]]\n\n\n\n\nWhen both Grafana and the Ray Cluster are on the same Kubernetes cluster, set RAY_GRAFANA_HOST to the external URL of the Grafana ingress.': cannot unpack non-iterable NoneType object\nError in finding 'Troubleshooting#\n\nDashboard message: either Prometheus or Grafana server is not detected#\nIf you have followed the instructions above to set up everything, run the connection checks below in your browser:\n\n\n\nGetting an error that says RAY_GRAFANA_HOST is not setup#\nIf you have set up Grafana , check that:': cannot unpack non-iterable NoneType object\nError in finding 'Certificate Authority (CA error)#\nYou may see a CA error if your Grafana instance is hosted behind HTTPS. Contact the Grafana service owner to properly enable HTTPS traffic.\n\n\n\n\n\n\nYou can query these metrics from the Prometheus or Grafana UI. Find instructions above for how to set these tools up.': cannot unpack non-iterable NoneType object\nError in finding 'Ray Use Cases#\n\n\nThis page indexes common Ray use cases for scaling ML.\nIt contains highlighted references to blogs, examples, and tutorials also located\nelsewhere in the Ray documentation.\n\n\n\n\n\n\n \n\nExplore LLMs and Gen AI examples': cannot unpack non-iterable NoneType object\nError in finding 'Ray Use Cases#\n\n\nThis page indexes common Ray use cases for scaling ML.\nIt contains highlighted references to blogs, examples, and tutorials also located\nelsewhere in the Ray documentation.\n\n\n\n\n\n\n \n\nExplore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples': cannot unpack non-iterable NoneType object\nError in finding 'Ray Use Cases#\n\n\nThis page indexes common Ray use cases for scaling ML.\nIt contains highlighted references to blogs, examples, and tutorials also located\nelsewhere in the Ray documentation.\n\n\n\n\n\n\n \n\nExplore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#\n\n\nLearn more about model serving with the following resources.': cannot unpack non-iterable NoneType object\nError in finding 'Ray Use Cases#\n\n\nThis page indexes common Ray use cases for scaling ML.\nIt contains highlighted references to blogs, examples, and tutorials also located\nelsewhere in the Ray documentation.\n\n\n\n\n\n\n \n\nExplore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#\n\n\nLearn more about model serving with the following resources.': cannot unpack non-iterable NoneType object\nError in finding 'Ray Use Cases#\n\n\nThis page indexes common Ray use cases for scaling ML.\nIt contains highlighted references to blogs, examples, and tutorials also located\nelsewhere in the Ray documentation.\n\n\n\n\n\n\n \n\nExplore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#\n\n\nLearn more about model serving with the following resources.': cannot unpack non-iterable NoneType object\nError in finding 'Ray Use Cases#\n\n\nThis page indexes common Ray use cases for scaling ML.\nIt contains highlighted references to blogs, examples, and tutorials also located\nelsewhere in the Ray documentation.\n\n\n\n\n\n\n \n\nExplore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#\n\n\nLearn more about model serving with the following resources.': cannot unpack non-iterable NoneType object\nError in finding 'Ray Use Cases#\n\n\nThis page indexes common Ray use cases for scaling ML.\nIt contains highlighted references to blogs, examples, and tutorials also located\nelsewhere in the Ray documentation.\n\n\n\n\n\n\n \n\nExplore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#\n\n\nLearn more about model serving with the following resources.': cannot unpack non-iterable NoneType object\nError in finding 'How to run distributed training with Tune?#\nTo tune distributed training jobs, you can use Ray Tune with Ray Train. Ray Tune will run multiple trials in parallel, with each trial running distributed training with Ray Train.\nFor more details, see Ray Train Hyperparameter Optimization.\n\nconfig = TuneConfig(\n    # ...\n    num_samples=100,\n    max_concurrent_trials=10,\n)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Subdirectories inside a checkpoint dir, like env_runner/, hint at a subcomponent\u2019s own checkpoint data.\nFor example, an Algorithm always also saves its\nEnvRunner state and LearnerGroup state.\n\n\nSee RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.': cannot unpack non-iterable NoneType object\nError in finding 'Subdirectories inside a checkpoint dir, like env_runner/, hint at a subcomponent\u2019s own checkpoint data.\nFor example, an Algorithm always also saves its\nEnvRunner state and LearnerGroup state.\n\n\nSee RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.': cannot unpack non-iterable NoneType object\nError in finding 'Subdirectories inside a checkpoint dir, like env_runner/, hint at a subcomponent\u2019s own checkpoint data.\nFor example, an Algorithm always also saves its\nEnvRunner state and LearnerGroup state.\n\n\nSee RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.': cannot unpack non-iterable NoneType object\nError in finding 'Subdirectories inside a checkpoint dir, like env_runner/, hint at a subcomponent\u2019s own checkpoint data.\nFor example, an Algorithm always also saves its\nEnvRunner state and LearnerGroup state.\n\n\nSee RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.': cannot unpack non-iterable NoneType object\nError in finding 'Subdirectories inside a checkpoint dir, like env_runner/, hint at a subcomponent\u2019s own checkpoint data.\nFor example, an Algorithm always also saves its\nEnvRunner state and LearnerGroup state.\n\n\nSee RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\nNote\nThe env_runner/ subcomponent currently doesn\u2019t hold a copy of the RLModule\ncheckpoint because it\u2019s already saved under learner/. The Ray team is working on resolving\nthis issue, probably through soft-linking to avoid duplicate files and unnecessary disk usage.': cannot unpack non-iterable NoneType object\nError in finding 'Subdirectories inside a checkpoint dir, like env_runner/, hint at a subcomponent\u2019s own checkpoint data.\nFor example, an Algorithm always also saves its\nEnvRunner state and LearnerGroup state.\n\n\nSee RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\nNote\nThe env_runner/ subcomponent currently doesn\u2019t hold a copy of the RLModule\ncheckpoint because it\u2019s already saved under learner/. The Ray team is working on resolving\nthis issue, probably through soft-linking to avoid duplicate files and unnecessary disk usage.': cannot unpack non-iterable NoneType object\nError in finding 'Hint\nBecause your RLModule is also a\nPyTorch Module,\nyou can easily export your model to ONNX, IREE,\nor other deployment-friendly formats.\n\n\n\n\n\nContinue training\nWhen using RLlib directly, meaning without Ray Tune, the problem of loading a state\ninto a running instance is straightforward:\n# Recreate the preceding PPO from the config.\nnew_ppo = config.build()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Subdirectories inside a checkpoint dir, like env_runner/, hint at a subcomponent\u2019s own checkpoint data.\nFor example, an Algorithm always also saves its\nEnvRunner state and LearnerGroup state.\n\n\nSee RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\nNote\nThe env_runner/ subcomponent currently doesn\u2019t hold a copy of the RLModule\ncheckpoint because it\u2019s already saved under learner/. The Ray team is working on resolving\nthis issue, probably through soft-linking to avoid duplicate files and unnecessary disk usage.': cannot unpack non-iterable NoneType object\nError in finding 'Hint\nBecause your RLModule is also a\nPyTorch Module,\nyou can easily export your model to ONNX, IREE,\nor other deployment-friendly formats.\n\n\n\n\n\nContinue training\nWhen using RLlib directly, meaning without Ray Tune, the problem of loading a state\ninto a running instance is straightforward:\n# Recreate the preceding PPO from the config.\nnew_ppo = config.build()': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}\n\nalgo = BayesOptSearch(random_search_steps=4)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}\n\nalgo = BayesOptSearch(random_search_steps=4)': cannot unpack non-iterable NoneType object\nError in finding 'Note that in the example above we  tell Tune to stop after 20 training iterations.\nThis way of stopping trials with explicit rules is useful, but in many cases we can do even better with\nschedulers.\n\n# Create HyperBand scheduler and minimize the score\nhyperband = HyperBandScheduler(metric=\"score\", mode=\"max\")\n\nconfig = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 1)}': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}\n\nalgo = BayesOptSearch(random_search_steps=4)': cannot unpack non-iterable NoneType object\nError in finding 'Note that in the example above we  tell Tune to stop after 20 training iterations.\nThis way of stopping trials with explicit rules is useful, but in many cases we can do even better with\nschedulers.\n\n# Create HyperBand scheduler and minimize the score\nhyperband = HyperBandScheduler(metric=\"score\", mode=\"max\")\n\nconfig = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 1)}': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}\n\nalgo = BayesOptSearch(random_search_steps=4)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note that in the example above we  tell Tune to stop after 20 training iterations.\nThis way of stopping trials with explicit rules is useful, but in many cases we can do even better with\nschedulers.\n\n# Create HyperBand scheduler and minimize the score\nhyperband = HyperBandScheduler(metric=\"score\", mode=\"max\")\n\nconfig = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 1)}': cannot unpack non-iterable NoneType object\nError in finding 'Population Based Bandits\nYes\nNot Compatible\nBasic Example, PPO example\n\n\n\nLearn more about trial schedulers in the scheduler API documentation.\n\n\nThis object can also retrieve all training runs as dataframes,\nallowing you to do ad-hoc data analysis over your results.\n# Get a dataframe with the last results for each trial\ndf_results = results.get_dataframe()': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s Ray Core?#\n\nNote\nRay has introduced an experimental API for high-performance workloads that\u2019s\nespecially well suited for applications using multiple GPUs.\nSee Ray Compiled Graph for more details.\n\n\nGetting Started#\nTo get started, install Ray using pip install -U ray. For additional installation options, see Installing Ray.\nThe first step is to import and initialize Ray:\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.remove_policy#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.remove_policy#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Or connecting to a Mars on Ray runtime which is already initialized:\nimport mars\nmars.new_ray_session('http://<web_ip>:<ui_port>')\n# perform computation\n\n\nRefer to Mars on Ray: https://mars-project.readthedocs.io/en/latest/installation/ray.html#mars-ray for more information.': cannot unpack non-iterable NoneType object\nError in finding 'Now, given that you provide your Comet API key and your project name like so:\n\n\napi_key = \"YOUR_COMET_API_KEY\"\nproject_name = \"YOUR_COMET_PROJECT_NAME\"\n\n\n\n\nYou can add a Comet logger by specifying the callbacks argument in your RunConfig() accordingly:\n\n\nfrom ray.air.integrations.comet import CometLoggerCallback\n\nprint(results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Now, given that you provide your Comet API key and your project name like so:\n\n\napi_key = \"YOUR_COMET_API_KEY\"\nproject_name = \"YOUR_COMET_PROJECT_NAME\"\n\n\n\n\nYou can add a Comet logger by specifying the callbacks argument in your RunConfig() accordingly:\n\n\nfrom ray.air.integrations.comet import CometLoggerCallback\n\nprint(results.get_best_result().config)': cannot unpack non-iterable NoneType object\nError in finding 'from ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)\n\nFor more information please see https://docs.ray.io/en/master/ray-air/key-concepts.html#session\n\n  DeprecationWarning,\n\nTrial name                status    loc              mean      sd  iter  total time (s)   loss': cannot unpack non-iterable NoneType object\nError in finding 'Now, given that you provide your Comet API key and your project name like so:\n\n\napi_key = \"YOUR_COMET_API_KEY\"\nproject_name = \"YOUR_COMET_PROJECT_NAME\"\n\n\n\n\nYou can add a Comet logger by specifying the callbacks argument in your RunConfig() accordingly:\n\n\nfrom ray.air.integrations.comet import CometLoggerCallback\n\nprint(results.get_best_result().config)': cannot unpack non-iterable NoneType object\nError in finding 'from ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)\n\nFor more information please see https://docs.ray.io/en/master/ray-air/key-concepts.html#session\n\n  DeprecationWarning,\n\nTrial name                status    loc              mean      sd  iter  total time (s)   loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Now, given that you provide your Comet API key and your project name like so:\n\n\napi_key = \"YOUR_COMET_API_KEY\"\nproject_name = \"YOUR_COMET_PROJECT_NAME\"\n\n\n\n\nYou can add a Comet logger by specifying the callbacks argument in your RunConfig() accordingly:\n\n\nfrom ray.air.integrations.comet import CometLoggerCallback\n\nprint(results.get_best_result().config)': cannot unpack non-iterable NoneType object\nError in finding 'from ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)\n\nFor more information please see https://docs.ray.io/en/master/ray-air/key-concepts.html#session\n\n  DeprecationWarning,\n\nTrial name                status    loc              mean      sd  iter  total time (s)   loss': cannot unpack non-iterable NoneType object\nError in finding 'Now, given that you provide your Comet API key and your project name like so:\n\n\napi_key = \"YOUR_COMET_API_KEY\"\nproject_name = \"YOUR_COMET_PROJECT_NAME\"\n\n\n\n\nYou can add a Comet logger by specifying the callbacks argument in your RunConfig() accordingly:\n\n\nfrom ray.air.integrations.comet import CometLoggerCallback\n\nprint(results.get_best_result().config)': cannot unpack non-iterable NoneType object\nError in finding 'from ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)\n\nFor more information please see https://docs.ray.io/en/master/ray-air/key-concepts.html#session\n\n  DeprecationWarning,\n\nTrial name                status    loc              mean      sd  iter  total time (s)   loss': cannot unpack non-iterable NoneType object\nError in finding '{'mean': 1, 'sd': 0.40575843135279466}\n\n\n\n\n\n\nTune Comet Logger#\nRay Tune offers an integration with Comet through the CometLoggerCallback,\nwhich automatically logs metrics and parameters reported to Tune to the Comet UI.\nClick on the following dropdown to see this callback API in detail:\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Now, given that you provide your Comet API key and your project name like so:\n\n\napi_key = \"YOUR_COMET_API_KEY\"\nproject_name = \"YOUR_COMET_PROJECT_NAME\"\n\n\n\n\nYou can add a Comet logger by specifying the callbacks argument in your RunConfig() accordingly:\n\n\nfrom ray.air.integrations.comet import CometLoggerCallback\n\nprint(results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)\n\nFor more information please see https://docs.ray.io/en/master/ray-air/key-concepts.html#session\n\n  DeprecationWarning,\n\nTrial name                status    loc              mean      sd  iter  total time (s)   loss': cannot unpack non-iterable NoneType object\nError in finding '{'mean': 1, 'sd': 0.40575843135279466}\n\n\n\n\n\n\nTune Comet Logger#\nRay Tune offers an integration with Comet through the CometLoggerCallback,\nwhich automatically logs metrics and parameters reported to Tune to the Comet UI.\nClick on the following dropdown to see this callback API in detail:\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\nError in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path\n\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers.hb_bohb import HyperBandForBOHB\nfrom ray.tune.search.bohb import TuneBOHB\nimport ConfigSpace as CS': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere are the hyperparameters found to minimize the mean loss of the defined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Best hyperparameters found were:  {'steps': 100, 'width': 3.7250202606878258, 'height': -57.97769618290691, 'activation': 'tanh'}\n\n\n\n\n\nOptional: Passing the search space via the TuneBOHB algorithm#\nWe can define the hyperparameter search space using ConfigSpace,\nwhich is the format accepted by BOHB.\n\n\n\n\nactivation, Type: Categorical, Choices: {relu, tanh}, Default: relu': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name        status    loc            activation    height  steps    width    loss  iter  total time (s)  ts  iterations  neg_mean_loss\n\n\n\n\nHere again are the hyperparameters found to minimize the mean loss of the\ndefined objective.\n\n\nprint(\"Best hyperparameters found were: \", results.get_best_result().config)': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\nError in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'Client (JSON Object)\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n# Example response:\n# {\n#   \"colors\": [\n#     \"red\",\n#     \"blue\",\n#     \"green\"\n#   ]\n# }': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\nError in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Client (JSON Object)\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n# Example response:\n# {\n#   \"colors\": [\n#     \"red\",\n#     \"blue\",\n#     \"green\"\n#   ]\n# }': cannot unpack non-iterable NoneType object\nError in finding 'Vision Language Models#\nFor multimodal models that can process both text and images:\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\nError in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Client (JSON Object)\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n# Example response:\n# {\n#   \"colors\": [\n#     \"red\",\n#     \"blue\",\n#     \"green\"\n#   ]\n# }': cannot unpack non-iterable NoneType object\nError in finding 'Vision Language Models#\nFor multimodal models that can process both text and images:\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI': cannot unpack non-iterable NoneType object\nError in finding '# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'Client (JSON Object)\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n# Example response:\n# {\n#   \"colors\": [\n#     \"red\",\n#     \"blue\",\n#     \"green\"\n#   ]\n# }': cannot unpack non-iterable NoneType object\nError in finding 'Vision Language Models#\nFor multimodal models that can process both text and images:\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\nError in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Client (JSON Object)\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n# Example response:\n# {\n#   \"colors\": [\n#     \"red\",\n#     \"blue\",\n#     \"green\"\n#   ]\n# }': cannot unpack non-iterable NoneType object\nError in finding 'Vision Language Models#\nFor multimodal models that can process both text and images:\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'Client (JSON Object)\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n# Example response:\n# {\n#   \"colors\": [\n#     \"red\",\n#     \"blue\",\n#     \"green\"\n#   ]\n# }': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Vision Language Models#\nFor multimodal models that can process both text and images:\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI': cannot unpack non-iterable NoneType object\nError in finding '# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\nError in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'Client (JSON Object)\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n# Example response:\n# {\n#   \"colors\": [\n#     \"red\",\n#     \"blue\",\n#     \"green\"\n#   ]\n# }': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Vision Language Models#\nFor multimodal models that can process both text and images:\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI': cannot unpack non-iterable NoneType object\nError in finding '# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'Quickstart Examples#\n\nDeployment through LLMRouter#\n\n\n\nBuilder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nBind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'To deploy using either configuration file:\nserve run config.yaml\n\n\n\n\nGenerate config files#\nRay Serve LLM provides a CLI to generate config files for your deployment:\npython -m ray.serve.llm.gen_config\n\n\nAdvanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.': cannot unpack non-iterable NoneType object\nError in finding 'Server\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Client (JSON Object)\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n# Example response:\n# {\n#   \"colors\": [\n#     \"red\",\n#     \"blue\",\n#     \"green\"\n#   ]\n# }': cannot unpack non-iterable NoneType object\nError in finding 'Vision Language Models#\nFor multimodal models that can process both text and images:\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\n# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Build and deploy the model\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)\n\n\n\n\n\nClient\nfrom openai import OpenAI\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\nfor chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Deploy the application\ndeployment = LLMServer.as_deployment(llm_config.get_serve_options(name_prefix=\"vLLM:\")).bind(llm_config)\nllm_app = LLMRouter.as_deployment().bind([deployment])\nserve.run(llm_app, blocking=True)\n\n\n\n\n\n\n\nUsage Data Collection#\nWe collect usage data to improve Ray Serve LLM.\nWe collect data about the following features and attributes:': cannot unpack non-iterable NoneType object\nError in finding 'Getting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time\n\n@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'Getting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time\n\n@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Raises an exception\ntry:\n    ray.get(next(gen))\nexcept ValueError as e:\n    print(f\"Exception is raised when i == 1 as expected {e}\")\n\n\n\n\nGenerator from Actor Tasks#\nThe Ray generator is compatible with all actor execution models. It seamlessly works with\nregular actors, async actors, and threaded actors.\n@ray.remote\nclass Actor:\n    def f(self):\n        for i in range(5):\n            yield i': cannot unpack non-iterable NoneType object\nError in finding 'Getting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time\n\n@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding '# Raises an exception\ntry:\n    ray.get(next(gen))\nexcept ValueError as e:\n    print(f\"Exception is raised when i == 1 as expected {e}\")\n\n\n\n\nGenerator from Actor Tasks#\nThe Ray generator is compatible with all actor execution models. It seamlessly works with\nregular actors, async actors, and threaded actors.\n@ray.remote\nclass Actor:\n    def f(self):\n        for i in range(5):\n            yield i': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(\n    my_trainable,\n    run_config=tune.RunConfig(stop={\"training_iteration\": 10, \"mean_accuracy\": 0.8}),\n)\nresult_grid = tuner.fit()\n\n\n\n\n\n\ndef stop_fn(trial_id: str, result: dict) -> bool:\n    return result[\"mean_accuracy\"] >= 0.8 or result[\"training_iteration\"] >= 10\n\n\ntuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'tuner = tune.Tuner(\n    my_trainable,\n    run_config=tune.RunConfig(stop={\"training_iteration\": 10, \"mean_accuracy\": 0.8}),\n)\nresult_grid = tuner.fit()\n\n\n\n\n\n\ndef stop_fn(trial_id: str, result: dict) -> bool:\n    return result[\"mean_accuracy\"] >= 0.8 or result[\"training_iteration\"] >= 10\n\n\ntuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(\n    my_trainable,\n    # Stop a trial after it's run for more than 5 seconds.\n    run_config=tune.RunConfig(stop={\"time_total_s\": 5}),\n)\nresult_grid = tuner.fit()\n\n\n\n\n\nStop the experiment with a timeout#\nUse the TuneConfig(time_budget_s) configuration to tell Tune to stop the experiment after time_budget_s seconds.\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(\n    my_trainable,\n    run_config=tune.RunConfig(stop={\"training_iteration\": 10, \"mean_accuracy\": 0.8}),\n)\nresult_grid = tuner.fit()\n\n\n\n\n\n\ndef stop_fn(trial_id: str, result: dict) -> bool:\n    return result[\"mean_accuracy\"] >= 0.8 or result[\"training_iteration\"] >= 10\n\n\ntuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(\n    my_trainable,\n    # Stop a trial after it's run for more than 5 seconds.\n    run_config=tune.RunConfig(stop={\"time_total_s\": 5}),\n)\nresult_grid = tuner.fit()\n\n\n\n\n\nStop the experiment with a timeout#\nUse the TuneConfig(time_budget_s) configuration to tell Tune to stop the experiment after time_budget_s seconds.\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(\n    my_failing_trainable,\n    param_space={\"should_fail\": tune.grid_search([True, False])},\n    run_config=tune.RunConfig(failure_config=tune.FailureConfig(fail_fast=True)),\n)\nresult_grid = tuner.fit()\n\n\nThis is useful when you are debugging a Tune experiment with many trials.\n\n\nscheduler = AsyncHyperBandScheduler(time_attr=\"training_iteration\")': cannot unpack non-iterable NoneType object\nError in finding 'This is useful when you are debugging a Tune experiment with many trials.\n\n\nscheduler = AsyncHyperBandScheduler(time_attr=\"training_iteration\")\n\ntuner = tune.Tuner(\n    my_trainable,\n    run_config=tune.RunConfig(stop={\"training_iteration\": 10}),\n    tune_config=tune.TuneConfig(\n        scheduler=scheduler, num_samples=2, metric=\"mean_accuracy\", mode=\"max\"\n    ),\n)\nresult_grid = tuner.fit()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'search_alg2 = HyperOptSearch()\nsearch_alg2.restore(\"./my-checkpoint.pkl\")\n\ntuner_2 = tune.Tuner(\n    train_fn,\n    tune_config=tune.TuneConfig(search_alg=search_alg2)\n)\nresults_2 = tuner_2.fit()\n\nsearch_alg2 = HyperOptSearch()\nsearch_alg2.restore_from_dir(\n  os.path.join(\"~/my_results\", \"my-experiment-1\")\n)': cannot unpack non-iterable NoneType object\nError in finding 'search_alg2 = HyperOptSearch()\nsearch_alg2.restore(\"./my-checkpoint.pkl\")\n\ntuner_2 = tune.Tuner(\n    train_fn,\n    tune_config=tune.TuneConfig(search_alg=search_alg2)\n)\nresults_2 = tuner_2.fit()\n\nsearch_alg2 = HyperOptSearch()\nsearch_alg2.restore_from_dir(\n  os.path.join(\"~/my_results\", \"my-experiment-1\")\n)': cannot unpack non-iterable NoneType object\nError in finding 'basic_variant.BasicVariantGenerator\nUses Tune's variant generation for resolving variables.\n\n\n\n\n\nAx (tune.search.ax.AxSearch)#\n\n\nax.AxSearch\nUses Ax to optimize hyperparameters.\n\n\n\n\n\nBayesian Optimization (tune.search.bayesopt.BayesOptSearch)#\n\n\nbayesopt.BayesOptSearch\nUses bayesian-optimization/BayesianOptimization to optimize hyperparameters.\n\n\n\n\n\n\nSee the BOHB paper for more details.': cannot unpack non-iterable NoneType object\nError in finding 'bayesopt.BayesOptSearch\nUses bayesian-optimization/BayesianOptimization to optimize hyperparameters.\n\n\n\n\n\n\nSee the BOHB paper for more details.\n\n\nbohb.TuneBOHB\nBOHB suggestion component.\n\n\n\n\n\nHEBO (tune.search.hebo.HEBOSearch)#\n\n\nhebo.HEBOSearch\nUses HEBO (Heteroscedastic Evolutionary Bayesian Optimization) to optimize hyperparameters.\n\n\n\n\n\nHyperOpt (tune.search.hyperopt.HyperOptSearch)#': cannot unpack non-iterable NoneType object\nError in finding 'search_alg2 = HyperOptSearch()\nsearch_alg2.restore(\"./my-checkpoint.pkl\")\n\ntuner_2 = tune.Tuner(\n    train_fn,\n    tune_config=tune.TuneConfig(search_alg=search_alg2)\n)\nresults_2 = tuner_2.fit()\n\nsearch_alg2 = HyperOptSearch()\nsearch_alg2.restore_from_dir(\n  os.path.join(\"~/my_results\", \"my-experiment-1\")\n)': cannot unpack non-iterable NoneType object\nError in finding 'basic_variant.BasicVariantGenerator\nUses Tune's variant generation for resolving variables.\n\n\n\n\n\nAx (tune.search.ax.AxSearch)#\n\n\nax.AxSearch\nUses Ax to optimize hyperparameters.\n\n\n\n\n\nBayesian Optimization (tune.search.bayesopt.BayesOptSearch)#\n\n\nbayesopt.BayesOptSearch\nUses bayesian-optimization/BayesianOptimization to optimize hyperparameters.\n\n\n\n\n\n\nSee the BOHB paper for more details.': cannot unpack non-iterable NoneType object\nError in finding 'bayesopt.BayesOptSearch\nUses bayesian-optimization/BayesianOptimization to optimize hyperparameters.\n\n\n\n\n\n\nSee the BOHB paper for more details.\n\n\nbohb.TuneBOHB\nBOHB suggestion component.\n\n\n\n\n\nHEBO (tune.search.hebo.HEBOSearch)#\n\n\nhebo.HEBOSearch\nUses HEBO (Heteroscedastic Evolutionary Bayesian Optimization) to optimize hyperparameters.\n\n\n\n\n\nHyperOpt (tune.search.hyperopt.HyperOptSearch)#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'optuna.OptunaSearch\nA wrapper around Optuna to provide trial suggestions.\n\n\n\n\n\nZOOpt (tune.search.zoopt.ZOOptSearch)#\n\n\nzoopt.ZOOptSearch\nA wrapper around ZOOpt to provide trial suggestions.\n\n\n\n\n\nWarning\nIt is recommended to not use Repeater with a TrialScheduler.\nEarly termination can negatively affect the average reported metric.': cannot unpack non-iterable NoneType object\nError in finding 'Deploy Compositions of Models#\nWith this guide, you can:\n\nCompose multiple deployments containing ML models or business logic into a single application\nIndependently scale and configure each of your ML models and business logic steps\n\n\nNote\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Deploy Compositions of Models#\nWith this guide, you can:\n\nCompose multiple deployments containing ML models or business logic into a single application\nIndependently scale and configure each of your ML models and business logic steps\n\n\nNote\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Deploy Compositions of Models#\nWith this guide, you can:\n\nCompose multiple deployments containing ML models or business logic into a single application\nIndependently scale and configure each of your ML models and business logic steps\n\n\nNote\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Deploy Compositions of Models#\nWith this guide, you can:\n\nCompose multiple deployments containing ML models or business logic into a single application\nIndependently scale and configure each of your ML models and business logic steps\n\n\nNote\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'While the serve run command is running, open a separate terminal window and run the script:\n$ python hello_client.py\n\nHola Dora\n\n\n\n\n\nAn Adder deployment that increments a value by its configured increment.\nA Multiplier deployment that multiplies a value by its configured multiple.\nAn Ingress deployment that chains calls to the adder and multiplier together and returns the final response.': cannot unpack non-iterable NoneType object\nError in finding 'Deploy Compositions of Models#\nWith this guide, you can:\n\nCompose multiple deployments containing ML models or business logic into a single application\nIndependently scale and configure each of your ML models and business logic steps\n\n\nNote\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'While the serve run command is running, open a separate terminal window and run the script:\n$ python hello_client.py\n\nHola Dora\n\n\n\n\n\nAn Adder deployment that increments a value by its configured increment.\nA Multiplier deployment that multiplies a value by its configured multiple.\nAn Ingress deployment that chains calls to the adder and multiplier together and returns the final response.': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass Ingress:\n    def __init__(self, adder: DeploymentHandle, multiplier: DeploymentHandle):\n        self._adder = adder\n        self._multiplier = multiplier\n\n\napp = Ingress.bind(\n    Adder.bind(increment=1),\n    Multiplier.bind(multiple=2),\n)\n\nhandle: DeploymentHandle = serve.run(app)\nresponse = handle.remote(5)\nassert response.result() == 12, \"(5 + 1) * 2 = 12\"': cannot unpack non-iterable NoneType object\nError in finding 'Deploy Compositions of Models#\nWith this guide, you can:\n\nCompose multiple deployments containing ML models or business logic into a single application\nIndependently scale and configure each of your ML models and business logic steps\n\n\nNote\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'While the serve run command is running, open a separate terminal window and run the script:\n$ python hello_client.py\n\nHola Dora\n\n\n\n\n\nAn Adder deployment that increments a value by its configured increment.\nA Multiplier deployment that multiplies a value by its configured multiple.\nAn Ingress deployment that chains calls to the adder and multiplier together and returns the final response.': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass Ingress:\n    def __init__(self, adder: DeploymentHandle, multiplier: DeploymentHandle):\n        self._adder = adder\n        self._multiplier = multiplier\n\n\napp = Ingress.bind(\n    Adder.bind(increment=1),\n    Multiplier.bind(multiple=2),\n)\n\nhandle: DeploymentHandle = serve.run(app)\nresponse = handle.remote(5)\nassert response.result() == 12, \"(5 + 1) * 2 = 12\"': cannot unpack non-iterable NoneType object\nError in finding 'handle: DeploymentHandle = serve.run(app)\nresponse = handle.remote(5)\nassert response.result() == 12, \"(5 + 1) * 2 = 12\"\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle, DeploymentResponseGenerator\n\n\n@serve.deployment\nclass Streamer:\n    def __call__(self, limit: int) -> Generator[int, None, None]:\n        for i in range(limit):\n            yield i': cannot unpack non-iterable NoneType object\nError in finding 'Deploy Compositions of Models#\nWith this guide, you can:\n\nCompose multiple deployments containing ML models or business logic into a single application\nIndependently scale and configure each of your ML models and business logic steps\n\n\nNote\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'While the serve run command is running, open a separate terminal window and run the script:\n$ python hello_client.py\n\nHola Dora\n\n\n\n\n\nAn Adder deployment that increments a value by its configured increment.\nA Multiplier deployment that multiplies a value by its configured multiple.\nAn Ingress deployment that chains calls to the adder and multiplier together and returns the final response.': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass Ingress:\n    def __init__(self, adder: DeploymentHandle, multiplier: DeploymentHandle):\n        self._adder = adder\n        self._multiplier = multiplier\n\n\napp = Ingress.bind(\n    Adder.bind(increment=1),\n    Multiplier.bind(multiple=2),\n)\n\nhandle: DeploymentHandle = serve.run(app)\nresponse = handle.remote(5)\nassert response.result() == 12, \"(5 + 1) * 2 = 12\"': cannot unpack non-iterable NoneType object\nError in finding 'handle: DeploymentHandle = serve.run(app)\nresponse = handle.remote(5)\nassert response.result() == 12, \"(5 + 1) * 2 = 12\"\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle, DeploymentResponseGenerator\n\n\n@serve.deployment\nclass Streamer:\n    def __call__(self, limit: int) -> Generator[int, None, None]:\n        for i in range(limit):\n            yield i': cannot unpack non-iterable NoneType object\nError in finding 'Running Basic Tune Experiments#\nThe most common way to use Tune is also the simplest: as a parallel experiment runner. If you can define experiment trials in a Python function, you can use Tune to run hundreds to thousands of independent trial instances in a cluster. Tune manages trial execution, status reporting, and fault tolerance.\n\nNUM_MODELS = 100': cannot unpack non-iterable NoneType object\nError in finding 'Running Basic Tune Experiments#\nThe most common way to use Tune is also the simplest: as a parallel experiment runner. If you can define experiment trials in a Python function, you can use Tune to run hundreds to thousands of independent trial instances in a cluster. Tune manages trial execution, status reporting, and fault tolerance.\n\nNUM_MODELS = 100': cannot unpack non-iterable NoneType object\nError in finding 'Running Basic Tune Experiments#\nThe most common way to use Tune is also the simplest: as a parallel experiment runner. If you can define experiment trials in a Python function, you can use Tune to run hundreds to thousands of independent trial instances in a cluster. Tune manages trial execution, status reporting, and fault tolerance.\n\nNUM_MODELS = 100': cannot unpack non-iterable NoneType object\nError in finding 'Running Basic Tune Experiments#\nThe most common way to use Tune is also the simplest: as a parallel experiment runner. If you can define experiment trials in a Python function, you can use Tune to run hundreds to thousands of independent trial instances in a cluster. Tune manages trial execution, status reporting, and fault tolerance.\n\nNUM_MODELS = 100': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Basic Tune Experiments#\nThe most common way to use Tune is also the simplest: as a parallel experiment runner. If you can define experiment trials in a Python function, you can use Tune to run hundreds to thousands of independent trial instances in a cluster. Tune manages trial execution, status reporting, and fault tolerance.\n\nNUM_MODELS = 100': cannot unpack non-iterable NoneType object\nError in finding '# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding 'Running Basic Tune Experiments#\nThe most common way to use Tune is also the simplest: as a parallel experiment runner. If you can define experiment trials in a Python function, you can use Tune to run hundreds to thousands of independent trial instances in a cluster. Tune manages trial execution, status reporting, and fault tolerance.\n\nNUM_MODELS = 100': cannot unpack non-iterable NoneType object\nError in finding '# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding 'Running Basic Tune Experiments#\nThe most common way to use Tune is also the simplest: as a parallel experiment runner. If you can define experiment trials in a Python function, you can use Tune to run hundreds to thousands of independent trial instances in a cluster. Tune manages trial execution, status reporting, and fault tolerance.\n\nNUM_MODELS = 100': cannot unpack non-iterable NoneType object\nError in finding '# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).\n\n\n\n\nCompared to using Ray tasks, Tune offers the following additional functionality:': cannot unpack non-iterable NoneType object\nError in finding '2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).\n\n\n\n\nCompared to using Ray tasks, Tune offers the following additional functionality:\n\nStatus reporting and tracking, including integrations and callbacks to common monitoring tools.\nCheckpointing of trials for fine-grained fault-tolerance.\nGang scheduling of multi-worker trials.': cannot unpack non-iterable NoneType object\nError in finding 'This user guide covers how to configure and use these fault tolerance mechanisms.\n\n# Tries to recover a run up to this many times.\nfailure_config = ray.train.FailureConfig(max_failures=2)\n\n# No limit on the number of retries.\nfailure_config = ray.train.FailureConfig(max_failures=-1)': cannot unpack non-iterable NoneType object\nError in finding 'This user guide covers how to configure and use these fault tolerance mechanisms.\n\n# Tries to recover a run up to this many times.\nfailure_config = ray.train.FailureConfig(max_failures=2)\n\n# No limit on the number of retries.\nfailure_config = ray.train.FailureConfig(max_failures=-1)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'This user guide covers how to configure and use these fault tolerance mechanisms.\n\n# Tries to recover a run up to this many times.\nfailure_config = ray.train.FailureConfig(max_failures=2)\n\n# No limit on the number of retries.\nfailure_config = ray.train.FailureConfig(max_failures=-1)': cannot unpack non-iterable NoneType object\nError in finding 'This user guide covers how to configure and use these fault tolerance mechanisms.\n\n# Tries to recover a run up to this many times.\nfailure_config = ray.train.FailureConfig(max_failures=2)\n\n# No limit on the number of retries.\nfailure_config = ray.train.FailureConfig(max_failures=-1)': cannot unpack non-iterable NoneType object\nError in finding 'if __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--storage_path\", type=str, required=True)\n    parser.add_argument(\"--run_name\", type=str, required=True)\n    args = parser.parse_args()\n\n\nThen, the entrypoint script can be launched with the following command:\npython entrypoint.py --storage_path s3://my_bucket/ --run_name unique_run_id=da823d5': cannot unpack non-iterable NoneType object\nError in finding 'This user guide covers how to configure and use these fault tolerance mechanisms.\n\n# Tries to recover a run up to this many times.\nfailure_config = ray.train.FailureConfig(max_failures=2)\n\n# No limit on the number of retries.\nfailure_config = ray.train.FailureConfig(max_failures=-1)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'if __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--storage_path\", type=str, required=True)\n    parser.add_argument(\"--run_name\", type=str, required=True)\n    args = parser.parse_args()\n\n\nThen, the entrypoint script can be launched with the following command:\npython entrypoint.py --storage_path s3://my_bucket/ --run_name unique_run_id=da823d5': cannot unpack non-iterable NoneType object\nError in finding 'Fault Tolerance API Deprecations#\n\n<Framework>Trainer.restore API Deprecation#\nThe <Framework>Trainer.restore and <Framework>Trainer.can_restore APIs are deprecated as of Ray 2.43 and will be removed in a future release.\n\nMotivation#\nThis API change provides several benefits:\n\n\n\nMigration Steps#\nTo migrate from the old <Framework>Trainer.restore API to the new pattern:': cannot unpack non-iterable NoneType object\nError in finding 'Motivation#\nThis API change provides several benefits:\n\n\n\nMigration Steps#\nTo migrate from the old <Framework>Trainer.restore API to the new pattern:\n\nEnable the environment variable RAY_TRAIN_V2_ENABLED=1.\nReplace <Framework>Trainer.restore with the regular <Framework>Trainer constructor, making sure to pass in the same storage_path and name as the previous run.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\nError in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                      date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\nError in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Progress\n\n\nTrial name                      date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\nError in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                      date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                      date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                      date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}\n\n\n\n\nThis completes our Tune and Wandb walk-through.\nIn the following sections you can find more details on the API of the Tune-Wandb integration.\n\n\nTune Wandb API Reference#\n\nWandbLoggerCallback#\n\nfrom ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                      date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}\n\n\n\n\nThis completes our Tune and Wandb walk-through.\nIn the following sections you can find more details on the API of the Tune-Wandb integration.\n\n\nTune Wandb API Reference#\n\nWandbLoggerCallback#\n\nfrom ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\n\nWandb\u2019s group, run_id and run_name are automatically selected\nby Tune, but can be overwritten by filling out the respective configuration\nvalues.\nPlease see here for all other valid configuration settings:\nhttps://docs.wandb.ai/library/init\nPublicAPI (alpha): This API is in alpha and may change before becoming stable.\n\n\n\nsetup_wandb#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Progress\n\n\nTrial name                      date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}\n\n\n\n\nThis completes our Tune and Wandb walk-through.\nIn the following sections you can find more details on the API of the Tune-Wandb integration.\n\n\nTune Wandb API Reference#\n\nWandbLoggerCallback#\n\nfrom ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\n\n\n\nWandb\u2019s group, run_id and run_name are automatically selected\nby Tune, but can be overwritten by filling out the respective configuration\nvalues.\nPlease see here for all other valid configuration settings:\nhttps://docs.wandb.ai/library/init\nPublicAPI (alpha): This API is in alpha and may change before becoming stable.\n\n\n\nsetup_wandb#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nWeights & Biases (Wandb) is a tool for experiment\ntracking, model optimizaton, and dataset versioning. It is very popular\nin the machine learning and data science community for its superb visualization\ntools.\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\nTo use the setup_wandb utility, you simply call this function in your objective.\nNote that we also use wandb.log(...) to log the loss to Weights & Biases as a dictionary.\nOtherwise, this version of our objective is identical to its original.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n\nFinally, you can also define a class-based Tune Trainable by using the setup_wandb in the setup() method and storing the run object as an attribute. Please note that with the class trainable, you have to pass the trial id, name, and group separately:': cannot unpack non-iterable NoneType object\nError in finding 'def save_checkpoint(self, checkpoint_dir: str):\n        pass\n\n    def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n\nRunning Tune with this WandbTrainable works exactly the same as with the function API.\nThe below tune_trainable function differs from tune_decorated above only in the first argument we pass to\nTuner():\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\nError in finding 'Tune Status\n\n\nCurrent time:2022-11-02 16:03:13\nRunning for: 00:00:27.28        \nMemory:      10.8/16.0 GiB      \n\n\n\n\n\nSystem Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'System Info\n      Using FIFO scheduling algorithm.Resources requested: 0/16 CPUs, 0/0 GPUs, 0.0/3.44 GiB heap, 0.0/1.72 GiB objects\n    \n\n\n\nTrial Status\n\n\nTrial name                      status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\nTrial name                      date               done  episodes_total  experiment_id                   experiment_tag    hostname              iterations_since_restore    lossnode_ip    pid  time_since_restore  time_this_iter_s  time_total_s  timestamp  timesteps_since_restoretimesteps_total    training_iterationtrial_id     warmup_time\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial Status\n\n\nTrial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}\n\n\n\n\nThis completes our Tune and Wandb walk-through.\nIn the following sections you can find more details on the API of the Tune-Wandb integration.\n\n\nTune Wandb API Reference#\n\nWandbLoggerCallback#\n\nfrom ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\n\nWandb\u2019s group, run_id and run_name are automatically selected\nby Tune, but can be overwritten by filling out the respective configuration\nvalues.\nPlease see here for all other valid configuration settings:\nhttps://docs.wandb.ai/library/init\nPublicAPI (alpha): This API is in alpha and may change before becoming stable.\n\n\n\nsetup_wandb#\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'setup_wandb#\n\nParameters:\n\n\n\nExample\nfrom ray.air.integrations.wandb import setup_wandb\n\ndef training_loop(config):\n    wandb = setup_wandb(config)\n    # ...\n    wandb.log({\"loss\": 0.123})\n\n\nPublicAPI (alpha): This API is in alpha and may change before becoming stable.': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\nError in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\nError in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\nError in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'responses = stub.Streaming(request=request, metadata=metadata)\nfor response in responses:\n    print(f\"greeting: {response.greeting}\")  # greeting: n: Hello foo from bar\n    print(f\"num: {response.num}\")  # num: 60 + n\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\nError in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\nError in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'responses = stub.Streaming(request=request, metadata=metadata)\nfor response in responses:\n    print(f\"greeting: {response.greeting}\")  # greeting: n: Hello foo from bar\n    print(f\"num: {response.num}\")  # num: 60 + n\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\nError in finding 'responses = stub.Streaming(request=request, metadata=metadata)\nfor response in responses:\n    print(f\"greeting: {response.greeting}\")  # greeting: n: Hello foo from bar\n    print(f\"num: {response.num}\")  # num: 60 + n\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'probabilities = torch.nn.functional.softmax(output[0], dim=0)\n        return self.process_model_outputs(probabilities)\n\n        return ImageClass(\n            classes=image_classes,\n            probabilities=image_probabilities,\n        )': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\nError in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'responses = stub.Streaming(request=request, metadata=metadata)\nfor response in responses:\n    print(f\"greeting: {response.greeting}\")  # greeting: n: Hello foo from bar\n    print(f\"num: {response.num}\")  # num: 60 + n\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle': cannot unpack non-iterable NoneType object\nError in finding 'probabilities = torch.nn.functional.softmax(output[0], dim=0)\n        return self.process_model_outputs(probabilities)\n\n        return ImageClass(\n            classes=image_classes,\n            probabilities=image_probabilities,\n        )': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass ImageDownloader:\n    def __call__(self, image_url: str):\n        image_bytes = requests.get(image_url).content\n        return Image.open(BytesIO(image_bytes)).convert(\"RGB\")\n\n    def __call__(self, image: Image):\n        input_tensor = self.preprocess(image)\n        return input_tensor.unsqueeze(0)  # create a mini-batch as expected by the model': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\nError in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\nError in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'responses = stub.Streaming(request=request, metadata=metadata)\nfor response in responses:\n    print(f\"greeting: {response.greeting}\")  # greeting: n: Hello foo from bar\n    print(f\"num: {response.num}\")  # num: 60 + n\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle': cannot unpack non-iterable NoneType object\nError in finding 'probabilities = torch.nn.functional.softmax(output[0], dim=0)\n        return self.process_model_outputs(probabilities)\n\n        return ImageClass(\n            classes=image_classes,\n            probabilities=image_probabilities,\n        )': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass ImageDownloader:\n    def __call__(self, image_url: str):\n        image_bytes = requests.get(image_url).content\n        return Image.open(BytesIO(image_bytes)).convert(\"RGB\")\n\n    def __call__(self, image: Image):\n        input_tensor = self.preprocess(image)\n        return input_tensor.unsqueeze(0)  # create a mini-batch as expected by the model': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\nError in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\nError in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'responses = stub.Streaming(request=request, metadata=metadata)\nfor response in responses:\n    print(f\"greeting: {response.greeting}\")  # greeting: n: Hello foo from bar\n    print(f\"num: {response.num}\")  # num: 60 + n\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle': cannot unpack non-iterable NoneType object\nError in finding 'probabilities = torch.nn.functional.softmax(output[0], dim=0)\n        return self.process_model_outputs(probabilities)\n\n        return ImageClass(\n            classes=image_classes,\n            probabilities=image_probabilities,\n        )': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass ImageDownloader:\n    def __call__(self, image_url: str):\n        image_bytes = requests.get(image_url).content\n        return Image.open(BytesIO(image_bytes)).convert(\"RGB\")\n\n    def __call__(self, image: Image):\n        input_tensor = self.preprocess(image)\n        return input_tensor.unsqueeze(0)  # create a mini-batch as expected by the model': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple\n\n\n@serve.deployment\nclass GrpcDeployment:\n    def __init__(self):\n        self.nums = {}': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\nError in finding 'responses = stub.Streaming(request=request, metadata=metadata)\nfor response in responses:\n    print(f\"greeting: {response.greeting}\")  # greeting: n: Hello foo from bar\n    print(f\"num: {response.num}\")  # num: 60 + n\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'probabilities = torch.nn.functional.softmax(output[0], dim=0)\n        return self.process_model_outputs(probabilities)\n\n        return ImageClass(\n            classes=image_classes,\n            probabilities=image_probabilities,\n        )': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass ImageDownloader:\n    def __call__(self, image_url: str):\n        image_bytes = requests.get(image_url).content\n        return Image.open(BytesIO(image_bytes)).convert(\"RGB\")\n\n    def __call__(self, image: Image):\n        input_tensor = self.preprocess(image)\n        return input_tensor.unsqueeze(0)  # create a mini-batch as expected by the model': cannot unpack non-iterable NoneType object\nError in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple\n\n\n@serve.deployment\nclass GrpcDeployment:\n    def __init__(self):\n        self.nums = {}': cannot unpack non-iterable NoneType object\nError in finding 'service ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}\n\n\nIt generates two files: user_defined_protos_pb2.py and\nuser_defined_protos_pb2_grpc.py.\nFor more details on grpcio-tools see https://grpc.io/docs/languages/python/basics/#generating-client-and-server-code.': cannot unpack non-iterable NoneType object\nError in finding '- name: app2\n    route_prefix: /app2\n    import_path: test_deployment_v2:g2\n    runtime_env: {}\n\n\n# Start Serve with above config file.\nserve run config.yaml\n\n\n\n\n\nfrom typing import Generator\nfrom user_defined_protos_pb2 import (\n    UserDefinedMessage,\n    UserDefinedMessage2,\n    UserDefinedResponse,\n    UserDefinedResponse2,\n)\n\nimport ray\nfrom ray import serve': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'async def Multiplexing(\n        self, user_message: UserDefinedMessage2\n    ) -> UserDefinedResponse2:\n        model_id = serve.get_multiplexed_model_id()\n        model = await self.get_model(model_id)\n        user_response = UserDefinedResponse2(\n            greeting=f\"Method2 called model, {model}\",\n        )\n        return user_response\n\n            time.sleep(0.1)': cannot unpack non-iterable NoneType object\nError in finding 'Note\nroute_prefix is still a required field as of Ray 2.7.0 due to a shared code path with\nHTTP. Future releases will make it optional for gRPC.\n\n\n\n\nchannel = grpc.insecure_channel(\"localhost:9000\")\nstub = UserDefinedServiceStub(channel)\nrequest = UserDefinedMessage(name=\"foo\", num=30, origin=\"bar\")': cannot unpack non-iterable NoneType object\nError in finding 'responses = stub.Streaming(request=request, metadata=metadata)\nfor response in responses:\n    print(f\"greeting: {response.greeting}\")  # greeting: n: Hello foo from bar\n    print(f\"num: {response.num}\")  # num: 60 + n\n\n\n\nfrom ray import serve\nfrom ray.serve.handle import DeploymentHandle': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'probabilities = torch.nn.functional.softmax(output[0], dim=0)\n        return self.process_model_outputs(probabilities)\n\n        return ImageClass(\n            classes=image_classes,\n            probabilities=image_probabilities,\n        )': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass ImageDownloader:\n    def __call__(self, image_url: str):\n        image_bytes = requests.get(image_url).content\n        return Image.open(BytesIO(image_bytes)).convert(\"RGB\")\n\n    def __call__(self, image: Image):\n        input_tensor = self.preprocess(image)\n        return input_tensor.unsqueeze(0)  # create a mini-batch as expected by the model': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple\n\n\n@serve.deployment\nclass GrpcDeployment:\n    def __init__(self):\n        self.nums = {}': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve is a scalable model serving library for building online inference APIs.\nRay Serve is particularly well suited for model composition and many model serving, enabling you to build a complex inference service consisting of multiple ML models and business logic all in Python code.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Avoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist\n\n\n\n\nServe makes it easy to go from a laptop to a cluster. You can test your models (and your entire deployment graph) on your local machine before deploying it to production on a cluster. You don\u2019t need to know heavyweight Kubernetes concepts or cloud configurations to use Serve.\n\n\n\nML engineer': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Avoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist\n\n\n\n\nServe makes it easy to go from a laptop to a cluster. You can test your models (and your entire deployment graph) on your local machine before deploying it to production on a cluster. You don\u2019t need to know heavyweight Kubernetes concepts or cloud configurations to use Serve.\n\n\n\nML engineer': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\nServe helps you scale out your deployment and runs them reliably and efficiently to save costs. With Serve\u2019s first-class model composition API, you can combine models together with business logic and build end-to-end user-facing applications. Additionally, Serve runs natively on Kubernetes with minimal operation overhead.\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'Avoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist\n\n\n\n\nServe makes it easy to go from a laptop to a cluster. You can test your models (and your entire deployment graph) on your local machine before deploying it to production on a cluster. You don\u2019t need to know heavyweight Kubernetes concepts or cloud configurations to use Serve.\n\n\n\nML engineer': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ML engineer\n\n\n\n\nServe helps you scale out your deployment and runs them reliably and efficiently to save costs. With Serve\u2019s first-class model composition API, you can combine models together with business logic and build end-to-end user-facing applications. Additionally, Serve runs natively on Kubernetes with minimal operation overhead.\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer': cannot unpack non-iterable NoneType object\nError in finding 'ML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'Avoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist\n\n\n\n\nServe makes it easy to go from a laptop to a cluster. You can test your models (and your entire deployment graph) on your local machine before deploying it to production on a cluster. You don\u2019t need to know heavyweight Kubernetes concepts or cloud configurations to use Serve.\n\n\n\nML engineer': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\nServe helps you scale out your deployment and runs them reliably and efficiently to save costs. With Serve\u2019s first-class model composition API, you can combine models together with business logic and build end-to-end user-facing applications. Additionally, Serve runs natively on Kubernetes with minimal operation overhead.\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer': cannot unpack non-iterable NoneType object\nError in finding 'ML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'Avoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist\n\n\n\n\nServe makes it easy to go from a laptop to a cluster. You can test your models (and your entire deployment graph) on your local machine before deploying it to production on a cluster. You don\u2019t need to know heavyweight Kubernetes concepts or cloud configurations to use Serve.\n\n\n\nML engineer': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ML engineer\n\n\n\n\nServe helps you scale out your deployment and runs them reliably and efficiently to save costs. With Serve\u2019s first-class model composition API, you can combine models together with business logic and build end-to-end user-facing applications. Additionally, Serve runs natively on Kubernetes with minimal operation overhead.\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer': cannot unpack non-iterable NoneType object\nError in finding 'ML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI\n\n\n\n\n\nSeldon, KServe, Cortex': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"\n\n\nDefine a simple \u201chello world\u201d application, run it locally, and query it over HTTP.\nimport requests\nfrom starlette.requests import Request\nfrom typing import Dict\n\nfrom ray import serve': cannot unpack non-iterable NoneType object\nError in finding 'Why choose Serve?#\n\n\nBuild end-to-end ML-powered applications\n\n\n\n\n\nCombine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Avoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist\n\n\n\n\nServe makes it easy to go from a laptop to a cluster. You can test your models (and your entire deployment graph) on your local machine before deploying it to production on a cluster. You don\u2019t need to know heavyweight Kubernetes concepts or cloud configurations to use Serve.\n\n\n\nML engineer': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\nServe helps you scale out your deployment and runs them reliably and efficiently to save costs. With Serve\u2019s first-class model composition API, you can combine models together with business logic and build end-to-end user-facing applications. Additionally, Serve runs natively on Kubernetes with minimal operation overhead.\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer': cannot unpack non-iterable NoneType object\nError in finding 'ML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI\n\n\n\n\n\nSeldon, KServe, Cortex': cannot unpack non-iterable NoneType object\nError in finding 'BentoML, Comet.ml, MLflow\n\n\n\nWe truly believe Serve is unique as it gives you end-to-end control\nover your ML application while delivering scalability and high performance. To achieve\nServe\u2019s feature offerings with other tools, you would need to glue together multiple\nframeworks like Tensorflow Serving and SageMaker, or even roll your own\nmicro-batching component to improve throughput.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip 1: Fixing the resource quantity with ray.init(num_cpus=...)\nTip 2: Sharing the ray cluster across tests if possible\nTip 3: Create a mini-cluster with ray.cluster_utils.Cluster\nTip 4: Be careful when running tests in parallel\n\n\n\n\nTip 2: Sharing the ray cluster across tests if possible#\nIt is safest to start a new ray cluster for each test.\nimport unittest': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time\n\nimport gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time\n\nimport gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time\n\nimport gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time\n\nimport gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\n        xs: A list of observations\n        hs: A list of model hidden states per observation\n        dlogps: A list of gradients\n        drs: A list of rewards.\n\n        aprob, h = model.policy_forward(x)\n        # Sample an action.\n        action = 2 if np.random.uniform() < aprob else 3': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time\n\nimport gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\n        xs: A list of observations\n        hs: A list of model hidden states per observation\n        dlogps: A list of gradients\n        drs: A list of rewards.\n\n        aprob, h = model.policy_forward(x)\n        # Sample an action.\n        action = 2 if np.random.uniform() < aprob else 3': cannot unpack non-iterable NoneType object\nError in finding 'def zero_grads(grad_buffer):\n    \"\"\"Reset the batch gradient buffer.\"\"\"\n    for k, v in grad_buffer.items():\n        grad_buffer[k] = np.zeros_like(v)\n\n\n\n\n\n\nParallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()\n\n\n@ray.remote\nclass RolloutWorker(object):\n    def __init__(self):\n        self.env = gym.make(\"ale_py:ALE/Pong-v5\")': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time\n\nimport gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\n        xs: A list of observations\n        hs: A list of model hidden states per observation\n        dlogps: A list of gradients\n        drs: A list of rewards.\n\n        aprob, h = model.policy_forward(x)\n        # Sample an action.\n        action = 2 if np.random.uniform() < aprob else 3': cannot unpack non-iterable NoneType object\nError in finding 'def zero_grads(grad_buffer):\n    \"\"\"Reset the batch gradient buffer.\"\"\"\n    for k, v in grad_buffer.items():\n        grad_buffer[k] = np.zeros_like(v)\n\n\n\n\n\n\nParallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()\n\n\n@ray.remote\nclass RolloutWorker(object):\n    def __init__(self):\n        self.env = gym.make(\"ale_py:ALE/Pong-v5\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time\n\nimport gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\n        xs: A list of observations\n        hs: A list of model hidden states per observation\n        dlogps: A list of gradients\n        drs: A list of rewards.\n\n        aprob, h = model.policy_forward(x)\n        # Sample an action.\n        action = 2 if np.random.uniform() < aprob else 3': cannot unpack non-iterable NoneType object\nError in finding 'def zero_grads(grad_buffer):\n    \"\"\"Reset the batch gradient buffer.\"\"\"\n    for k, v in grad_buffer.items():\n        grad_buffer[k] = np.zeros_like(v)\n\n\n\n\n\n\nParallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()\n\n\n@ray.remote\nclass RolloutWorker(object):\n    def __init__(self):\n        self.env = gym.make(\"ale_py:ALE/Pong-v5\")': cannot unpack non-iterable NoneType object\nError in finding 'Stable#\nA stable component must be fully-supported over the lifetime of the major\nAPI version. Because users expect such stability from components marked stable,\nthere must be no breaking changes to these components within a major version\n(excluding extraordinary circumstances).\n\nDocstrings#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Docstrings#\n\nParameters:\n\nstability \u2013 One of {\u201cstable\u201d, \u201cbeta\u201d, \u201calpha\u201d}.\napi_group \u2013 Optional. Used only for doc rendering purpose. APIs in the same group\nwill be grouped together in the API doc pages.\n\n\n\nExamples\n>>> from ray.util.annotations import PublicAPI\n>>> @PublicAPI\n... def func(x):\n...     return x\n\n\n>>> @PublicAPI(stability=\"beta\")\n... def func(y):\n...     return y': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.replay_buffers.multi_agent_replay_buffer.MultiAgentReplayBuffer#\n\n\n__init__\nInitializes a MultiAgentReplayBuffer instance.\n\nadd\nAdds a batch to the appropriate policy's replay buffer.\n\napply\nCalls the given function with this Actor instance.\n\nget_host\nReturns the computer's network name.\n\nget_state\nReturns all local state.\n\nping\nPing the actor.': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.train#\n\n\nAlgorithm.train()#\nRuns one logical iteration of training.\nCalls step() internally. Subclasses should override step()\ninstead to return results.\nThis method automatically fills the following fields in the result:\n\n\nReturns:\nA dict that describes training progress.': cannot unpack non-iterable NoneType object\nError in finding 'Ray on Cloud VMs#\n\n\n\nSet up and configure Ray in public clouds\nDeploy applications and monitor your cluster\n\n\n\nLearn More#\nThe Ray docs present all the information you need to start running Ray workloads on VMs.\n\n\n\n\n\nGetting Started\n\n\nLearn how to start a Ray cluster and deploy Ray applications in the cloud.\n\n\nGet Started with Ray on Cloud VMs\n\n\n\n\n\n\nExamples': cannot unpack non-iterable NoneType object\nError in finding 'To use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col\n\n\n\nimport cupy as cp\n\n\n@ray.remote(num_gpus=1)\nclass Worker:\n   def __init__(self):\n       self.send = cp.ones((4, ), dtype=cp.float32)\n       self.recv = cp.zeros((4, ), dtype=cp.float32)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col\n\n\n\nimport cupy as cp\n\n\n@ray.remote(num_gpus=1)\nclass Worker:\n   def __init__(self):\n       self.send = cp.ones((4, ), dtype=cp.float32)\n       self.recv = cp.zeros((4, ), dtype=cp.float32)': cannot unpack non-iterable NoneType object\nError in finding 'Collective Communication#\nCheck the support matrix for the current status of supported collective calls and backends.\nNote that the current set of collective communication API are imperative, and exhibit the following behaviours:\n\nAn example of using ray.util.collective.allreduce is below:\nimport ray\nimport cupy\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col\n\n\n\nimport cupy as cp\n\n\n@ray.remote(num_gpus=1)\nclass Worker:\n   def __init__(self):\n       self.send = cp.ones((4, ), dtype=cp.float32)\n       self.recv = cp.zeros((4, ), dtype=cp.float32)': cannot unpack non-iterable NoneType object\nError in finding 'Collective Communication#\nCheck the support matrix for the current status of supported collective calls and backends.\nNote that the current set of collective communication API are imperative, and exhibit the following behaviours:\n\nAn example of using ray.util.collective.allreduce is below:\nimport ray\nimport cupy\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col\n\n\n\nimport cupy as cp\n\n\n@ray.remote(num_gpus=1)\nclass Worker:\n   def __init__(self):\n       self.send = cp.ones((4, ), dtype=cp.float32)\n       self.recv = cp.zeros((4, ), dtype=cp.float32)': cannot unpack non-iterable NoneType object\nError in finding 'Collective Communication#\nCheck the support matrix for the current status of supported collective calls and backends.\nNote that the current set of collective communication API are imperative, and exhibit the following behaviours:\n\nAn example of using ray.util.collective.allreduce is below:\nimport ray\nimport cupy\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Submitting and Merging a Contribution#\nThere are a couple steps to merge a contribution.\n\nFirst merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Submitting and Merging a Contribution#\nThere are a couple steps to merge a contribution.\n\nFirst merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'PR Review Process#\n\nFor contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#\n\nYour PRs will have assignees shortly. Assignees of PRs will be actively engaging with contributors to merge the PR.\nPlease actively ping assignees after you address your comments!': cannot unpack non-iterable NoneType object\nError in finding 'Submitting and Merging a Contribution#\nThere are a couple steps to merge a contribution.\n\nFirst merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'PR Review Process#\n\nFor contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#\n\nYour PRs will have assignees shortly. Assignees of PRs will be actively engaging with contributors to merge the PR.\nPlease actively ping assignees after you address your comments!': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Submitting and Merging a Contribution#\nThere are a couple steps to merge a contribution.\n\nFirst merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'PR Review Process#\n\nFor contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#\n\nYour PRs will have assignees shortly. Assignees of PRs will be actively engaging with contributors to merge the PR.\nPlease actively ping assignees after you address your comments!': cannot unpack non-iterable NoneType object\nError in finding 'Alternatively, you can also run one specific C++ test. You can use:\nbazel test $(bazel query 'kind(cc_test, ...)') --test_filter=ClientConnectionTest --test_output=streamed\n\n\n\n\n\n    Additional explanatory text can be added in paragraphs such as this one.\n    Do not introduce multi-line first sentences.\n\n    Examples:\n        .. doctest::': cannot unpack non-iterable NoneType object\nError in finding 'Submitting and Merging a Contribution#\nThere are a couple steps to merge a contribution.\n\nFirst merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'PR Review Process#\n\nFor contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#\n\nYour PRs will have assignees shortly. Assignees of PRs will be actively engaging with contributors to merge the PR.\nPlease actively ping assignees after you address your comments!': cannot unpack non-iterable NoneType object\nError in finding 'Alternatively, you can also run one specific C++ test. You can use:\nbazel test $(bazel query 'kind(cc_test, ...)') --test_filter=ClientConnectionTest --test_output=streamed\n\n\n\n\n\n    Additional explanatory text can be added in paragraphs such as this one.\n    Do not introduce multi-line first sentences.\n\n    Examples:\n        .. doctest::': cannot unpack non-iterable NoneType object\nError in finding 'If a CI build exception doesn\u2019t appear to be related to your change,\nplease visit this link to\ncheck recent tests known to be flaky.\n\n\nFor callback APIs, consider adding a **kwargs placeholder as a \u201cforward compatibility placeholder\u201d in case more args need to be passed to the callback in the future, e.g.:\ndef tune_user_callback(model, score, **future_kwargs):\n    pass': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Submitting and Merging a Contribution#\nThere are a couple steps to merge a contribution.\n\nFirst merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#\n\nFor contributors who are in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'PR Review Process#\n\nFor contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#\n\nYour PRs will have assignees shortly. Assignees of PRs will be actively engaging with contributors to merge the PR.\nPlease actively ping assignees after you address your comments!': cannot unpack non-iterable NoneType object\nError in finding 'Alternatively, you can also run one specific C++ test. You can use:\nbazel test $(bazel query 'kind(cc_test, ...)') --test_filter=ClientConnectionTest --test_output=streamed\n\n\n\n\n\n    Additional explanatory text can be added in paragraphs such as this one.\n    Do not introduce multi-line first sentences.\n\n    Examples:\n        .. doctest::': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'If a CI build exception doesn\u2019t appear to be related to your change,\nplease visit this link to\ncheck recent tests known to be flaky.\n\n\nFor callback APIs, consider adding a **kwargs placeholder as a \u201cforward compatibility placeholder\u201d in case more args need to be passed to the callback in the future, e.g.:\ndef tune_user_callback(model, score, **future_kwargs):\n    pass': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.rllib.callbacks.callbacks.RLlibCallback.on_evaluate_end#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.callbacks.callbacks.RLlibCallback.on_evaluate_end#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.core.rl_module.multi_rl_module.MultiRLModule#\n\n\n__init__\nInitializes a MultiRLModule instance.\n\nadd_module\nAdds a module at run time to the multi-agent module.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\n\n\n\n\n\nTargetNetworkAPI#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\n\n\n\n\n\nTargetNetworkAPI#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\n\n\n\n\n\nTargetNetworkAPI#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\n\n\n\n\n\nTargetNetworkAPI#\n\n\n\nReturns:\nA list of 2-tuples of (main_net, target_net)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\nError in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\n\n\n\n\n\nTargetNetworkAPI#\n\n\n\nReturns:\nA list of 2-tuples of (main_net, target_net)': cannot unpack non-iterable NoneType object\nError in finding 'RLModule APIs#\n\n\nRLModule specifications and configurations#\n\nSingle RLModuleSpec#\n\n\nRLModuleSpec\nUtility spec class to make constructing RLModules (in single-agent case) easier.': cannot unpack non-iterable NoneType object\nError in finding 'MultiRLModuleSpec.build\nBuilds either the MultiRLModule or a (single) sub-RLModule under module_id.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultModelConfig#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RLModule.as_multi_rl_module\nReturns a multi-agent wrapper around this module.\n\n\n\n\n\n\nforward_exploration\nDO NOT OVERRIDE! Forward-pass during exploration, called from the sampler.': cannot unpack non-iterable NoneType object\nError in finding 'Additional RLModule APIs#\n\nInferenceOnlyAPI#\n\nspec = RLModuleSpec(module_class=..., inference_only=True)\n\n\nIf an RLModule has the following setup() implementation:\nclass MyRLModule(RLModule):': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\nbatch \u2013 The batch received in the forward pass.\n\n\n\n\n\n\n\nParameters:\nbatch \u2013 A dictionary containing a tensor with the outputs of the\nforward pass of the Q-head or advantage stream head.': cannot unpack non-iterable NoneType object\nError in finding 'SelfSupervisedLossAPI#\n\nParameters:\n\n\n\n\n\n\nTargetNetworkAPI#\n\n\n\nReturns:\nA list of 2-tuples of (main_net, target_net)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'In short, your remote URI is not treated as a secret, so it should not contain secret info. Instead, use a netrc file.\n\nmachine github.com\nlogin username\npassword personal_access_token': cannot unpack non-iterable NoneType object\nError in finding 'In short, your remote URI is not treated as a secret, so it should not contain secret info. Instead, use a netrc file.\n\nmachine github.com\nlogin username\npassword personal_access_token': cannot unpack non-iterable NoneType object\nError in finding 'In short, your remote URI is not treated as a secret, so it should not contain secret info. Instead, use a netrc file.\n\nmachine github.com\nlogin username\npassword personal_access_token': cannot unpack non-iterable NoneType object\nError in finding 'In short, your remote URI is not treated as a secret, so it should not contain secret info. Instead, use a netrc file.\n\nmachine github.com\nlogin username\npassword personal_access_token': cannot unpack non-iterable NoneType object\nError in finding 'Frequently Asked Questions (FAQ)#\nDoes the session_id map to personal data?\nThe session_id is logged so that deletion requests can be honored.': cannot unpack non-iterable NoneType object\nError in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft': cannot unpack non-iterable NoneType object\nError in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft': cannot unpack non-iterable NoneType object\nError in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft': cannot unpack non-iterable NoneType object\nError in finding 'How does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft': cannot unpack non-iterable NoneType object\nError in finding 'How does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm': cannot unpack non-iterable NoneType object\nError in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft': cannot unpack non-iterable NoneType object\nError in finding 'How does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm\n\n\n\n\n\n\n\n\nNVTabular': cannot unpack non-iterable NoneType object\nError in finding 'Online inference solutions: Bento ML, Sagemaker Batch Transform\n\n\n\n\n\nDistributed Data Processing Frameworks: Apache Spark and Daft': cannot unpack non-iterable NoneType object\nError in finding 'How does Ray Data compare to other solutions for ML training ingest?#\n\n\nPyTorch Dataset and DataLoader\n\n\n\n\n\n\n\n\nTensorFlow Dataset\n\n\n\n\n\n\n\n\nPetastorm\n\n\n\n\n\n\n\n\nNVTabular': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\nError in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\nError in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Each task thus works with 10% of the available GPU memory. You also have to tell\nXGBoost to use the gpu_hist tree method, so it knows it should use the GPU.\n\n\nMore XGBoost Examples#': cannot unpack non-iterable NoneType object\nError in finding 'Tuning XGBoost hyperparameters with Ray Tune\n\n\n\n\n\nNote\nTo run this tutorial, you will need to install the following:\n$ pip install -q \"ray[tune]\" scikit-learn xgboost\n\n\n\nKey Concepts:': cannot unpack non-iterable NoneType object\nError in finding 'Accuracy: 0.9650\n\n\n\n\nIn this image, the left tree has a depth of 2, and the right tree a depth of 3.\nNote that with each level, \\(2^{(d-1)}\\) splits are added, where d is the depth\nof the tree.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Putting it together#\nLet\u2019s see how this looks like in code! We just need to adjust our config dict:\n\n\n\n\nAccuracy: 0.9231': cannot unpack non-iterable NoneType object\nError in finding 'The rest stays the same. Please note that we do not adjust the num_boost_rounds here.\nThe result should also show a high accuracy of over 90%.\n\n\n\n\nimport sklearn.datasets\nimport sklearn.metrics': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\n\n\n\n\n\nShow code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:34\nRunning for: 00:00:01.87        \nMemory:      22.5/36.0 GiB': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.tune.integration.xgboost import TuneReportCheckpointCallback\n\n\ndef get_best_model_checkpoint(results):\n    best_result = results.get_best_result()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Show code cell output\nHide code cell output\n\n\n\n\n\nTune Status\n\n\nCurrent time:2025-02-11 16:13:35\nRunning for: 00:00:01.05        \nMemory:      22.5/36.0 GiB      \n\n\n\n\n\n\n\nTrial Status': cannot unpack non-iterable NoneType object\nError in finding 'Each task thus works with 10% of the available GPU memory. You also have to tell\nXGBoost to use the gpu_hist tree method, so it knows it should use the GPU.\n\n\nMore XGBoost Examples#\n\n\n\nLearn More#': cannot unpack non-iterable NoneType object\nError in finding '# Better approach: Set the start method to \"spawn\"\n    multiprocessing.set_start_method(\"spawn\", force=True)\n\n    ray.shutdown()\n\n\nif __name__ == \"__main__\":\n    main()': cannot unpack non-iterable NoneType object\nError in finding 'def objective(config):\n    create_task_that_uses_resources()\n\ntuner = tune.Tuner(objective, param_space={\"a\": 1})\ntuner.fit()\n\n\n\n@ray.remote\ndef f():\n    return 1\n\n@ray.remote\ndef f():\n    return 2': cannot unpack non-iterable NoneType object\nError in finding 'However, there are cases where modifying a remote function doesn\u2019t take effect without restarting the cluster:\n@ray.remote\ndef f():\n    from importlib import reload\n    reload(file)': cannot unpack non-iterable NoneType object\nError in finding 'def objective(config):\n    create_task_that_uses_resources()\n\ntuner = tune.Tuner(objective, param_space={\"a\": 1})\ntuner.fit()\n\n\n\n@ray.remote\ndef f():\n    return 1\n\n@ray.remote\ndef f():\n    return 2': cannot unpack non-iterable NoneType object\nError in finding 'print(ray.get(f.remote()))  # This should print 2.\n\n\n2\n\n\nThis forces the external module to reload on the Workers. Note that in Python 3, you must use from importlib import reload.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def objective(config):\n    create_task_that_uses_resources()\n\ntuner = tune.Tuner(objective, param_space={\"a\": 1})\ntuner.fit()\n\n\n\n@ray.remote\ndef f():\n    return 1\n\n@ray.remote\ndef f():\n    return 2': cannot unpack non-iterable NoneType object\nError in finding 'print(ray.get(f.remote()))  # This should print 2.\n\n\n2\n\n\nThis forces the external module to reload on the Workers. Note that in Python 3, you must use from importlib import reload.': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.torch_utils.convert_to_torch_tensor#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.torch_utils.convert_to_torch_tensor#\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Set up Toy the Example#\nWe\u2019ll start with some imports.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Increase PBT population size#\nWith a larger population:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\nError in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\nError in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\nError in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\nError in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\nError in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\nError in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\nError in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:33,643\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:33,644\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:33,643\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:33,644\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:33,643\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:33,644\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:33,643\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:33,644\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:33,643\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:33,644\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:33,643\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:33,644\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:36,962\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:33,643\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:33,644\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:36,962\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'train_step += 1\n\n\n\n\n\n\n\nConfigure PBT and Tuner#\nWe start by initializing ray (shutting it down if a session existed previously).\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'perturbation_interval = 4\n\n\n\n\nA few notes on the PBT config:\n\n\n\n\n\nCreate the Tuner#\n\n\n\n\n\nA few other notes on the Tuner config:\n\n\n\n\nRun the experiment#\nWe launch the trials by calling Tuner.fit.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:40,274\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:42,000\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:43,618\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:45,229\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:46,823\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:48,411\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:49,978\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:51,547\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:53,194\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:54,799\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:56,429\tINFO pbt.py:905 -- \n\n2025-02-24 16:21:58,033\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:21:59,690\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:01,361\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:03,082\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:04,698\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:06,310\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nVisualize results#\nUsing some helper functions from here, we can create some visuals to help us understand the training progression of PBT.': cannot unpack non-iterable NoneType object\nError in finding 'fig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))\n\ncolors = [\"red\", \"black\"]\nlabels = [\"h = [1, 0]\", \"h = [0, 1]\"]\n\n\n\n\n\n\n\n\n\n\nAnimate the training progress#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'We can also animate the training progress to see what\u2019s happening to the model parameters at each step. The animation shows:\n\n\n\n\n\n\nif ray.is_initialized():\n    ray.shutdown()\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Compare the two plots we generated with Figure 2 from the PBT paper (in particular, we produced the top-left and bottom-right plots).\n\n\n\n\n\n\n\n\n\nShow code cell output\nHide code cell output': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:22,344\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.323032) into trial 942f2_00002 (score = 0.221418)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:25,540\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:25,540\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:28,679\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 0.652138) into trial 942f2_00002 (score = 0.606250)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:31,848\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:31,848\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:35,035\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:38,261\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:38,263\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.161966) into trial 942f2_00002 (score = 1.061179)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:41,544\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:41,545\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:44,762\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:44,762\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:47,994\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00000 (score = 1.195622) into trial 942f2_00002 (score = 1.191142)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:51,175\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:51,176\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:54,411\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00002 (score = 1.199463) into trial 942f2_00001 (score = 1.198073)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:22:57,678\tINFO pbt.py:905 -- \n\n2025-02-24 16:22:57,679\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:00,836\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:00,837\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:04,074\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:07,516\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:07,517\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.199994) into trial 942f2_00000 (score = 1.199989)': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:10,722\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:10,723\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:13,990\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:17,224\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\nError in finding '2025-02-24 16:23:17,225\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00003 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:20,514\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:20,515\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:23,779\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:23,780\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:27,091\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:30,403\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:30,404\tINFO pbt.py:905 -- \n\n[PopulationBasedTraining] [Exploit] Cloning trial 942f2_00001 (score = 1.200000) into trial 942f2_00002 (score = 1.200000)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:33,643\tINFO pbt.py:905 -- \n\n2025-02-24 16:23:33,644\tINFO pbt.py:878 --': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2025-02-24 16:23:36,962\tINFO pbt.py:905 -- \n\n\n\n\n\n\n\nfig, axs = plt.subplots(1, 2, figsize=(13, 6), gridspec_kw=dict(width_ratios=[1.5, 1]))': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.models.distributions.Distribution.logp#\n\nParameters:\n\nvalue \u2013 The value to compute the log-likelihood at.\n**kwargs \u2013 Forward compatibility placeholder.': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\n\n\n\n# CPU\n200\u00a0GB Time\n1\u00a0TB Time\n5\u00a0TB Time\n\n\n\n4 * 160\n11.13 min\n50.83 min\n285.43 min': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\n\n\n\n# CPU\n200\u00a0GB Time\n1\u00a0TB Time\n5\u00a0TB Time\n\n\n\n4 * 160\n11.13 min\n50.83 min\n285.43 min': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '8 * 160\n7.47 min\n30.08 min\n168.10 min\n\n\n\n\n\n\nThen start a Ray cluster (ref to the Ray doc for more details):\n# Start a cluster as the head node\nray start --head': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\n\n\n\n# CPU\n200\u00a0GB Time\n1\u00a0TB Time\n5\u00a0TB Time\n\n\n\n4 * 160\n11.13 min\n50.83 min\n285.43 min': cannot unpack non-iterable NoneType object\nError in finding '8 * 160\n7.47 min\n30.08 min\n168.10 min\n\n\n\n\n\n\nThen start a Ray cluster (ref to the Ray doc for more details):\n# Start a cluster as the head node\nray start --head': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\n\n\n\n# CPU\n200\u00a0GB Time\n1\u00a0TB Time\n5\u00a0TB Time\n\n\n\n4 * 160\n11.13 min\n50.83 min\n285.43 min': cannot unpack non-iterable NoneType object\nError in finding '8 * 160\n7.47 min\n30.08 min\n168.10 min\n\n\n\n\n\n\nThen start a Ray cluster (ref to the Ray doc for more details):\n# Start a cluster as the head node\nray start --head': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\n\n\n\n# CPU\n200\u00a0GB Time\n1\u00a0TB Time\n5\u00a0TB Time\n\n\n\n4 * 160\n11.13 min\n50.83 min\n285.43 min': cannot unpack non-iterable NoneType object\nError in finding '8 * 160\n7.47 min\n30.08 min\n168.10 min\n\n\n\n\n\n\nThen start a Ray cluster (ref to the Ray doc for more details):\n# Start a cluster as the head node\nray start --head': cannot unpack non-iterable NoneType object\nError in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\n\n\n\n# CPU\n200\u00a0GB Time\n1\u00a0TB Time\n5\u00a0TB Time\n\n\n\n4 * 160\n11.13 min\n50.83 min\n285.43 min': cannot unpack non-iterable NoneType object\nError in finding '8 * 160\n7.47 min\n30.08 min\n168.10 min\n\n\n\n\n\n\nThen start a Ray cluster (ref to the Ray doc for more details):\n# Start a cluster as the head node\nray start --head': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Implementation and optimizations#\n\nRay mode in Data-Juicer#\n\n\n\n\n\nPerformance results#\n\n\n\n\n# CPU\n200\u00a0GB Time\n1\u00a0TB Time\n5\u00a0TB Time\n\n\n\n4 * 160\n11.13 min\n50.83 min\n285.43 min': cannot unpack non-iterable NoneType object\nError in finding '8 * 160\n7.47 min\n30.08 min\n168.10 min\n\n\n\n\n\n\nThen start a Ray cluster (ref to the Ray doc for more details):\n# Start a cluster as the head node\nray start --head': cannot unpack non-iterable NoneType object\nError in finding 'Resource management (CPUs, GPUs, accelerators)#\nray_actor_options.\nBy default, each replica reserves one CPU.\nTo learn about options to pass in, take a look at the Resources with Actors guide.': cannot unpack non-iterable NoneType object\nError in finding 'Resource Allocation#\nThis guide helps you configure Ray Serve to:\n\n\n\n@serve.deployment(ray_actor_options={\"num_gpus\": 0.5})\ndef func_2(*args):\n    return do_something_with_my_gpu()': cannot unpack non-iterable NoneType object\nError in finding 'Resource Allocation#\nThis guide helps you configure Ray Serve to:\n\n\n\n@serve.deployment(ray_actor_options={\"num_gpus\": 0.5})\ndef func_2(*args):\n    return do_something_with_my_gpu()': cannot unpack non-iterable NoneType object\nError in finding 'Resource Allocation#\nThis guide helps you configure Ray Serve to:\n\n\n\n@serve.deployment(ray_actor_options={\"num_gpus\": 0.5})\ndef func_2(*args):\n    return do_something_with_my_gpu()': cannot unpack non-iterable NoneType object\nError in finding 'The number of CPUs they use is controlled by the OMP_NUM_THREADS environment variable.\nOMP_NUM_THREADS=12 ray start --head\nOMP_NUM_THREADS=12 ray start --address=$HEAD_NODE_ADDRESS': cannot unpack non-iterable NoneType object\nError in finding 'Resource Allocation#\nThis guide helps you configure Ray Serve to:\n\n\n\n@serve.deployment(ray_actor_options={\"num_gpus\": 0.5})\ndef func_2(*args):\n    return do_something_with_my_gpu()': cannot unpack non-iterable NoneType object\nError in finding 'Resource Allocation#\nThis guide helps you configure Ray Serve to:\n\n\n\n@serve.deployment(ray_actor_options={\"num_gpus\": 0.5})\ndef func_2(*args):\n    return do_something_with_my_gpu()': cannot unpack non-iterable NoneType object\nError in finding 'ML frameworks\nExperiment tracking tools\nHyperparameter optimization frameworks\nOthers\nExercises\n\n\nML frameworks#\n\n\nHow to use Tune with Keras and TensorFlow models': cannot unpack non-iterable NoneType object\nError in finding 'RLlibCallback.Env | None = None, policies: Dict[str, Policy] | None = None, rl_module: RLModule | None = None, env_index: int, **kwargs) \u2192 None[source]#': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.callbacks.callbacks.RLlibCallback.on_episode_created#\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.callbacks.callbacks.RLlibCallback.on_episode_created#\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Step 3: Create a RayJob#\n# Download `ray-job.pytorch-mnist.yaml`': cannot unpack non-iterable NoneType object\nError in finding '# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml\n\n\n\n# Check training logs.\nkubectl logs -f rayjob-pytorch-mnist-nxmj2': cannot unpack non-iterable NoneType object\nError in finding '# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml\n\n\n\n# Check training logs.\nkubectl logs -f rayjob-pytorch-mnist-nxmj2': cannot unpack non-iterable NoneType object\nError in finding '# `replicas` and `NUM_WORKERS` set to 2.\n# Create a RayJob.\nkubectl apply -f ray-job.pytorch-mnist.yaml\n\n\n\n# Check training logs.\nkubectl logs -f rayjob-pytorch-mnist-nxmj2': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\nError in finding 'Key concepts#\n\nTo help you get a high-level understanding of how the library works, on this page, you learn about the\nkey concepts and general architecture of RLlib.': cannot unpack non-iterable NoneType object\nError in finding '# Configure.\nconfig = (\n    PPOConfig()\n    .environment(\"CartPole-v1\")\n    .training(\n        train_batch_size_per_learner=2000,\n        lr=0.0004,\n    )\n)\n\n\n\n\n\n\nRL environments#': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe following is a quick overview of RL environments.\nSee here for a detailed description of how to use RL environments in RLlib.\n\n\n\n\nRLModules#': cannot unpack non-iterable NoneType object\nError in finding 'An RLModule inside an EnvRunner actor: The EnvRunner operates on its own copy of an\ninference-only version of the RLModule, using it only to compute actions.#\n\n\n\n\n\n\nEpisodes#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe following is a quick overview of Episode.\nSee here for a detailed description of the Episode classes.\n\nNote\nThe Ray team is working on a detailed description of the\nMultiAgentEpisode class.': cannot unpack non-iterable NoneType object\nError in finding 'To iterate over batches of data in Torch format, call Dataset.iter_torch_batches(). Each batch is represented as Dict[str, torch.Tensor], with one tensor per column in the dataset.\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\nError in finding 'from torchvision import transforms\nfrom torch.utils.data import Dataset\nfrom PIL import Image\n\n    def __len__(self):\n        return len(self.files)': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\nError in finding 'from torchvision import transforms\nfrom torch.utils.data import Dataset\nfrom PIL import Image\n\n    def __len__(self):\n        return len(self.files)': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\nError in finding 'from torchvision import transforms\nfrom torch.utils.data import Dataset\nfrom PIL import Image\n\n    def __len__(self):\n        return len(self.files)': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from torchvision import transforms\nfrom torch.utils.data import Dataset\nfrom PIL import Image\n\n    def __len__(self):\n        return len(self.files)': cannot unpack non-iterable NoneType object\nError in finding '# Map the transformations over the dataset.\nds = ds.map(extract_label).map(transform_image)\n\n\n\n\n\n\nPyTorch DataLoader arguments\nRay Data API': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\nError in finding 'from torchvision import transforms\nfrom torch.utils.data import Dataset\nfrom PIL import Image\n\n    def __len__(self):\n        return len(self.files)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Map the transformations over the dataset.\nds = ds.map(extract_label).map(transform_image)\n\n\n\n\n\n\nPyTorch DataLoader arguments\nRay Data API': cannot unpack non-iterable NoneType object\nError in finding 'Working with PyTorch#\nRay Data integrates with the PyTorch ecosystem.\nThis guide describes how to:\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'Column          Type\n------          ----\ntext            <class 'object'>\ntokenized_text  <class 'object'>\n\n\n\n\n\n\n\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Column  Type\n------  ----\nitem    <class 'object'>\n\n\n\nNote\nUnlike PyTorch Map-style datasets, Ray Datasets aren\u2019t indexable.': cannot unpack non-iterable NoneType object\nError in finding 'from torchvision import transforms\nfrom torch.utils.data import Dataset\nfrom PIL import Image\n\n    def __len__(self):\n        return len(self.files)': cannot unpack non-iterable NoneType object\nError in finding '# Map the transformations over the dataset.\nds = ds.map(extract_label).map(transform_image)\n\n\n\n\n\n\nPyTorch DataLoader arguments\nRay Data API': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'In ray-cluster.external-redis.yaml, the gcsFaultToleranceOptions.externalStorageNamespace option isn\u2019t set for the RayCluster.\nSee this section to learn more about the option.': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster\n\n\n\n\n\n\n\n\n1. Enable GCS fault tolerance#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster\n\n\n\n\n\n\n\n\n1. Enable GCS fault tolerance#\n\n\n\n\n\n\n2. Connect to an external Redis#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'redisAddress: Add redisAddress to the gcsFaultToleranceOptions field.\nUse this option to specify the address for the Redis service, thus allowing the Ray head to connect to it.\nkind: RayCluster': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster\n\n\n\n\n\n\n\n\n1. Enable GCS fault tolerance#\n\n\n\n\n\n\n2. Connect to an external Redis#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster\n\n\n\n\n\n\n\n\n1. Enable GCS fault tolerance#\n\n\n\n\n\n\n2. Connect to an external Redis#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster\n\n\n\n\n\n\n\n\n1. Enable GCS fault tolerance#\n\n\n\n\n\n\n2. Connect to an external Redis#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '3. Use an external storage namespace#\n\n\n\n\n\n\n4. Turn off Redis cleanup#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster\n\n\n\n\n\n\n\n\n1. Enable GCS fault tolerance#\n\n\n\n\n\n\n2. Connect to an external Redis#': cannot unpack non-iterable NoneType object\nError in finding '3. Use an external storage namespace#\n\n\n\n\n\n\n4. Turn off Redis cleanup#': cannot unpack non-iterable NoneType object\nError in finding 'See also\nIf you need fault tolerance for Redis as well, see Tuning Redis for a Persistent Fault Tolerant GCS.\n\n\nUse cases#\n\n\n\nPrerequisites#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get pods $YOUR_WORKER_POD -o=jsonpath='{.spec.containers[0].env}' | jq\n\n\n\n\n\n\n\n\n# Step 7.2: Kill the GCS process in the head Pod.\nkubectl exec -i $HEAD_POD -- pkill gcs_server': cannot unpack non-iterable NoneType object\nError in finding 'No resources found in default namespace.\n\n\n\n\n\n\n\n\n\n\nStep 10: Delete the Kubernetes cluster#\n\n\nkind delete cluster\n\n\n\n\n\n\n\n\n1. Enable GCS fault tolerance#\n\n\n\n\n\n\n2. Connect to an external Redis#': cannot unpack non-iterable NoneType object\nError in finding '3. Use an external storage namespace#\n\n\n\n\n\n\n4. Turn off Redis cleanup#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'maxmemory=<your_memory_limit>\nmaxmemory-policy=allkeys-lru\n\n\n\n\nNext steps#': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.checkpoints.Checkpointable#\n\n\n__init__\n\n\nfrom_checkpoint\nCreates a new Checkpointable instance from the given location and returns it.': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.core.rl_module.multi_rl_module.MultiRLModule.set_state#\n\nParameters:\nstate \u2013 The state dict to set.': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\nError in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'MultiAgentEnv API#\n\n\nrllib.env.multi_agent_env.MultiAgentEnv#\n\n\n__init__()[source]#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'get_observation_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nget_action_space(agent_id: Any) \u2192 gymnasium.Space[source]#\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\nenv_name_or_creator \u2013 String specifier or env_maker function taking\nan EnvContext object as only arg and returning a gym.Env.\n\n\n{0: [...], 1: [...]}\n{0: [...], 1: [...], 2: [...]}': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(resources={\"HPU\": 2})\n\nhpu_actor = HPUActor.remote()\nray.get(hpu_actor.ping.remote())\n# The actor uses the first HPU so the task uses the second one.\nray.get(hpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(resources={\"HPU\": 2})\n\nhpu_actor = HPUActor.remote()\nray.get(hpu_actor.ping.remote())\n# The actor uses the first HPU so the task uses the second one.\nray.get(hpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(resources={\"HPU\": 2})\n\nhpu_actor = HPUActor.remote()\nray.get(hpu_actor.ping.remote())\n# The actor uses the first HPU so the task uses the second one.\nray.get(hpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(resources={\"HPU\": 2})\n\nhpu_actor = HPUActor.remote()\nray.get(hpu_actor.ping.remote())\n# The actor uses the first HPU so the task uses the second one.\nray.get(hpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(resources={\"HPU\": 2})\n\nhpu_actor = HPUActor.remote()\nray.get(hpu_actor.ping.remote())\n# The actor uses the first HPU so the task uses the second one.\nray.get(hpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(resources={\"HPU\": 2})\n\nhpu_actor = HPUActor.remote()\nray.get(hpu_actor.ping.remote())\n# The actor uses the first HPU so the task uses the second one.\nray.get(hpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(resources={\"HPU\": 2})\n\nhpu_actor = HPUActor.remote()\nray.get(hpu_actor.ping.remote())\n# The actor uses the first HPU so the task uses the second one.\nray.get(hpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'Intel Gaudi\nHPU\nExperimental, supported by the community\n\nHuawei Ascend\nNPU\nExperimental, supported by the community\n\n\n\n\n\nNvidia GPU\n\n\n\n\nAMD GPU\n\n\n\n\nIntel GPU\n\n\n\n\nAWS Neuron Core\n\n\n\n\nGoogle TPU': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Intel Gaudi\n\n\n\n\nHuawei Ascend\n\n\n\n\n\n\n\nNvidia GPU\nimport os\nimport ray\n\nray.init(num_gpus=2)': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(num_gpus=2)\n\ngpu_actor = GPUActor.remote()\nray.get(gpu_actor.ping.remote())\n# The actor uses the first GPU so the task uses the second one.\nray.get(gpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ray.init(resources={\"HPU\": 2})\n\nhpu_actor = HPUActor.remote()\nray.get(hpu_actor.ping.remote())\n# The actor uses the first HPU so the task uses the second one.\nray.get(hpu_task.remote())': cannot unpack non-iterable NoneType object\nError in finding 'ds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor row in ds.iter_rows():\n    print(row)\n\n\nFor more information on working with rows, see\nTransforming rows and\nInspecting rows.': cannot unpack non-iterable NoneType object\nError in finding 'ds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor row in ds.iter_rows():\n    print(row)\n\n\nFor more information on working with rows, see\nTransforming rows and\nInspecting rows.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'ds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor row in ds.iter_rows():\n    print(row)\n\n\nFor more information on working with rows, see\nTransforming rows and\nInspecting rows.': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'ds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor row in ds.iter_rows():\n    print(row)\n\n\nFor more information on working with rows, see\nTransforming rows and\nInspecting rows.': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For more information on working with batches, see\nTransforming batches and\nInspecting batches.\n\n\n\n\nNumPy\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'ds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor row in ds.iter_rows():\n    print(row)\n\n\nFor more information on working with rows, see\nTransforming rows and\nInspecting rows.': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'For more information on working with batches, see\nTransforming batches and\nInspecting batches.\n\n\n\n\nNumPy\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(\n    batch_size=2,\n    batch_format=\"pandas\",\n    local_shuffle_buffer_size=250,\n):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor row in ds.iter_rows():\n    print(row)\n\n\nFor more information on working with rows, see\nTransforming rows and\nInspecting rows.': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'For more information on working with batches, see\nTransforming batches and\nInspecting batches.\n\n\n\n\nNumPy\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(\n    batch_size=2,\n    batch_format=\"pandas\",\n    local_shuffle_buffer_size=250,\n):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ds = ray.data.read_csv(\"s3://anonymous@air-example-data/iris.csv\")\n\nfor row in ds.iter_rows():\n    print(row)\n\n\nFor more information on working with rows, see\nTransforming rows and\nInspecting rows.': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(batch_size=2, batch_format=\"pandas\"):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray\n\nds = ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")': cannot unpack non-iterable NoneType object\nError in finding 'For more information on working with batches, see\nTransforming batches and\nInspecting batches.\n\n\n\n\nNumPy\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'for batch in ds.iter_batches(\n    batch_size=2,\n    batch_format=\"pandas\",\n    local_shuffle_buffer_size=250,\n):\n    print(batch)\n\n\n\n\n\nTorch\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'Extending the Ray Docker image#\n# File name: Dockerfile\nFROM rayproject/ray:2.9.0': cannot unpack non-iterable NoneType object\nError in finding 'RUN pip install Faker==18.13.0\n\n...\n\n% docker image push your_dockerhub_username/custom_image_name:latest\n\n...': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'RUN pip install Faker==18.13.0\n\n...\n\n% docker image push your_dockerhub_username/custom_image_name:latest\n\n...': cannot unpack non-iterable NoneType object\nError in finding 'Adding your Serve application to the Docker image#\nUse the WORKDIR and COPY commands inside the Dockerfile to install the example Serve application code in your image:\n# File name: Dockerfile': cannot unpack non-iterable NoneType object\nError in finding 'RUN pip install Faker==18.13.0\n\n...\n\n% docker image push your_dockerhub_username/custom_image_name:latest\n\n...\n\nRUN pip install Faker==18.13.0': cannot unpack non-iterable NoneType object\nError in finding 'RUN pip install Faker==18.13.0\n\n...\n\n% docker image push your_dockerhub_username/custom_image_name:latest\n\n...\n\nRUN pip install Faker==18.13.0': cannot unpack non-iterable NoneType object\nError in finding 'RUN pip install Faker==18.13.0\n\n...\n\n% docker image push your_dockerhub_username/custom_image_name:latest\n\n...\n\nRUN pip install Faker==18.13.0': cannot unpack non-iterable NoneType object\nError in finding 'RUN pip install Faker==18.13.0\n\n...\n\n% docker image push your_dockerhub_username/custom_image_name:latest\n\n...\n\nRUN pip install Faker==18.13.0': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'What is the Ray runtime?#\nRay programs are able to parallelize and distribute by leveraging an underlying Ray runtime.\nThere are three ways of starting the Ray runtime:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm_config.AlgorithmConfig#\n\n\nMethods\n\n\n__init__\nInitializes an AlgorithmConfig instance.\n\napi_stack\nSets the config's API stack settings.': cannot unpack non-iterable NoneType object\nError in finding 'ray::Actor(CreateCounter).SetResource(\"CPU\", 2.0).SetResource(\"GPU\", 1.0).Remote();\n\n\n\n    time.sleep(1)\n    return 2\n\n\nio_bound_task.remote()': cannot unpack non-iterable NoneType object\nError in finding 'ray::Actor(CreateCounter).SetResource(\"CPU\", 2.0).SetResource(\"GPU\", 1.0).Remote();\n\n\n\n    time.sleep(1)\n    return 2\n\n\nio_bound_task.remote()': cannot unpack non-iterable NoneType object\nError in finding 'ray::Actor(CreateCounter).SetResource(\"CPU\", 2.0).SetResource(\"GPU\", 1.0).Remote();\n\n\n\n    time.sleep(1)\n    return 2\n\n\nio_bound_task.remote()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Upscaling and downscaling speed#\nlaunches are allowed. The minimum number of pending launches is 5 regardless of this setting.': cannot unpack non-iterable NoneType object\nError in finding 'Upscaling and downscaling speed#\nlaunches are allowed. The minimum number of pending launches is 5 regardless of this setting.': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.restore_from_path#\n\n\nNote that the self.METADATA_FILE_NAME file is not required to restore the state.\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.restore_from_path#\n\n\nNote that the self.METADATA_FILE_NAME file is not required to restore the state.\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Utility Classes#\n\nActor Pool#\n\n\n\n\n@ray.remote\nclass Actor:\n    def double(self, n):\n        return n * 2\n\n\na1, a2 = Actor.remote(), Actor.remote()\npool = ActorPool([a1, a2])': cannot unpack non-iterable NoneType object\nError in finding 'Utility Classes#\n\nActor Pool#\n\n\n\n\n@ray.remote\nclass Actor:\n    def double(self, n):\n        return n * 2\n\n\na1, a2 = Actor.remote(), Actor.remote()\npool = ActorPool([a1, a2])': cannot unpack non-iterable NoneType object\nError in finding 'Utility Classes#\n\nActor Pool#\n\n\n\n\n@ray.remote\nclass Actor:\n    def double(self, n):\n        return n * 2\n\n\na1, a2 = Actor.remote(), Actor.remote()\npool = ActorPool([a1, a2])': cannot unpack non-iterable NoneType object\nError in finding 'ray.init()\n# You can pass this object around to different tasks/actors\nqueue = Queue(maxsize=100)\n\n\n[queue.put(i) for i in range(10)]\nprint(\"Put work 1 - 10 to queue...\")': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.numpy.convert_to_numpy#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.numpy.convert_to_numpy#\n\nParameters:\n\n\nReturns:\nA new struct with the same structure as x, but with all\nvalues converted to numpy arrays (on CPU).': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'entrypoint - The submitter runs ray job submit --address ... --submission-id ... -- $entrypoint to submit a Ray job to the RayCluster.\nExample:\nspec:\n  runtimeEnvYAML: |\n    pip:': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.2: List all RayCluster custom resources in the `default` namespace.\nkubectl get raycluster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSUCCEEDED': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.2: List all RayCluster custom resources in the `default` namespace.\nkubectl get raycluster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSUCCEEDED': cannot unpack non-iterable NoneType object\nError in finding 'kubectl get rayjobs.ray.io rayjob-sample -o jsonpath='{.status.jobDeploymentStatus}'\n\n\n\n\nComplete\n\n\n\n\nStep 5: Check the output of the Ray job#\n\n\nkubectl logs -l=job-name=rayjob-sample': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.2: List all RayCluster custom resources in the `default` namespace.\nkubectl get raycluster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSUCCEEDED': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get rayjobs.ray.io rayjob-sample -o jsonpath='{.status.jobDeploymentStatus}'\n\n\n\n\nComplete\n\n\n\n\nStep 5: Check the output of the Ray job#\n\n\nkubectl logs -l=job-name=rayjob-sample': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.2: List all RayCluster custom resources in the `default` namespace.\nkubectl get raycluster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSUCCEEDED': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get rayjobs.ray.io rayjob-sample -o jsonpath='{.status.jobDeploymentStatus}'\n\n\n\n\nComplete\n\n\n\n\nStep 5: Check the output of the Ray job#\n\n\nkubectl logs -l=job-name=rayjob-sample': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s a RayJob?#\nA RayJob manages two aspects:\n\n\n\n\n\nRayJob Configuration#\n\nRayCluster configuration\n\n\nRay job configuration': cannot unpack non-iterable NoneType object\nError in finding 'See Runtime Environments for more details. (New in KubeRay version 1.0.0)\n\n\nSubmission configuration\n\n\nsubmitterConfig (Optional): Additional configurations for the submitter Kubernetes Job.': cannot unpack non-iterable NoneType object\nError in finding 'backoffLimit (Optional, added in version 1.2.0): The number of retries before marking the submitter Job as failed. The default value is 2.\n\n\n\n\nAutomatic resource cleanup\n\n\nOthers': cannot unpack non-iterable NoneType object\nError in finding '# Step 4.2: List all RayCluster custom resources in the `default` namespace.\nkubectl get raycluster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSUCCEEDED': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'kubectl get rayjobs.ray.io rayjob-sample -o jsonpath='{.status.jobDeploymentStatus}'\n\n\n\n\nComplete\n\n\n\n\nStep 5: Check the output of the Ray job#\n\n\nkubectl logs -l=job-name=rayjob-sample': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.replay_buffers.reservoir_replay_buffer.ReservoirReplayBuffer#\n\n\n__init__\nInitializes a ReservoirBuffer instance.\n\nadd\nAdds a batch of experiences or other data to this buffer.': cannot unpack non-iterable NoneType object\nError in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Design Principles#\n\n\n\n\n\nIn the above diagram:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray for ML Infrastructure#\n\nTip\nWe\u2019d love to hear from you if you are using Ray to build a ML platform! Fill out this short form to get involved.\n\n\n\nShopify\u2019s Merlin architecture built on Ray.#': cannot unpack non-iterable NoneType object\nError in finding 'Design Principles#\n\n\n\n\n\nIn the above diagram:': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\nError in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding '[{'id': 0}, {'id': 0}, {'id': 1}, {'id': 1}, {'id': 2}, {'id': 2}]\n\ndef fn(row: Dict[str, Any]) -> List[Dict[str, Any]]:\n    # access row data\n    value = row[\"col1\"]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ds = (\n    ray.data.read_images(\"s3://anonymous@ray-example-data/image-datasets/simple\")\n    .map_batches(increase_brightness)\n)\n\n\n\n\n\nNumPy\nfrom typing import Dict\nimport numpy as np\nimport ray': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'Alternate Grafana host location#\nIf Grafana is exposed with NGINX ingress on a Kubernetes cluster, the following line should be present in the Grafana ingress annotation:': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'When both Grafana and the Ray Cluster are on the same Kubernetes cluster, set RAY_GRAFANA_HOST to the external URL of the Grafana ingress.\n\n\n\n\nTroubleshooting#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'When both Grafana and the Ray Cluster are on the same Kubernetes cluster, set RAY_GRAFANA_HOST to the external URL of the Grafana ingress.\n\n\n\n\nTroubleshooting#': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'When both Grafana and the Ray Cluster are on the same Kubernetes cluster, set RAY_GRAFANA_HOST to the external URL of the Grafana ingress.\n\n\n\n\nTroubleshooting#': cannot unpack non-iterable NoneType object\nError in finding 'KubeRay\nView the specifying non-default ports page for details.\n\n\n\nDanger\nFor security purpose, do not expose Ray Dashboard publicly without proper authentication in place.': cannot unpack non-iterable NoneType object\nError in finding 'The dashboard is now visible at http://localhost:8265.\n\n\n\n\n\nNote\nDo not use port forwarding for production environment. Follow the instructions above to expose the Dashboard with Ingress.': cannot unpack non-iterable NoneType object\nError in finding 'When both Grafana and the Ray Cluster are on the same Kubernetes cluster, set RAY_GRAFANA_HOST to the external URL of the Grafana ingress.\n\n\n\n\nTroubleshooting#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about model serving with the following resources.\n\n\n\n\n\nDistributed tuning with distributed training per trial.#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about model serving with the following resources.\n\n\n\n\n\nDistributed tuning with distributed training per trial.#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about model serving with the following resources.\n\n\n\n\n\nDistributed tuning with distributed training per trial.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Tune library with the following talks and user guides.\n\n\n\n\n\nModel parallelism pattern for distributed large model training.#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about model serving with the following resources.\n\n\n\n\n\nDistributed tuning with distributed training per trial.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Tune library with the following talks and user guides.\n\n\n\n\n\nModel parallelism pattern for distributed large model training.#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about model serving with the following resources.\n\n\n\n\n\nDistributed tuning with distributed training per trial.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Tune library with the following talks and user guides.\n\n\n\n\n\nModel parallelism pattern for distributed large model training.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Train library with the following talks and user guides.\n\n\n\n\n\nDecentralized distributed proximal polixy optimiation (DD-PPO) architecture.#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about model serving with the following resources.\n\n\n\n\n\nDistributed tuning with distributed training per trial.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Tune library with the following talks and user guides.\n\n\n\n\n\nModel parallelism pattern for distributed large model training.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Train library with the following talks and user guides.\n\n\n\n\n\nDecentralized distributed proximal polixy optimiation (DD-PPO) architecture.#': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about model serving with the following resources.\n\n\n\n\n\nDistributed tuning with distributed training per trial.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Tune library with the following talks and user guides.\n\n\n\n\n\nModel parallelism pattern for distributed large model training.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Train library with the following talks and user guides.\n\n\n\n\n\nDecentralized distributed proximal polixy optimiation (DD-PPO) architecture.#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Learn more about reinforcement learning with the following resources.\n\n\n\n\nEnd-to-End ML Workflows#\nThe following highlights examples utilizing Ray AI libraries to implement end-to-end ML workflows.': cannot unpack non-iterable NoneType object\nError in finding 'Explore LLMs and Gen AI examples\n\n\n\n\n\n\n \n\nExplore batch inference examples\n\n\n\nDeployment patterns with Ray Serve. (Click image to enlarge.)#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about model serving with the following resources.\n\n\n\n\n\nDistributed tuning with distributed training per trial.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Tune library with the following talks and user guides.\n\n\n\n\n\nModel parallelism pattern for distributed large model training.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about the Train library with the following talks and user guides.\n\n\n\n\n\nDecentralized distributed proximal polixy optimiation (DD-PPO) architecture.#': cannot unpack non-iterable NoneType object\nError in finding 'Learn more about reinforcement learning with the following resources.\n\n\n\n\nEnd-to-End ML Workflows#\nThe following highlights examples utilizing Ray AI libraries to implement end-to-end ML workflows.': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\nError in finding '# Inject custom callback code that runs right after algorithm's initialization.\n\n# Inject callback.\nmulti_agent_config.callbacks(on_algorithm_init=_on_algo_init)': cannot unpack non-iterable NoneType object\nError in finding 'Checkpointing#\n\n\n\n\n\nCheckpointable API#\nRLlib manages checkpointing through the Checkpointable API,\nwhich exposes the following three main methods:': cannot unpack non-iterable NoneType object\nError in finding 'See RLlib component tree for details.\n\nThe metadata.json file exists for your convenience only and RLlib doesn\u2019t need it.\n\n\n\n\n\n\n\n\n\n\n\n# Continue training.\nnew_ppo.train()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Inject custom callback code that runs right after algorithm's initialization.\n\n# Inject callback.\nmulti_agent_config.callbacks(on_algorithm_init=_on_algo_init)': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe easiest scheduler to start with is the ASHAScheduler which will aggressively terminate low-performing trials.\n\nScheduler Compatibility Matrix#': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe easiest scheduler to start with is the ASHAScheduler which will aggressively terminate low-performing trials.\n\nScheduler Compatibility Matrix#': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe easiest scheduler to start with is the ASHAScheduler which will aggressively terminate low-performing trials.\n\nScheduler Compatibility Matrix#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Tip\nThe easiest scheduler to start with is the ASHAScheduler which will aggressively terminate low-performing trials.\n\nScheduler Compatibility Matrix#': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\nError in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe easiest scheduler to start with is the ASHAScheduler which will aggressively terminate low-performing trials.\n\nScheduler Compatibility Matrix#': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s Next?#\nNow that you have a working understanding of Tune, check out:\n\n\nFurther Questions or Issues?#\nYou can post questions or issues or feedback through the following channels:': cannot unpack non-iterable NoneType object\nError in finding 'tune.report({\"score\": score})  # Send the score to Tune.\n\n\n\n\n\nClass API\nHere\u2019s an example of specifying the objective function using the class-based API:\nfrom ray import tune': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'To learn more about the various ways of configuring your Tune runs,\ncheck out the Tuner API reference.\n\n# Define the search space\nsearch_space = {\"a\": tune.uniform(0, 1), \"b\": tune.uniform(0, 20)}': cannot unpack non-iterable NoneType object\nError in finding 'algo = BayesOptSearch(random_search_steps=4)\n\n\n\n\n\n\n\n\nSearchAlgorithm\nSummary\nWebsite\nCode Example\n\n\n\nRandom search/grid search\nRandom search/grid search\n\ntune_basic_example': cannot unpack non-iterable NoneType object\nError in finding 'Tip\nThe easiest scheduler to start with is the ASHAScheduler which will aggressively terminate low-performing trials.\n\nScheduler Compatibility Matrix#': cannot unpack non-iterable NoneType object\nError in finding 'What\u2019s Next?#\nNow that you have a working understanding of Tune, check out:\n\n\nFurther Questions or Issues?#\nYou can post questions or issues or feedback through the following channels:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.rllib.algorithms.algorithm.Algorithm.remove_policy#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.remove_policy#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\nError in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\nError in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\nError in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\nError in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\nError in finding '2022-07-22 15:41:31,290\tINFO tune.py:738 -- Total run time: 7.36 seconds (6.72 seconds for the tuning loop).\n\n\n{'mean': 1, 'sd': 0.40575843135279466}\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '2022-07-22 15:41:31,290\tINFO tune.py:738 -- Total run time: 7.36 seconds (6.72 seconds for the tuning loop).\n\n\n{'mean': 1, 'sd': 0.40575843135279466}\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'print(results.get_best_result().config)\n\n\n\nfrom ray.air import session\n\ndef train(config):\n    # ...\n    session.report({\"metric\": metric}, checkpoint=checkpoint)': cannot unpack non-iterable NoneType object\nError in finding '2022-07-22 15:41:31,290\tINFO tune.py:738 -- Total run time: 7.36 seconds (6.72 seconds for the tuning loop).\n\n\n{'mean': 1, 'sd': 0.40575843135279466}\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\nError in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Running Tune experiments with BOHB#\n\n\n\n\n\nShow code cell source\nHide code cell source\n\n\nimport tempfile\nimport time\nfrom pathlib import Path': cannot unpack non-iterable NoneType object\nError in finding 'num_samples = 1000\n\n\n\n\n\n\n\n\n\nTrial name        status    loc            activation     height   width    loss  iter  total time (s)  ts  iterations  neg_mean_loss': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\nError in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\nError in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'LLMConfig#\nThe LLMConfig class specifies model details such as:\n\n\n\n\nQuickstart Examples#\n\nDeployment through LLMRouter#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Builder Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app\n\napp = build_openai_app({\"llm_configs\": [llm_config]})\nserve.run(app, blocking=True)': cannot unpack non-iterable NoneType object\nError in finding 'Bind Pattern\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, LLMServer, LLMRouter\n\n\n\n\nYou can query the deployed models using either cURL or the OpenAI Python client:': cannot unpack non-iterable NoneType object\nError in finding 'Advanced Usage Patterns#\nFor each usage pattern, we provide a server and client code snippet.\n\n\n\nServer\nfrom ray import serve\nfrom ray.serve.llm import LLMConfig, build_openai_app': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")\n\n\n\n\n\n# Initialize client\nclient = OpenAI(base_url=\"http://localhost:8000/v1\", api_key=\"fake-key\")': cannot unpack non-iterable NoneType object\nError in finding 'for chunk in response:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n\n\n\n\n\n\n\n\n\nFrequently Asked Questions#': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'async def main():\n    t1 = async_task()\n    t2 = async_task()\n    await asyncio.gather(t1, t2)\n\nasyncio.run(main())\n\ngen = task.remote()': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\nError in finding 'async def main():\n    t1 = async_task()\n    t2 = async_task()\n    await asyncio.gather(t1, t2)\n\nasyncio.run(main())\n\ngen = task.remote()': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\nError in finding 'async def main():\n    t1 = async_task()\n    t2 = async_task()\n    await asyncio.gather(t1, t2)\n\nasyncio.run(main())\n\ngen = task.remote()': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\nError in finding 'async def main():\n    t1 = async_task()\n    t2 = async_task()\n    await asyncio.gather(t1, t2)\n\nasyncio.run(main())\n\ngen = task.remote()': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\nError in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\nError in finding 'async def main():\n    t1 = async_task()\n    t2 = async_task()\n    await asyncio.gather(t1, t2)\n\nasyncio.run(main())\n\ngen = task.remote()': cannot unpack non-iterable NoneType object\nError in finding 'Ray generator works with existing Ray APIs seamlessly\n\n\nGetting started#\nDefine a Python generator function and decorate it with ray.remote\nto create a Ray generator.\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding '@ray.remote\ndef task():\n    for i in range(5):\n        time.sleep(5)\n        yield i\n\n\n\n# Returns 2~4 every 5 seconds.\nfor ref in gen:\n    print(ray.get(ref))': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'gen = task.remote()\nref1 = next(gen)\ndel gen\n\n\n\n\nFault tolerance#\nFault tolerance features work with\nRay generator tasks and actor tasks. For example;': cannot unpack non-iterable NoneType object\nError in finding 'async def main():\n    t1 = async_task()\n    t2 = async_task()\n    await asyncio.gather(t1, t2)\n\nasyncio.run(main())\n\ngen = task.remote()': cannot unpack non-iterable NoneType object\nError in finding 'gen = [generator_task.remote()]\nref = [regular_task.remote()]\nready, unready = [], [*gen, *ref]\nresult = []\n\n\n\n\n\nThread safety#\nObjectRefGenerator object is not thread-safe.': cannot unpack non-iterable NoneType object\nError in finding 'How to Define Stopping Criteria for a Ray Tune Experiment#\nFor instance, one may want to set up the experiment to stop under the following circumstances:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Stop using metric-based criteria#\nYou can implement the stopping criteria using either a dictionary, a function, or a custom Stopper.': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'This is useful when you are debugging a Tune experiment with many trials.\n\n\nscheduler = AsyncHyperBandScheduler(time_attr=\"training_iteration\")': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\nError in finding 'This is useful when you are debugging a Tune experiment with many trials.\n\n\nscheduler = AsyncHyperBandScheduler(time_attr=\"training_iteration\")': cannot unpack non-iterable NoneType object\nError in finding 'tuner = tune.Tuner(my_trainable, run_config=tune.RunConfig(stop=stop_fn))\nresult_grid = tuner.fit()\n\n\n\n\n\n\nclass CustomStopper(Stopper):\n    def __init__(self):\n        self.should_stop = False': cannot unpack non-iterable NoneType object\nError in finding 'This is useful when you are debugging a Tune experiment with many trials.\n\n\nscheduler = AsyncHyperBandScheduler(time_attr=\"training_iteration\")': cannot unpack non-iterable NoneType object\nError in finding 'Repeater\nA wrapper algorithm for repeating trials of same parameters.\n\n\n\n\n\n\nConcurrencyLimiter\nA wrapper algorithm for limiting the number of concurrent trials.': cannot unpack non-iterable NoneType object\nError in finding 'Repeater\nA wrapper algorithm for repeating trials of same parameters.\n\n\n\n\n\n\nConcurrencyLimiter\nA wrapper algorithm for limiting the number of concurrent trials.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass Streamer:\n    def __call__(self, limit: int) -> Generator[int, None, None]:\n        for i in range(limit):\n            yield i\n\n\napp = Caller.bind(Streamer.bind())': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass Streamer:\n    def __call__(self, limit: int) -> Generator[int, None, None]:\n        for i in range(limit):\n            yield i\n\n\napp = Caller.bind(Streamer.bind())': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass Streamer:\n    def __call__(self, limit: int) -> Generator[int, None, None]:\n        for i in range(limit):\n            yield i\n\n\napp = Caller.bind(Streamer.bind())': cannot unpack non-iterable NoneType object\nError in finding 'Advanced: Pass a DeploymentResponse in a nested object [FULLY DEPRECATED]#\n\n\n\n\n@ray.remote\ndef say_hi_task(inp: str):\n    return f\"Ray task got message: '{inp}'\"': cannot unpack non-iterable NoneType object\nError in finding 'Note\nThe deprecated RayServeHandle and RayServeSyncHandle APIs have been fully removed as of Ray 2.10.\n\n\nThis call has a few parts:': cannot unpack non-iterable NoneType object\nError in finding '@serve.deployment\nclass Streamer:\n    def __call__(self, limit: int) -> Generator[int, None, None]:\n        for i in range(limit):\n            yield i\n\n\napp = Caller.bind(Streamer.bind())': cannot unpack non-iterable NoneType object\nError in finding 'Advanced: Pass a DeploymentResponse in a nested object [FULLY DEPRECATED]#\n\n\n\n\n@ray.remote\ndef say_hi_task(inp: str):\n    return f\"Ray task got message: '{inp}'\"': cannot unpack non-iterable NoneType object\nError in finding 'Running Independent Tune Trials in Parallel#\nfrom ray import tune\nimport ray\nimport os': cannot unpack non-iterable NoneType object\nError in finding '# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding '# Access individual results.\nprint(results[0])\nprint(results[1])\nprint(results[2])\n\n2022-09-21 10:19:35,159     INFO tune.py:762 -- Total run time: 5.06 seconds (4.46 seconds for the tuning loop).': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Motivation#\nThis API change provides several benefits:\n\n\n\nMigration Steps#\nTo migrate from the old <Framework>Trainer.restore API to the new pattern:': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Motivation#\nThis API change provides several benefits:\n\n\n\nMigration Steps#\nTo migrate from the old <Framework>Trainer.restore API to the new pattern:': cannot unpack non-iterable NoneType object\nError in finding 'Handling Failures and Node Preemption#\n\nRay Train provides fault tolerance at three levels:\n\nThis user guide covers how to configure and use these fault tolerance mechanisms.': cannot unpack non-iterable NoneType object\nError in finding 'Motivation#\nThis API change provides several benefits:\n\n\n\nMigration Steps#\nTo migrate from the old <Framework>Trainer.restore API to the new pattern:': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\n\n\n{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\n\n\n{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Progress\n\n\n\n\n{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}': cannot unpack non-iterable NoneType object\nError in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\n\n\n{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\n\n\n{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\n\n\n{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback\n\n\n\nParameters:\n\n\n\n\n\nsetup_wandb#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\nError in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial Progress\n\n\n\n\n{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}': cannot unpack non-iterable NoneType object\nError in finding 'from ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback\n\n\n\nParameters:\n\n\n\n\n\nsetup_wandb#\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Using Weights & Biases with Tune#\n\n\n\n\nRunning A Weights & Biases Example\nTune Wandb API Reference\n\nWandbLoggerCallback\nsetup_wandb\n\n\n\n\n\n\nWe can then start with a few crucial imports:': cannot unpack non-iterable NoneType object\nError in finding 'You can define a\nsimple grid-search Tune run using the WandbLoggerCallback as follows:\n\n\n\n\ndef train_function_wandb(config):\n    wandb = setup_wandb(config, project=\"Wandb_example\")': cannot unpack non-iterable NoneType object\nError in finding 'With the train_function_wandb defined, your Tune experiment will set up wandb in each trial once it starts!\n\n\n\n    def save_checkpoint(self, checkpoint_dir: str):\n        pass': cannot unpack non-iterable NoneType object\nError in finding 'def load_checkpoint(self, checkpoint_dir: str):\n        pass\n\n\n\n    return results.get_best_result().config\n\n\n\n\nimport os\n\nmock_api = True': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n\nTrial Progress': cannot unpack non-iterable NoneType object\nError in finding '(train_function_wandb pid=14647) 2022-11-02 16:03:17,149\tINFO wandb.py:282 -- Already logged into W&B.\n\n\n\nTrial Progress\n\n\n\n\n\n\n\nTune Status': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Trial name                status    loc              mean      sd  iter  total time (s)    loss\n\n\n\n\n\n(WandbTrainable pid=14718) 2022-11-02 16:03:25,742\tINFO wandb.py:282 -- Already logged into W&B.': cannot unpack non-iterable NoneType object\nError in finding 'Trial Progress\n\n\n\n\n{'mean': 1, 'sd': 0.3978937765393781, 'wandb': {'project': 'Wandb_example'}}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import tune\nfrom ray.air.integrations.wandb import WandbLoggerCallback\n\n\n\nParameters:\n\n\n\n\n\nsetup_wandb#\n\nParameters:\n\n\n\nExample\nfrom ray.air.integrations.wandb import setup_wandb': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\nError in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\nError in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple': cannot unpack non-iterable NoneType object\nError in finding 'message ImageClass {\n  repeated string classes = 1;\n  repeated float probabilities = 2;\n}\n\nservice ImageClassificationService {\n  rpc Predict(ImageData) returns (ImageClass);\n}': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Python API\nfrom ray import serve\nfrom ray.serve.config import gRPCOptions\n\n\n\n\n\napplications:\n  - name: app1\n    route_prefix: /app1\n    import_path: test_deployment_v2:g\n    runtime_env: {}': cannot unpack non-iterable NoneType object\nError in finding 'import ray\nfrom ray import serve\n\n    @serve.multiplexed(max_num_models_per_replica=1)\n    async def get_model(self, model_id: str) -> str:\n        return f\"loading model: {model_id}\"': cannot unpack non-iterable NoneType object\nError in finding 'request = HealthzRequest()\nresponse = stub.Healthz(request=request)\nprint(f\"Health: {response.message}\")  # \"success\"\n\n\n\n\n\nList of Serve returned trailing metadata keys:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Serve uses the following gRPC error codes:\n\n\n\nfrom ray import serve\nfrom ray.serve.grpc_util import RayServegRPCContext\n\nimport grpc\nfrom typing import Tuple': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\n\nML platform engineer': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ML engineer\n\n\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI': cannot unpack non-iterable NoneType object\nError in finding 'Seldon, KServe, Cortex\n\n\n\n\n\nBentoML, Comet.ml, MLflow': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI': cannot unpack non-iterable NoneType object\nError in finding 'Seldon, KServe, Cortex\n\n\n\n\n\nBentoML, Comet.ml, MLflow': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\nError in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ML engineer\n\n\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI': cannot unpack non-iterable NoneType object\nError in finding 'Seldon, KServe, Cortex\n\n\n\n\n\nBentoML, Comet.ml, MLflow\n\n\n\n\nLearn More#\nCheck out Getting Started and Key Concepts,\nor head over to the Examples to get started building your Ray Serve applications.': cannot unpack non-iterable NoneType object\nError in finding 'Ray Serve: Scalable and Programmable Serving#\n\n\n\nQuickstart#\nInstall Ray Serve and its dependencies:\npip install \"ray[serve]\"': cannot unpack non-iterable NoneType object\nError in finding '# 1: Define a FastAPI app and wrap it in a deployment with a route handler.\napp = FastAPI()\n\n\n# 2: Deploy the deployment.\nserve.run(FastAPIDeployment.bind(), route_prefix=\"/\")': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '# 3: Query the deployment and print the result.\nprint(requests.get(\"http://localhost:8000/hello\", params={\"name\": \"Theodore\"}).json())\n# \"Hello Theodore!\"\n\n\n\n\n\nfrom transformers import pipeline': cannot unpack non-iterable NoneType object\nError in finding 'from ray import serve\n\n    def __call__(self, request: Request) -> Dict:\n        return self._model(request.query_params[\"text\"])[0]': cannot unpack non-iterable NoneType object\nError in finding '# 2: Deploy the deployment.\nserve.run(SentimentAnalysisDeployment.bind(), route_prefix=\"/\")\n\n\n\n\n\n\nWhy choose Serve?#\n\n\nBuild end-to-end ML-powered applications': cannot unpack non-iterable NoneType object\nError in finding 'Combine multiple models using a programmable API\n\n\n\n\n\nFlexibly scale up and allocate resources\n\n\n\n\n\nAvoid framework or vendor lock-in\n\n\n\n\n\nHow can Serve help me as a\u2026#\n\n\nData scientist': cannot unpack non-iterable NoneType object\nError in finding 'ML engineer\n\n\n\n\n\nML platform engineer\n\n\n\n\n\nLLM developer\n\n\n\n\n\nHow does Serve compare to \u2026#\n\n\nTFServing, TorchServe, ONNXRuntime\n\n\n\n\n\nAWS SageMaker, Azure ML, Google Vertex AI': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Seldon, KServe, Cortex\n\n\n\n\n\nBentoML, Comet.ml, MLflow\n\n\n\n\nLearn More#\nCheck out Getting Started and Key Concepts,\nor head over to the Examples to get started building your Ray Serve applications.': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Learning to Play Pong#\n\n\n\n\n\nTip\nFor a production-grade implementation of distributed\nreinforcement learning, use Ray RLlib.\n\n\nimport numpy as np\nimport os\nimport ray\nimport time': cannot unpack non-iterable NoneType object\nError in finding 'import gymnasium as gym\n\n\n\n\n\nHyperparameters#\nHere we\u2019ll define a couple of the hyperparameters that are used.\n\n\n\n\n\n\nHelper Functions#\nWe first define a few helper functions:': cannot unpack non-iterable NoneType object\nError in finding 'Parallelizing Gradients#\nWe define an actor, which is responsible for taking a model and an env\nand performing a rollout + computing a gradient update.\n\nray.init()': cannot unpack non-iterable NoneType object\nError in finding 'Ray\u2019s PublicAPI stability definitions are based off the Google stability level guidelines, with minor differences:\n\nDocstrings#': cannot unpack non-iterable NoneType object\nError in finding 'Ray\u2019s PublicAPI stability definitions are based off the Google stability level guidelines, with minor differences:\n\nDocstrings#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Ray\u2019s PublicAPI stability definitions are based off the Google stability level guidelines, with minor differences:\n\nDocstrings#\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.utils.replay_buffers.multi_agent_replay_buffer.MultiAgentReplayBuffer#\n\n\n__init__\nInitializes a MultiAgentReplayBuffer instance.': cannot unpack non-iterable NoneType object\nError in finding 'Algorithms#\n\n\n\nBuilding Custom Algorithm Classes#': cannot unpack non-iterable NoneType object\nError in finding 'Algorithms#\n\n\n\nBuilding Custom Algorithm Classes#\n\nIn order to create a custom Algorithm, sub-class the\nAlgorithm class\nand override one or more of its methods. Those are in particular:': cannot unpack non-iterable NoneType object\nError in finding 'Offline RL API#\n\n\nConfiguring Offline RL#\n\n\nAlgorithmConfig.offline_data\nSets the config's offline data settings.': cannot unpack non-iterable NoneType object\nError in finding 'ray.rllib.algorithms.algorithm.Algorithm.train#\n\n\nReturns:\nA dict that describes training progress.': cannot unpack non-iterable NoneType object\nError in finding 'Ray on Cloud VMs#\n\n\n\nSet up and configure Ray in public clouds\nDeploy applications and monitor your cluster': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone.\n\n\n\n\n\nray.util.collective.collective.send(tensor, dst_rank: int, group_name: str = 'default')[source]#\nSend a tensor to a remote process synchronously.\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone.\n\n\n\n\n\nray.util.collective.collective.send(tensor, dst_rank: int, group_name: str = 'default')[source]#\nSend a tensor to a remote process synchronously.\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'tensor \u2013 the tensor to send.\ndst_rank \u2013 the rank of the destination process.\ngroup_name \u2013 the name of the collective group.\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\nError in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone.\n\n\n\n\n\nray.util.collective.collective.send(tensor, dst_rank: int, group_name: str = 'default')[source]#\nSend a tensor to a remote process synchronously.\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'tensor \u2013 the tensor to send.\ndst_rank \u2013 the rank of the destination process.\ngroup_name \u2013 the name of the collective group.\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Supported Tensor Types#\n\ntorch.Tensor\nnumpy.ndarray\ncupy.ndarray\n\n\n\nUsage#\n\n\nTo use these APIs, import the collective package in your actor/task or driver code via:\nimport ray.util.collective as col': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'More Resources#\nThe following links provide helpful resources on how to efficiently leverage the ray.util.collective library.\n\n\n\nAPI References#\nAPIs exposed under the namespace ray.util.collective.': cannot unpack non-iterable NoneType object\nError in finding 'ray.util.collective.collective.is_group_initialized(group_name)[source]#\nCheck if the group is initialized in this process by the group name.\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Returns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'Parameters:\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'Parameters:\n\n\nReturns:\nNone.\n\n\n\n\n\nray.util.collective.collective.send(tensor, dst_rank: int, group_name: str = 'default')[source]#\nSend a tensor to a remote process synchronously.\n\nParameters:': cannot unpack non-iterable NoneType object\nError in finding 'tensor \u2013 the tensor to send.\ndst_rank \u2013 the rank of the destination process.\ngroup_name \u2013 the name of the collective group.\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:\n\n\nReturns:\nNone': cannot unpack non-iterable NoneType object\nError in finding 'tensor \u2013 the received tensor.\nsrc_rank \u2013 the rank of the source process.\ngroup_name \u2013 the name of the collective group.\n\n\nReturns:\nNone\n\n\n\n\n\nParameters:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'Testing for Python development#\n# Directly calling `pytest -v ...` may lose import paths.\npython -m pytest -v -s python/ray/tests/test_basic.py': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'Code Style#\nFor Python documentation, we follow a subset of the Google pydoc format. The following code snippets demonstrate the canonical Ray pydoc formatting:': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\nError in finding 'clang-tidy for C++ lint, requires clang and clang-tidy version 12 to be installed:\n\n./ci/lint/check-git-clang-tidy-output.sh\n\n\n\n\n\n\nBazel test command:\nbazel test --build_tests_only //:all': cannot unpack non-iterable NoneType object\nError in finding 'API compatibility style guide#\nRay provides stability guarantees for its public APIs in Ray core and libraries, which are described in the API Stability guide.\nOther recommendations:': cannot unpack non-iterable NoneType object\nError in finding 'API compatibility style guide#\nRay provides stability guarantees for its public APIs in Ray core and libraries, which are described in the API Stability guide.\nOther recommendations:': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'clang-tidy for C++ lint, requires clang and clang-tidy version 12 to be installed:\n\n./ci/lint/check-git-clang-tidy-output.sh\n\n\n\n\n\n\nBazel test command:\nbazel test --build_tests_only //:all': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'clang-tidy for C++ lint, requires clang and clang-tidy version 12 to be installed:\n\n./ci/lint/check-git-clang-tidy-output.sh\n\n\n\n\n\n\nBazel test command:\nbazel test --build_tests_only //:all': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\nError in finding 'clang-tidy for C++ lint, requires clang and clang-tidy version 12 to be installed:\n\n./ci/lint/check-git-clang-tidy-output.sh\n\n\n\n\n\n\nBazel test command:\nbazel test --build_tests_only //:all': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\nError in finding 'clang-tidy for C++ lint, requires clang and clang-tidy version 12 to be installed:\n\n./ci/lint/check-git-clang-tidy-output.sh\n\n\n\n\n\n\nBazel test command:\nbazel test --build_tests_only //:all': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\nError in finding 'clang-tidy for C++ lint, requires clang and clang-tidy version 12 to be installed:\n\n./ci/lint/check-git-clang-tidy-output.sh\n\n\n\n\n\n\nBazel test command:\nbazel test --build_tests_only //:all': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\nError in finding 'clang-tidy for C++ lint, requires clang and clang-tidy version 12 to be installed:\n\n./ci/lint/check-git-clang-tidy-output.sh\n\n\n\n\n\n\nBazel test command:\nbazel test --build_tests_only //:all': cannot unpack non-iterable NoneType object\nError in finding 'First merge the most recent version of master into your development branch.\ngit remote add upstream https://github.com/ray-project/ray.git\ngit pull . upstream/master\n\n\n\n\n\nPR Review Process#': cannot unpack non-iterable NoneType object\nError in finding 'For contributors who are in the ray-project organization:#\n\n\n\nFor contributors who are not in the ray-project organization:#': cannot unpack non-iterable NoneType object\nError in finding '>>> # A second example.\n            >>> ray_canonical_doc_style(72, \"goodbye\")\n            False\n\n    Returns:\n        The return value. Do not include types here.\n    \"\"\"': cannot unpack non-iterable NoneType object\nError in finding 'obj = RayClass(12, \"world\")\n            obj.increment_attr1()\n\n    @property\n    def attr3(self) -> str:\n        \"\"\"Public property of the class.': cannot unpack non-iterable NoneType object\n"
        },
        {
          "type": "stream",
          "name": "stdout",
          "text": "Error in finding 'clang-tidy for C++ lint, requires clang and clang-tidy version 12 to be installed:\n\n./ci/lint/check-git-clang-tidy-output.sh\n\n\n\n\n\n\nBazel test command:\nbazel test --build_tests_only //:all': cannot unpack non-iterable NoneType object\nError in finding 'If a CI build exception doesn\u2019t appear to be related to your change,\nplease visit this link to\ncheck recent tests known to be flaky.\n\n\n\n\nNote\nThese tips are based off of the TVM contributor guide.': cannot unpack non-iterable NoneType object\n"
        }
      ]
    },
    {
      "id": "RGSE",
      "code_hash": "bf0ba7b32f22cba6dde50c4d6fe167e8",
      "outputs": [
        {
          "type": "error",
          "ename": "exception",
          "evalue": "Collection [c657f7ee-c03d-405d-8026-2a2892809c8c] does not exists.",
          "traceback": []
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Collection(name=chunks_default)\nCollection(name=questions_default)\n"
        },
        {
          "type": "stream",
          "name": "stderr",
          "text": "<span class=\"codehilite\"><div class=\"highlight\"><pre><span></span><span class=\"gt\">Traceback (most recent call last):</span>\n  File <span class=\"nb\">&quot;/home/saladass/crafts/rag-int14124-final/.venv/lib/python3.11/site-packages/marimo/_runtime/executor.py&quot;</span>, line <span class=\"m\">138</span>, in <span class=\"n\">execute_cell</span>\n<span class=\"w\">    </span><span class=\"n\">exec</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">glbls</span><span class=\"p\">)</span>\n  File <span class=\"nb\">&quot;/tmp/marimo_30778/__marimo__cell_RGSE_.py&quot;</span>, line <span class=\"m\">14</span>, in <span class=\"n\">&lt;module&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">_result</span> <span class=\"o\">=</span> <span class=\"n\">_eval</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">retrieve</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"w\">              </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/home/saladass/crafts/rag-int14124-final/evaluation/evaluation.py&quot;</span>, line <span class=\"m\">215</span>, in <span class=\"n\">evaluate</span>\n<span class=\"w\">    </span><span class=\"n\">questions_db</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_questions_collection</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">include</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;embeddings&quot;</span><span class=\"p\">])</span>\n<span class=\"w\">                   </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/home/saladass/crafts/rag-int14124-final/.venv/lib/python3.11/site-packages/chromadb/api/models/Collection.py&quot;</span>, line <span class=\"m\">131</span>, in <span class=\"n\">get</span>\n<span class=\"w\">    </span><span class=\"n\">get_results</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_client</span><span class=\"o\">.</span><span class=\"n\">_get</span><span class=\"p\">(</span>\n<span class=\"w\">                  </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^</span>\n  File <span class=\"nb\">&quot;/home/saladass/crafts/rag-int14124-final/.venv/lib/python3.11/site-packages/chromadb/api/rust.py&quot;</span>, line <span class=\"m\">370</span>, in <span class=\"n\">_get</span>\n<span class=\"w\">    </span><span class=\"n\">rust_response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bindings</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"pm\">^^^^^^^^^^^^^^^^^^</span>\n<span class=\"gr\">chromadb.errors.NotFoundError</span>: <span class=\"n\">Collection [c657f7ee-c03d-405d-8026-2a2892809c8c] does not exists.</span>\n</pre></div>\n</span>"
        }
      ]
    },
    {
      "id": "nCgX",
      "code_hash": "f0ee251a8d8a5a3f780d507c6c046776",
      "outputs": [
        {
          "type": "data",
          "data": {
            "application/json": "[[\"text/plain:Collection(name=chunks_default)\", \"text/plain:Collection(name=questions_default)\"], [\"text/plain:Collection(name=chunks_default)\", \"text/plain:Collection(name=questions_default)\"], [\"text/plain:Collection(name=chunks_default)\", \"text/plain:Collection(name=questions_default)\"], [\"text/plain:Collection(name=chunks_default)\", \"text/plain:Collection(name=questions_default)\"]]"
          }
        }
      ],
      "console": []
    }
  ]
}